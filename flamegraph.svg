<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="8141"><g><title>`0x7FFFC9352BC1 (1 samples, 0.01%)</title><rect x="0.0000%" y="469" width="0.0123%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>`0x7FFFC932FCB6 (1 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0123%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>`0x7FFFC9330465 (1 samples, 0.01%)</title><rect x="0.0000%" y="437" width="0.0123%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>`0x7FFFC93E3510 (1 samples, 0.01%)</title><rect x="0.0000%" y="421" width="0.0123%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>`0x7FFFC935337F (1 samples, 0.01%)</title><rect x="0.0123%" y="469" width="0.0123%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2623%" y="479.50"></text></g><g><title>`0x7FFFC9339899 (1 samples, 0.01%)</title><rect x="0.0123%" y="453" width="0.0123%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2623%" y="463.50"></text></g><g><title>`0x7FFFC9339EBD (1 samples, 0.01%)</title><rect x="0.0123%" y="437" width="0.0123%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2623%" y="447.50"></text></g><g><title>`0x7FFFC9339FB0 (1 samples, 0.01%)</title><rect x="0.0123%" y="421" width="0.0123%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2623%" y="431.50"></text></g><g><title>`0x7FFFC933B7F2 (1 samples, 0.01%)</title><rect x="0.0123%" y="405" width="0.0123%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2623%" y="415.50"></text></g><g><title>`0x7FFFC93E4124 (1 samples, 0.01%)</title><rect x="0.0123%" y="389" width="0.0123%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2623%" y="399.50"></text></g><g><title>`0x7FFFC9353578 (1 samples, 0.01%)</title><rect x="0.0246%" y="469" width="0.0123%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.2746%" y="479.50"></text></g><g><title>`0x7FFFC9282CD3 (1 samples, 0.01%)</title><rect x="0.0246%" y="453" width="0.0123%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.2746%" y="463.50"></text></g><g><title>`0x7FFFC92848E5 (1 samples, 0.01%)</title><rect x="0.0246%" y="437" width="0.0123%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.2746%" y="447.50"></text></g><g><title>`0x7FFFC928513F (1 samples, 0.01%)</title><rect x="0.0246%" y="421" width="0.0123%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.2746%" y="431.50"></text></g><g><title>`0x7FFFC92D0E14 (1 samples, 0.01%)</title><rect x="0.0246%" y="405" width="0.0123%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.2746%" y="415.50"></text></g><g><title>`0x7FFFC92D1241 (1 samples, 0.01%)</title><rect x="0.0246%" y="389" width="0.0123%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.2746%" y="399.50"></text></g><g><title>`0x7FFFC92A7842 (1 samples, 0.01%)</title><rect x="0.0246%" y="373" width="0.0123%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.2746%" y="383.50"></text></g><g><title>`0x7FFFC92A8C4D (1 samples, 0.01%)</title><rect x="0.0246%" y="357" width="0.0123%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.2746%" y="367.50"></text></g><g><title>`0x7FFFC92DA48F (1 samples, 0.01%)</title><rect x="0.0246%" y="341" width="0.0123%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.2746%" y="351.50"></text></g><g><title>`0x7FFFC93535C3 (1 samples, 0.01%)</title><rect x="0.0369%" y="469" width="0.0123%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.2869%" y="479.50"></text></g><g><title>`0x7FFFC9365913 (1 samples, 0.01%)</title><rect x="0.0369%" y="453" width="0.0123%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.2869%" y="463.50"></text></g><g><title>`0x7FFFC932BE1E (1 samples, 0.01%)</title><rect x="0.0369%" y="437" width="0.0123%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.2869%" y="447.50"></text></g><g><title>`0x7FFFC932DC34 (1 samples, 0.01%)</title><rect x="0.0369%" y="421" width="0.0123%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.2869%" y="431.50"></text></g><g><title>`0x7FFFC932E882 (1 samples, 0.01%)</title><rect x="0.0369%" y="405" width="0.0123%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.2869%" y="415.50"></text></g><g><title>`0x7FFFC932E9DA (1 samples, 0.01%)</title><rect x="0.0369%" y="389" width="0.0123%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="0.2869%" y="399.50"></text></g><g><title>`0x7FFFC932ECE0 (1 samples, 0.01%)</title><rect x="0.0369%" y="373" width="0.0123%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="0.2869%" y="383.50"></text></g><g><title>`0x7FFFC9353EBA (1 samples, 0.01%)</title><rect x="0.0491%" y="469" width="0.0123%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="1"/><text x="0.2991%" y="479.50"></text></g><g><title>`0x7FFFC9321C7F (1 samples, 0.01%)</title><rect x="0.0491%" y="453" width="0.0123%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="1"/><text x="0.2991%" y="463.50"></text></g><g><title>`0x7FFFC9321B2C (1 samples, 0.01%)</title><rect x="0.0491%" y="437" width="0.0123%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="1"/><text x="0.2991%" y="447.50"></text></g><g><title>`0x7FFFC93E3B54 (1 samples, 0.01%)</title><rect x="0.0491%" y="421" width="0.0123%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="1"/><text x="0.2991%" y="431.50"></text></g><g><title>`0x7FFFC92CB80E (1 samples, 0.01%)</title><rect x="0.0614%" y="341" width="0.0123%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="1"/><text x="0.3114%" y="351.50"></text></g><g><title>`0x7FFFC92A2183 (1 samples, 0.01%)</title><rect x="0.0614%" y="325" width="0.0123%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="1"/><text x="0.3114%" y="335.50"></text></g><g><title>`0x7FFFC92CBABE (1 samples, 0.01%)</title><rect x="0.0737%" y="341" width="0.0123%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="1"/><text x="0.3237%" y="351.50"></text></g><g><title>`0x7FFFC92CD8EE (1 samples, 0.01%)</title><rect x="0.0737%" y="325" width="0.0123%" height="15" fill="rgb(254,191,54)" fg:x="6" fg:w="1"/><text x="0.3237%" y="335.50"></text></g><g><title>`0x7FFFC92ED001 (1 samples, 0.01%)</title><rect x="0.0737%" y="309" width="0.0123%" height="15" fill="rgb(241,83,37)" fg:x="6" fg:w="1"/><text x="0.3237%" y="319.50"></text></g><g><title>`0x7FFFC92ED5A8 (1 samples, 0.01%)</title><rect x="0.0737%" y="293" width="0.0123%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="1"/><text x="0.3237%" y="303.50"></text></g><g><title>`0x7FFFC92CBABE (1 samples, 0.01%)</title><rect x="0.0737%" y="277" width="0.0123%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="1"/><text x="0.3237%" y="287.50"></text></g><g><title>`0x7FFFC92CC455 (1 samples, 0.01%)</title><rect x="0.0737%" y="261" width="0.0123%" height="15" fill="rgb(245,192,40)" fg:x="6" fg:w="1"/><text x="0.3237%" y="271.50"></text></g><g><title>`0x7FFFC9296DA2 (1 samples, 0.01%)</title><rect x="0.0737%" y="245" width="0.0123%" height="15" fill="rgb(238,167,29)" fg:x="6" fg:w="1"/><text x="0.3237%" y="255.50"></text></g><g><title>`0x7FFFC9344DE1 (1 samples, 0.01%)</title><rect x="0.0737%" y="229" width="0.0123%" height="15" fill="rgb(232,182,51)" fg:x="6" fg:w="1"/><text x="0.3237%" y="239.50"></text></g><g><title>`0x7FFFC92CA4F2 (3 samples, 0.04%)</title><rect x="0.0614%" y="405" width="0.0369%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="3"/><text x="0.3114%" y="415.50"></text></g><g><title>`0x7FFFC92CEF05 (3 samples, 0.04%)</title><rect x="0.0614%" y="389" width="0.0369%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="3"/><text x="0.3114%" y="399.50"></text></g><g><title>`0x7FFFC92ED001 (3 samples, 0.04%)</title><rect x="0.0614%" y="373" width="0.0369%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="3"/><text x="0.3114%" y="383.50"></text></g><g><title>`0x7FFFC92ED5A8 (3 samples, 0.04%)</title><rect x="0.0614%" y="357" width="0.0369%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="3"/><text x="0.3114%" y="367.50"></text></g><g><title>`0x7FFFC92CBC32 (1 samples, 0.01%)</title><rect x="0.0860%" y="341" width="0.0123%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="1"/><text x="0.3360%" y="351.50"></text></g><g><title>`0x7FFFC9292EC9 (1 samples, 0.01%)</title><rect x="0.0860%" y="325" width="0.0123%" height="15" fill="rgb(206,96,30)" fg:x="7" fg:w="1"/><text x="0.3360%" y="335.50"></text></g><g><title>`0x7FFFC92CA51A (1 samples, 0.01%)</title><rect x="0.0983%" y="405" width="0.0123%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="1"/><text x="0.3483%" y="415.50"></text></g><g><title>`0x7FFFC92EFC27 (1 samples, 0.01%)</title><rect x="0.0983%" y="389" width="0.0123%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="1"/><text x="0.3483%" y="399.50"></text></g><g><title>`0x7FFFC92EFDA1 (1 samples, 0.01%)</title><rect x="0.0983%" y="373" width="0.0123%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="1"/><text x="0.3483%" y="383.50"></text></g><g><title>`0x7FFFC92936D6 (1 samples, 0.01%)</title><rect x="0.0983%" y="357" width="0.0123%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="1"/><text x="0.3483%" y="367.50"></text></g><g><title>`0x7FFFC92A0E23 (1 samples, 0.01%)</title><rect x="0.0983%" y="341" width="0.0123%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="1"/><text x="0.3483%" y="351.50"></text></g><g><title>`0x7FFFC92A1C53 (1 samples, 0.01%)</title><rect x="0.0983%" y="325" width="0.0123%" height="15" fill="rgb(250,213,24)" fg:x="8" fg:w="1"/><text x="0.3483%" y="335.50"></text></g><g><title>`0x7FFFC93E898F (1 samples, 0.01%)</title><rect x="0.0983%" y="309" width="0.0123%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="1"/><text x="0.3483%" y="319.50"></text></g><g><title>`0x7FFFC6A43FFD (1 samples, 0.01%)</title><rect x="0.1106%" y="293" width="0.0123%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="0.3606%" y="303.50"></text></g><g><title>`0x7FFFC6974A63 (1 samples, 0.01%)</title><rect x="0.1106%" y="277" width="0.0123%" height="15" fill="rgb(231,145,46)" fg:x="9" fg:w="1"/><text x="0.3606%" y="287.50"></text></g><g><title>`0x7FFFC6973678 (1 samples, 0.01%)</title><rect x="0.1106%" y="261" width="0.0123%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="1"/><text x="0.3606%" y="271.50"></text></g><g><title>`0x7FFFC6973535 (1 samples, 0.01%)</title><rect x="0.1106%" y="245" width="0.0123%" height="15" fill="rgb(217,147,25)" fg:x="9" fg:w="1"/><text x="0.3606%" y="255.50"></text></g><g><title>`0x7FFFC6972FCC (1 samples, 0.01%)</title><rect x="0.1106%" y="229" width="0.0123%" height="15" fill="rgb(247,81,37)" fg:x="9" fg:w="1"/><text x="0.3606%" y="239.50"></text></g><g><title>`0x7FFFC937C2BE (1 samples, 0.01%)</title><rect x="0.1106%" y="213" width="0.0123%" height="15" fill="rgb(209,12,38)" fg:x="9" fg:w="1"/><text x="0.3606%" y="223.50"></text></g><g><title>`0x7FFFC93E5324 (1 samples, 0.01%)</title><rect x="0.1106%" y="197" width="0.0123%" height="15" fill="rgb(227,1,9)" fg:x="9" fg:w="1"/><text x="0.3606%" y="207.50"></text></g><g><title>`0x7FFFC934B934 (6 samples, 0.07%)</title><rect x="0.0614%" y="453" width="0.0737%" height="15" fill="rgb(248,47,43)" fg:x="5" fg:w="6"/><text x="0.3114%" y="463.50"></text></g><g><title>`0x7FFFC9294FB0 (6 samples, 0.07%)</title><rect x="0.0614%" y="437" width="0.0737%" height="15" fill="rgb(221,10,30)" fg:x="5" fg:w="6"/><text x="0.3114%" y="447.50"></text></g><g><title>`0x7FFFC92CA190 (6 samples, 0.07%)</title><rect x="0.0614%" y="421" width="0.0737%" height="15" fill="rgb(210,229,1)" fg:x="5" fg:w="6"/><text x="0.3114%" y="431.50"></text></g><g><title>`0x7FFFC92CA584 (2 samples, 0.02%)</title><rect x="0.1106%" y="405" width="0.0246%" height="15" fill="rgb(222,148,37)" fg:x="9" fg:w="2"/><text x="0.3606%" y="415.50"></text></g><g><title>`0x7FFFC9287883 (2 samples, 0.02%)</title><rect x="0.1106%" y="389" width="0.0246%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="2"/><text x="0.3606%" y="399.50"></text></g><g><title>`0x7FFFC9288726 (2 samples, 0.02%)</title><rect x="0.1106%" y="373" width="0.0246%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="2"/><text x="0.3606%" y="383.50"></text></g><g><title>`0x7FFFC92886FA (2 samples, 0.02%)</title><rect x="0.1106%" y="357" width="0.0246%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="2"/><text x="0.3606%" y="367.50"></text></g><g><title>`0x7FFFC92F37AC (2 samples, 0.02%)</title><rect x="0.1106%" y="341" width="0.0246%" height="15" fill="rgb(213,79,30)" fg:x="9" fg:w="2"/><text x="0.3606%" y="351.50"></text></g><g><title>`0x7FFFC92F483E (2 samples, 0.02%)</title><rect x="0.1106%" y="325" width="0.0246%" height="15" fill="rgb(246,177,23)" fg:x="9" fg:w="2"/><text x="0.3606%" y="335.50"></text></g><g><title>`0x7FFFC93E0EDE (2 samples, 0.02%)</title><rect x="0.1106%" y="309" width="0.0246%" height="15" fill="rgb(230,62,27)" fg:x="9" fg:w="2"/><text x="0.3606%" y="319.50"></text></g><g><title>`0x7FFFC6A440AF (1 samples, 0.01%)</title><rect x="0.1228%" y="293" width="0.0123%" height="15" fill="rgb(216,154,8)" fg:x="10" fg:w="1"/><text x="0.3728%" y="303.50"></text></g><g><title>`0x7FFFC69EE871 (1 samples, 0.01%)</title><rect x="0.1228%" y="277" width="0.0123%" height="15" fill="rgb(244,35,45)" fg:x="10" fg:w="1"/><text x="0.3728%" y="287.50"></text></g><g><title>`0x7FFFC69EE630 (1 samples, 0.01%)</title><rect x="0.1228%" y="261" width="0.0123%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="1"/><text x="0.3728%" y="271.50"></text></g><g><title>`0x7FFFC69BD833 (1 samples, 0.01%)</title><rect x="0.1228%" y="245" width="0.0123%" height="15" fill="rgb(240,54,50)" fg:x="10" fg:w="1"/><text x="0.3728%" y="255.50"></text></g><g><title>`0x7FFFC69BD903 (1 samples, 0.01%)</title><rect x="0.1228%" y="229" width="0.0123%" height="15" fill="rgb(233,84,52)" fg:x="10" fg:w="1"/><text x="0.3728%" y="239.50"></text></g><g><title>`0x7FFFC69EFBB0 (1 samples, 0.01%)</title><rect x="0.1228%" y="213" width="0.0123%" height="15" fill="rgb(207,117,47)" fg:x="10" fg:w="1"/><text x="0.3728%" y="223.50"></text></g><g><title>`0x7FFFC69B6DD5 (1 samples, 0.01%)</title><rect x="0.1228%" y="197" width="0.0123%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="1"/><text x="0.3728%" y="207.50"></text></g><g><title>`0x7FFFC69B8A80 (1 samples, 0.01%)</title><rect x="0.1228%" y="181" width="0.0123%" height="15" fill="rgb(209,38,44)" fg:x="10" fg:w="1"/><text x="0.3728%" y="191.50"></text></g><g><title>`0x7FFFC934B9A9 (1 samples, 0.01%)</title><rect x="0.1351%" y="453" width="0.0123%" height="15" fill="rgb(236,212,23)" fg:x="11" fg:w="1"/><text x="0.3851%" y="463.50"></text></g><g><title>`0x7FFFC92F16CC (1 samples, 0.01%)</title><rect x="0.1351%" y="437" width="0.0123%" height="15" fill="rgb(242,79,21)" fg:x="11" fg:w="1"/><text x="0.3851%" y="447.50"></text></g><g><title>`0x7FFFC9296DA2 (1 samples, 0.01%)</title><rect x="0.1351%" y="421" width="0.0123%" height="15" fill="rgb(211,96,35)" fg:x="11" fg:w="1"/><text x="0.3851%" y="431.50"></text></g><g><title>`0x7FFFC9344D9A (1 samples, 0.01%)</title><rect x="0.1351%" y="405" width="0.0123%" height="15" fill="rgb(253,215,40)" fg:x="11" fg:w="1"/><text x="0.3851%" y="415.50"></text></g><g><title>`0x7FFFC9354345 (8 samples, 0.10%)</title><rect x="0.0614%" y="469" width="0.0983%" height="15" fill="rgb(211,81,21)" fg:x="5" fg:w="8"/><text x="0.3114%" y="479.50"></text></g><g><title>`0x7FFFC934B9D9 (1 samples, 0.01%)</title><rect x="0.1474%" y="453" width="0.0123%" height="15" fill="rgb(208,190,38)" fg:x="12" fg:w="1"/><text x="0.3974%" y="463.50"></text></g><g><title>`0x7FFFC9294385 (1 samples, 0.01%)</title><rect x="0.1474%" y="437" width="0.0123%" height="15" fill="rgb(235,213,38)" fg:x="12" fg:w="1"/><text x="0.3974%" y="447.50"></text></g><g><title>`0x7FFFC93E3474 (1 samples, 0.01%)</title><rect x="0.1474%" y="421" width="0.0123%" height="15" fill="rgb(237,122,38)" fg:x="12" fg:w="1"/><text x="0.3974%" y="431.50"></text></g><g><title>`0x7FFFC92ECF73 (1 samples, 0.01%)</title><rect x="0.1597%" y="421" width="0.0123%" height="15" fill="rgb(244,218,35)" fg:x="13" fg:w="1"/><text x="0.4097%" y="431.50"></text></g><g><title>`0x7FFFC92ED2D9 (1 samples, 0.01%)</title><rect x="0.1597%" y="405" width="0.0123%" height="15" fill="rgb(240,68,47)" fg:x="13" fg:w="1"/><text x="0.4097%" y="415.50"></text></g><g><title>`0x7FFFC93E3914 (1 samples, 0.01%)</title><rect x="0.1597%" y="389" width="0.0123%" height="15" fill="rgb(210,16,53)" fg:x="13" fg:w="1"/><text x="0.4097%" y="399.50"></text></g><g><title>`0x7FFFC92CB896 (1 samples, 0.01%)</title><rect x="0.1720%" y="389" width="0.0123%" height="15" fill="rgb(235,124,12)" fg:x="14" fg:w="1"/><text x="0.4220%" y="399.50"></text></g><g><title>`0x7FFFC935444F (3 samples, 0.04%)</title><rect x="0.1597%" y="469" width="0.0369%" height="15" fill="rgb(224,169,11)" fg:x="13" fg:w="3"/><text x="0.4097%" y="479.50"></text></g><g><title>`0x7FFFC92CBABE (3 samples, 0.04%)</title><rect x="0.1597%" y="453" width="0.0369%" height="15" fill="rgb(250,166,2)" fg:x="13" fg:w="3"/><text x="0.4097%" y="463.50"></text></g><g><title>`0x7FFFC92CD8EE (3 samples, 0.04%)</title><rect x="0.1597%" y="437" width="0.0369%" height="15" fill="rgb(242,216,29)" fg:x="13" fg:w="3"/><text x="0.4097%" y="447.50"></text></g><g><title>`0x7FFFC92ED001 (2 samples, 0.02%)</title><rect x="0.1720%" y="421" width="0.0246%" height="15" fill="rgb(230,116,27)" fg:x="14" fg:w="2"/><text x="0.4220%" y="431.50"></text></g><g><title>`0x7FFFC92ED5A8 (2 samples, 0.02%)</title><rect x="0.1720%" y="405" width="0.0246%" height="15" fill="rgb(228,99,48)" fg:x="14" fg:w="2"/><text x="0.4220%" y="415.50"></text></g><g><title>`0x7FFFC92CBBC1 (1 samples, 0.01%)</title><rect x="0.1843%" y="389" width="0.0123%" height="15" fill="rgb(253,11,6)" fg:x="15" fg:w="1"/><text x="0.4343%" y="399.50"></text></g><g><title>`0x7FFFC93013F0 (1 samples, 0.01%)</title><rect x="0.1843%" y="373" width="0.0123%" height="15" fill="rgb(247,143,39)" fg:x="15" fg:w="1"/><text x="0.4343%" y="383.50"></text></g><g><title>`0x7FFFC92D618F (1 samples, 0.01%)</title><rect x="0.1843%" y="357" width="0.0123%" height="15" fill="rgb(236,97,10)" fg:x="15" fg:w="1"/><text x="0.4343%" y="367.50"></text></g><g><title>`0x7FFFB7C20351 (1 samples, 0.01%)</title><rect x="0.1965%" y="373" width="0.0123%" height="15" fill="rgb(233,208,19)" fg:x="16" fg:w="1"/><text x="0.4465%" y="383.50"></text></g><g><title>`0x7FFFB7C153D9 (1 samples, 0.01%)</title><rect x="0.1965%" y="357" width="0.0123%" height="15" fill="rgb(216,164,2)" fg:x="16" fg:w="1"/><text x="0.4465%" y="367.50"></text></g><g><title>`0x7FFFB7C216DA (1 samples, 0.01%)</title><rect x="0.1965%" y="341" width="0.0123%" height="15" fill="rgb(220,129,5)" fg:x="16" fg:w="1"/><text x="0.4465%" y="351.50"></text></g><g><title>`0x7FFFC92886FA (2 samples, 0.02%)</title><rect x="0.1965%" y="437" width="0.0246%" height="15" fill="rgb(242,17,10)" fg:x="16" fg:w="2"/><text x="0.4465%" y="447.50"></text></g><g><title>`0x7FFFC92F37AC (2 samples, 0.02%)</title><rect x="0.1965%" y="421" width="0.0246%" height="15" fill="rgb(242,107,0)" fg:x="16" fg:w="2"/><text x="0.4465%" y="431.50"></text></g><g><title>`0x7FFFC92F483E (2 samples, 0.02%)</title><rect x="0.1965%" y="405" width="0.0246%" height="15" fill="rgb(251,28,31)" fg:x="16" fg:w="2"/><text x="0.4465%" y="415.50"></text></g><g><title>`0x7FFFC93E0EDE (2 samples, 0.02%)</title><rect x="0.1965%" y="389" width="0.0246%" height="15" fill="rgb(233,223,10)" fg:x="16" fg:w="2"/><text x="0.4465%" y="399.50"></text></g><g><title>`0x7FFFC68F03B2 (1 samples, 0.01%)</title><rect x="0.2088%" y="373" width="0.0123%" height="15" fill="rgb(215,21,27)" fg:x="17" fg:w="1"/><text x="0.4588%" y="383.50"></text></g><g><title>`0x7FFFC68F0724 (1 samples, 0.01%)</title><rect x="0.2088%" y="357" width="0.0123%" height="15" fill="rgb(232,23,21)" fg:x="17" fg:w="1"/><text x="0.4588%" y="367.50"></text></g><g><title>`0x7FFFC68F231B (1 samples, 0.01%)</title><rect x="0.2088%" y="341" width="0.0123%" height="15" fill="rgb(244,5,23)" fg:x="17" fg:w="1"/><text x="0.4588%" y="351.50"></text></g><g><title>`0x7FFFC6908143 (1 samples, 0.01%)</title><rect x="0.2088%" y="325" width="0.0123%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="1"/><text x="0.4588%" y="335.50"></text></g><g><title>`0x7FFFC6908263 (1 samples, 0.01%)</title><rect x="0.2088%" y="309" width="0.0123%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="1"/><text x="0.4588%" y="319.50"></text></g><g><title>`0x7FFFC93E3894 (1 samples, 0.01%)</title><rect x="0.2088%" y="293" width="0.0123%" height="15" fill="rgb(212,68,19)" fg:x="17" fg:w="1"/><text x="0.4588%" y="303.50"></text></g><g><title>`0x7FFFC641A776 (1 samples, 0.01%)</title><rect x="0.2211%" y="325" width="0.0123%" height="15" fill="rgb(240,187,13)" fg:x="18" fg:w="1"/><text x="0.4711%" y="335.50"></text></g><g><title>`0x7FFFC641A906 (1 samples, 0.01%)</title><rect x="0.2211%" y="309" width="0.0123%" height="15" fill="rgb(223,113,26)" fg:x="18" fg:w="1"/><text x="0.4711%" y="319.50"></text></g><g><title>`0x7FFFC641AE4A (1 samples, 0.01%)</title><rect x="0.2211%" y="293" width="0.0123%" height="15" fill="rgb(206,192,2)" fg:x="18" fg:w="1"/><text x="0.4711%" y="303.50"></text></g><g><title>`0x7FFFC641AF89 (1 samples, 0.01%)</title><rect x="0.2211%" y="277" width="0.0123%" height="15" fill="rgb(241,108,4)" fg:x="18" fg:w="1"/><text x="0.4711%" y="287.50"></text></g><g><title>`0x7FFFC641B2CF (1 samples, 0.01%)</title><rect x="0.2211%" y="261" width="0.0123%" height="15" fill="rgb(247,173,49)" fg:x="18" fg:w="1"/><text x="0.4711%" y="271.50"></text></g><g><title>`0x7FFFC697A560 (1 samples, 0.01%)</title><rect x="0.2211%" y="245" width="0.0123%" height="15" fill="rgb(224,114,35)" fg:x="18" fg:w="1"/><text x="0.4711%" y="255.50"></text></g><g><title>`0x7FFFC9282A2E (20 samples, 0.25%)</title><rect x="0.0000%" y="517" width="0.2457%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="20"/><text x="0.2500%" y="527.50"></text></g><g><title>`0x7FFFC93524DA (20 samples, 0.25%)</title><rect x="0.0000%" y="501" width="0.2457%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="20"/><text x="0.2500%" y="511.50"></text></g><g><title>`0x7FFFC93526F0 (20 samples, 0.25%)</title><rect x="0.0000%" y="485" width="0.2457%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="20"/><text x="0.2500%" y="495.50"></text></g><g><title>`0x7FFFC9354566 (4 samples, 0.05%)</title><rect x="0.1965%" y="469" width="0.0491%" height="15" fill="rgb(205,117,38)" fg:x="16" fg:w="4"/><text x="0.4465%" y="479.50"></text></g><g><title>`0x7FFFC9288726 (4 samples, 0.05%)</title><rect x="0.1965%" y="453" width="0.0491%" height="15" fill="rgb(237,72,25)" fg:x="16" fg:w="4"/><text x="0.4465%" y="463.50"></text></g><g><title>`0x7FFFC9288726 (2 samples, 0.02%)</title><rect x="0.2211%" y="437" width="0.0246%" height="15" fill="rgb(244,70,9)" fg:x="18" fg:w="2"/><text x="0.4711%" y="447.50"></text></g><g><title>`0x7FFFC92886FA (2 samples, 0.02%)</title><rect x="0.2211%" y="421" width="0.0246%" height="15" fill="rgb(217,125,39)" fg:x="18" fg:w="2"/><text x="0.4711%" y="431.50"></text></g><g><title>`0x7FFFC92F37AC (2 samples, 0.02%)</title><rect x="0.2211%" y="405" width="0.0246%" height="15" fill="rgb(235,36,10)" fg:x="18" fg:w="2"/><text x="0.4711%" y="415.50"></text></g><g><title>`0x7FFFC92F483E (2 samples, 0.02%)</title><rect x="0.2211%" y="389" width="0.0246%" height="15" fill="rgb(251,123,47)" fg:x="18" fg:w="2"/><text x="0.4711%" y="399.50"></text></g><g><title>`0x7FFFC93E0EDE (2 samples, 0.02%)</title><rect x="0.2211%" y="373" width="0.0246%" height="15" fill="rgb(221,13,13)" fg:x="18" fg:w="2"/><text x="0.4711%" y="383.50"></text></g><g><title>`0x7FFFC6426E26 (2 samples, 0.02%)</title><rect x="0.2211%" y="357" width="0.0246%" height="15" fill="rgb(238,131,9)" fg:x="18" fg:w="2"/><text x="0.4711%" y="367.50"></text></g><g><title>`0x7FFFC648AD56 (2 samples, 0.02%)</title><rect x="0.2211%" y="341" width="0.0246%" height="15" fill="rgb(211,50,8)" fg:x="18" fg:w="2"/><text x="0.4711%" y="351.50"></text></g><g><title>`0x7FFFC648F359 (1 samples, 0.01%)</title><rect x="0.2334%" y="325" width="0.0123%" height="15" fill="rgb(245,182,24)" fg:x="19" fg:w="1"/><text x="0.4834%" y="335.50"></text></g><g><title>`0x7FFFC648F3BD (1 samples, 0.01%)</title><rect x="0.2334%" y="309" width="0.0123%" height="15" fill="rgb(242,14,37)" fg:x="19" fg:w="1"/><text x="0.4834%" y="319.50"></text></g><g><title>`0x7FFFC64FD5C0 (1 samples, 0.01%)</title><rect x="0.2334%" y="293" width="0.0123%" height="15" fill="rgb(246,228,12)" fg:x="19" fg:w="1"/><text x="0.4834%" y="303.50"></text></g><g><title>`0x7FFFC9288D70 (1 samples, 0.01%)</title><rect x="0.2457%" y="517" width="0.0123%" height="15" fill="rgb(213,55,15)" fg:x="20" fg:w="1"/><text x="0.4957%" y="527.50"></text></g><g><title>`0x7FFFC92FDD88 (1 samples, 0.01%)</title><rect x="0.2580%" y="485" width="0.0123%" height="15" fill="rgb(209,9,3)" fg:x="21" fg:w="1"/><text x="0.5080%" y="495.50"></text></g><g><title>`0x7FFFC9370DB1 (1 samples, 0.01%)</title><rect x="0.2580%" y="469" width="0.0123%" height="15" fill="rgb(230,59,30)" fg:x="21" fg:w="1"/><text x="0.5080%" y="479.50"></text></g><g><title>`0x7FFFC92D0E14 (1 samples, 0.01%)</title><rect x="0.2580%" y="453" width="0.0123%" height="15" fill="rgb(209,121,21)" fg:x="21" fg:w="1"/><text x="0.5080%" y="463.50"></text></g><g><title>`0x7FFFC92D1241 (1 samples, 0.01%)</title><rect x="0.2580%" y="437" width="0.0123%" height="15" fill="rgb(220,109,13)" fg:x="21" fg:w="1"/><text x="0.5080%" y="447.50"></text></g><g><title>`0x7FFFC92A7842 (1 samples, 0.01%)</title><rect x="0.2580%" y="421" width="0.0123%" height="15" fill="rgb(232,18,1)" fg:x="21" fg:w="1"/><text x="0.5080%" y="431.50"></text></g><g><title>`0x7FFFC92A8BE2 (1 samples, 0.01%)</title><rect x="0.2580%" y="405" width="0.0123%" height="15" fill="rgb(215,41,42)" fg:x="21" fg:w="1"/><text x="0.5080%" y="415.50"></text></g><g><title>`0x7FFFC92FD072 (1 samples, 0.01%)</title><rect x="0.2702%" y="469" width="0.0123%" height="15" fill="rgb(224,123,36)" fg:x="22" fg:w="1"/><text x="0.5202%" y="479.50"></text></g><g><title>`0x7FFFC92C3944 (1 samples, 0.01%)</title><rect x="0.2702%" y="453" width="0.0123%" height="15" fill="rgb(240,125,3)" fg:x="22" fg:w="1"/><text x="0.5202%" y="463.50"></text></g><g><title>`0x7FFFC93E61E4 (1 samples, 0.01%)</title><rect x="0.2702%" y="437" width="0.0123%" height="15" fill="rgb(205,98,50)" fg:x="22" fg:w="1"/><text x="0.5202%" y="447.50"></text></g><g><title>`0x7FFFC92EFF81 (1 samples, 0.01%)</title><rect x="0.2825%" y="437" width="0.0123%" height="15" fill="rgb(205,185,37)" fg:x="23" fg:w="1"/><text x="0.5325%" y="447.50"></text></g><g><title>`0x7FFFC92F0659 (1 samples, 0.01%)</title><rect x="0.2825%" y="421" width="0.0123%" height="15" fill="rgb(238,207,15)" fg:x="23" fg:w="1"/><text x="0.5325%" y="431.50"></text></g><g><title>`0x7FFFC92F0BB0 (1 samples, 0.01%)</title><rect x="0.2825%" y="405" width="0.0123%" height="15" fill="rgb(213,199,42)" fg:x="23" fg:w="1"/><text x="0.5325%" y="415.50"></text></g><g><title>`0x7FFFC92F0EE3 (1 samples, 0.01%)</title><rect x="0.2825%" y="389" width="0.0123%" height="15" fill="rgb(235,201,11)" fg:x="23" fg:w="1"/><text x="0.5325%" y="399.50"></text></g><g><title>`0x7FFFC93E39D4 (1 samples, 0.01%)</title><rect x="0.2825%" y="373" width="0.0123%" height="15" fill="rgb(207,46,11)" fg:x="23" fg:w="1"/><text x="0.5325%" y="383.50"></text></g><g><title>`0x7FFFC92EFCDA (2 samples, 0.02%)</title><rect x="0.2825%" y="453" width="0.0246%" height="15" fill="rgb(241,35,35)" fg:x="23" fg:w="2"/><text x="0.5325%" y="463.50"></text></g><g><title>`0x7FFFC92F00AC (1 samples, 0.01%)</title><rect x="0.2948%" y="437" width="0.0123%" height="15" fill="rgb(243,32,47)" fg:x="24" fg:w="1"/><text x="0.5448%" y="447.50"></text></g><g><title>`0x7FFFC92F24CC (1 samples, 0.01%)</title><rect x="0.2948%" y="421" width="0.0123%" height="15" fill="rgb(247,202,23)" fg:x="24" fg:w="1"/><text x="0.5448%" y="431.50"></text></g><g><title>`0x7FFFC92ED42E (1 samples, 0.01%)</title><rect x="0.2948%" y="405" width="0.0123%" height="15" fill="rgb(219,102,11)" fg:x="24" fg:w="1"/><text x="0.5448%" y="415.50"></text></g><g><title>`0x7FFFC92ED9EB (1 samples, 0.01%)</title><rect x="0.2948%" y="389" width="0.0123%" height="15" fill="rgb(243,110,44)" fg:x="24" fg:w="1"/><text x="0.5448%" y="399.50"></text></g><g><title>`0x7FFFC93E3734 (1 samples, 0.01%)</title><rect x="0.2948%" y="373" width="0.0123%" height="15" fill="rgb(222,74,54)" fg:x="24" fg:w="1"/><text x="0.5448%" y="383.50"></text></g><g><title>`0x7FFFC92FE4B1 (5 samples, 0.06%)</title><rect x="0.2702%" y="485" width="0.0614%" height="15" fill="rgb(216,99,12)" fg:x="22" fg:w="5"/><text x="0.5202%" y="495.50"></text></g><g><title>`0x7FFFC92FD270 (4 samples, 0.05%)</title><rect x="0.2825%" y="469" width="0.0491%" height="15" fill="rgb(226,22,26)" fg:x="23" fg:w="4"/><text x="0.5325%" y="479.50"></text></g><g><title>`0x7FFFC92EFDA1 (2 samples, 0.02%)</title><rect x="0.3071%" y="453" width="0.0246%" height="15" fill="rgb(217,163,10)" fg:x="25" fg:w="2"/><text x="0.5571%" y="463.50"></text></g><g><title>`0x7FFFC9292EC9 (2 samples, 0.02%)</title><rect x="0.3071%" y="437" width="0.0246%" height="15" fill="rgb(213,25,53)" fg:x="25" fg:w="2"/><text x="0.5571%" y="447.50"></text></g><g><title>`0x7FFFC647E716 (1 samples, 0.01%)</title><rect x="0.3317%" y="469" width="0.0123%" height="15" fill="rgb(252,105,26)" fg:x="27" fg:w="1"/><text x="0.5817%" y="479.50"></text></g><g><title>kaori.exe`pre_cpp_initialization() (1 samples, 0.01%)</title><rect x="0.3317%" y="453" width="0.0123%" height="15" fill="rgb(220,39,43)" fg:x="27" fg:w="1"/><text x="0.5817%" y="463.50"></text></g><g><title>`0x7FFFC6A50288 (1 samples, 0.01%)</title><rect x="0.3317%" y="437" width="0.0123%" height="15" fill="rgb(229,68,48)" fg:x="27" fg:w="1"/><text x="0.5817%" y="447.50"></text></g><g><title>`0x7FFFC6A5043B (1 samples, 0.01%)</title><rect x="0.3317%" y="421" width="0.0123%" height="15" fill="rgb(252,8,32)" fg:x="27" fg:w="1"/><text x="0.5817%" y="431.50"></text></g><g><title>`0x7FFFC93E3694 (1 samples, 0.01%)</title><rect x="0.3317%" y="405" width="0.0123%" height="15" fill="rgb(223,20,43)" fg:x="27" fg:w="1"/><text x="0.5817%" y="415.50"></text></g><g><title>`0x7FFFC92F032F (1 samples, 0.01%)</title><rect x="0.3439%" y="325" width="0.0123%" height="15" fill="rgb(229,81,49)" fg:x="28" fg:w="1"/><text x="0.5939%" y="335.50"></text></g><g><title>`0x7FFFC92F0BB0 (1 samples, 0.01%)</title><rect x="0.3439%" y="309" width="0.0123%" height="15" fill="rgb(236,28,36)" fg:x="28" fg:w="1"/><text x="0.5939%" y="319.50"></text></g><g><title>`0x7FFFC92F0EE3 (1 samples, 0.01%)</title><rect x="0.3439%" y="293" width="0.0123%" height="15" fill="rgb(249,185,26)" fg:x="28" fg:w="1"/><text x="0.5939%" y="303.50"></text></g><g><title>`0x7FFFC93E39D4 (1 samples, 0.01%)</title><rect x="0.3439%" y="277" width="0.0123%" height="15" fill="rgb(249,174,33)" fg:x="28" fg:w="1"/><text x="0.5939%" y="287.50"></text></g><g><title>`0x7FFFC92F2377 (1 samples, 0.01%)</title><rect x="0.3562%" y="309" width="0.0123%" height="15" fill="rgb(233,201,37)" fg:x="29" fg:w="1"/><text x="0.6062%" y="319.50"></text></g><g><title>`0x7FFFC93E3894 (1 samples, 0.01%)</title><rect x="0.3562%" y="293" width="0.0123%" height="15" fill="rgb(221,78,26)" fg:x="29" fg:w="1"/><text x="0.6062%" y="303.50"></text></g><g><title>`0x7FFFC92CBABE (1 samples, 0.01%)</title><rect x="0.3685%" y="277" width="0.0123%" height="15" fill="rgb(250,127,30)" fg:x="30" fg:w="1"/><text x="0.6185%" y="287.50"></text></g><g><title>`0x7FFFC92CCB32 (1 samples, 0.01%)</title><rect x="0.3685%" y="261" width="0.0123%" height="15" fill="rgb(230,49,44)" fg:x="30" fg:w="1"/><text x="0.6185%" y="271.50"></text></g><g><title>`0x7FFFC92CA510 (4 samples, 0.05%)</title><rect x="0.3439%" y="357" width="0.0491%" height="15" fill="rgb(229,67,23)" fg:x="28" fg:w="4"/><text x="0.5939%" y="367.50"></text></g><g><title>`0x7FFFC92EFDB4 (4 samples, 0.05%)</title><rect x="0.3439%" y="341" width="0.0491%" height="15" fill="rgb(249,83,47)" fg:x="28" fg:w="4"/><text x="0.5939%" y="351.50"></text></g><g><title>`0x7FFFC92F039D (3 samples, 0.04%)</title><rect x="0.3562%" y="325" width="0.0369%" height="15" fill="rgb(215,43,3)" fg:x="29" fg:w="3"/><text x="0.6062%" y="335.50"></text></g><g><title>`0x7FFFC92F24CC (2 samples, 0.02%)</title><rect x="0.3685%" y="309" width="0.0246%" height="15" fill="rgb(238,154,13)" fg:x="30" fg:w="2"/><text x="0.6185%" y="319.50"></text></g><g><title>`0x7FFFC92ED5A8 (2 samples, 0.02%)</title><rect x="0.3685%" y="293" width="0.0246%" height="15" fill="rgb(219,56,2)" fg:x="30" fg:w="2"/><text x="0.6185%" y="303.50"></text></g><g><title>`0x7FFFC92CBC32 (1 samples, 0.01%)</title><rect x="0.3808%" y="277" width="0.0123%" height="15" fill="rgb(233,0,4)" fg:x="31" fg:w="1"/><text x="0.6308%" y="287.50"></text></g><g><title>`0x7FFFC9292EC6 (1 samples, 0.01%)</title><rect x="0.3808%" y="261" width="0.0123%" height="15" fill="rgb(235,30,7)" fg:x="31" fg:w="1"/><text x="0.6308%" y="271.50"></text></g><g><title>`0x7FFFC64B0046 (5 samples, 0.06%)</title><rect x="0.3439%" y="469" width="0.0614%" height="15" fill="rgb(250,79,13)" fg:x="28" fg:w="5"/><text x="0.5939%" y="479.50"></text></g><g><title>`0x7FFFC649553D (5 samples, 0.06%)</title><rect x="0.3439%" y="453" width="0.0614%" height="15" fill="rgb(211,146,34)" fg:x="28" fg:w="5"/><text x="0.5939%" y="463.50"></text></g><g><title>`0x7FFFC642423B (5 samples, 0.06%)</title><rect x="0.3439%" y="437" width="0.0614%" height="15" fill="rgb(228,22,38)" fg:x="28" fg:w="5"/><text x="0.5939%" y="447.50"></text></g><g><title>`0x7FFFC6486225 (5 samples, 0.06%)</title><rect x="0.3439%" y="421" width="0.0614%" height="15" fill="rgb(235,168,5)" fg:x="28" fg:w="5"/><text x="0.5939%" y="431.50"></text></g><g><title>`0x7FFFC697DD0F (5 samples, 0.06%)</title><rect x="0.3439%" y="405" width="0.0614%" height="15" fill="rgb(221,155,16)" fg:x="28" fg:w="5"/><text x="0.5939%" y="415.50"></text></g><g><title>`0x7FFFC9294FB0 (5 samples, 0.06%)</title><rect x="0.3439%" y="389" width="0.0614%" height="15" fill="rgb(215,215,53)" fg:x="28" fg:w="5"/><text x="0.5939%" y="399.50"></text></g><g><title>`0x7FFFC92CA190 (5 samples, 0.06%)</title><rect x="0.3439%" y="373" width="0.0614%" height="15" fill="rgb(223,4,10)" fg:x="28" fg:w="5"/><text x="0.5939%" y="383.50"></text></g><g><title>`0x7FFFC92CA584 (1 samples, 0.01%)</title><rect x="0.3931%" y="357" width="0.0123%" height="15" fill="rgb(234,103,6)" fg:x="32" fg:w="1"/><text x="0.6431%" y="367.50"></text></g><g><title>`0x7FFFC9287883 (1 samples, 0.01%)</title><rect x="0.3931%" y="341" width="0.0123%" height="15" fill="rgb(227,97,0)" fg:x="32" fg:w="1"/><text x="0.6431%" y="351.50"></text></g><g><title>`0x7FFFC9288726 (1 samples, 0.01%)</title><rect x="0.3931%" y="325" width="0.0123%" height="15" fill="rgb(234,150,53)" fg:x="32" fg:w="1"/><text x="0.6431%" y="335.50"></text></g><g><title>`0x7FFFC92886FA (1 samples, 0.01%)</title><rect x="0.3931%" y="309" width="0.0123%" height="15" fill="rgb(228,201,54)" fg:x="32" fg:w="1"/><text x="0.6431%" y="319.50"></text></g><g><title>`0x7FFFC92F37AC (1 samples, 0.01%)</title><rect x="0.3931%" y="293" width="0.0123%" height="15" fill="rgb(222,22,37)" fg:x="32" fg:w="1"/><text x="0.6431%" y="303.50"></text></g><g><title>`0x7FFFC92F483E (1 samples, 0.01%)</title><rect x="0.3931%" y="277" width="0.0123%" height="15" fill="rgb(237,53,32)" fg:x="32" fg:w="1"/><text x="0.6431%" y="287.50"></text></g><g><title>`0x7FFFC93E0EDE (1 samples, 0.01%)</title><rect x="0.3931%" y="261" width="0.0123%" height="15" fill="rgb(233,25,53)" fg:x="32" fg:w="1"/><text x="0.6431%" y="271.50"></text></g><g><title>`0x7FFFC88D7A67 (1 samples, 0.01%)</title><rect x="0.3931%" y="245" width="0.0123%" height="15" fill="rgb(210,40,34)" fg:x="32" fg:w="1"/><text x="0.6431%" y="255.50"></text></g><g><title>`0x7FFFC88D7D7E (1 samples, 0.01%)</title><rect x="0.3931%" y="229" width="0.0123%" height="15" fill="rgb(241,220,44)" fg:x="32" fg:w="1"/><text x="0.6431%" y="239.50"></text></g><g><title>`0x7FFFC890ECCB (1 samples, 0.01%)</title><rect x="0.3931%" y="213" width="0.0123%" height="15" fill="rgb(235,28,35)" fg:x="32" fg:w="1"/><text x="0.6431%" y="223.50"></text></g><g><title>`0x7FFFC890E672 (1 samples, 0.01%)</title><rect x="0.3931%" y="197" width="0.0123%" height="15" fill="rgb(210,56,17)" fg:x="32" fg:w="1"/><text x="0.6431%" y="207.50"></text></g><g><title>`0x7FFFC88DB478 (1 samples, 0.01%)</title><rect x="0.3931%" y="181" width="0.0123%" height="15" fill="rgb(224,130,29)" fg:x="32" fg:w="1"/><text x="0.6431%" y="191.50"></text></g><g><title>`0x7FFFC64B008B (1 samples, 0.01%)</title><rect x="0.4054%" y="469" width="0.0123%" height="15" fill="rgb(235,212,8)" fg:x="33" fg:w="1"/><text x="0.6554%" y="479.50"></text></g><g><title>`0x7FFFC649746B (1 samples, 0.01%)</title><rect x="0.4054%" y="453" width="0.0123%" height="15" fill="rgb(223,33,50)" fg:x="33" fg:w="1"/><text x="0.6554%" y="463.50"></text></g><g><title>`0x7FFFC6980837 (1 samples, 0.01%)</title><rect x="0.4054%" y="437" width="0.0123%" height="15" fill="rgb(219,149,13)" fg:x="33" fg:w="1"/><text x="0.6554%" y="447.50"></text></g><g><title>`0x7FFFC92C9774 (1 samples, 0.01%)</title><rect x="0.4054%" y="421" width="0.0123%" height="15" fill="rgb(250,156,29)" fg:x="33" fg:w="1"/><text x="0.6554%" y="431.50"></text></g><g><title>`0x7FFFC92FB4D6 (1 samples, 0.01%)</title><rect x="0.4054%" y="405" width="0.0123%" height="15" fill="rgb(216,193,19)" fg:x="33" fg:w="1"/><text x="0.6554%" y="415.50"></text></g><g><title>`0x7FFFC92FB939 (1 samples, 0.01%)</title><rect x="0.4054%" y="389" width="0.0123%" height="15" fill="rgb(216,135,14)" fg:x="33" fg:w="1"/><text x="0.6554%" y="399.50"></text></g><g><title>`0x7FFFC93A4651 (1 samples, 0.01%)</title><rect x="0.4054%" y="373" width="0.0123%" height="15" fill="rgb(241,47,5)" fg:x="33" fg:w="1"/><text x="0.6554%" y="383.50"></text></g><g><title>`0x7FFFC93A46D8 (1 samples, 0.01%)</title><rect x="0.4054%" y="357" width="0.0123%" height="15" fill="rgb(233,42,35)" fg:x="33" fg:w="1"/><text x="0.6554%" y="367.50"></text></g><g><title>`0x7FFFC93AB10F (1 samples, 0.01%)</title><rect x="0.4054%" y="341" width="0.0123%" height="15" fill="rgb(231,13,6)" fg:x="33" fg:w="1"/><text x="0.6554%" y="351.50"></text></g><g><title>`0x7FFFC93ADF19 (1 samples, 0.01%)</title><rect x="0.4054%" y="325" width="0.0123%" height="15" fill="rgb(207,181,40)" fg:x="33" fg:w="1"/><text x="0.6554%" y="335.50"></text></g><g><title>`0x7FFFC934A8F6 (1 samples, 0.01%)</title><rect x="0.4054%" y="309" width="0.0123%" height="15" fill="rgb(254,173,49)" fg:x="33" fg:w="1"/><text x="0.6554%" y="319.50"></text></g><g><title>kaori.exe`kaori::program::build_cfg_ir(ref$&lt;slice2$ (1 samples, 0.01%)</title><rect x="0.4176%" y="277" width="0.0123%" height="15" fill="rgb(221,1,38)" fg:x="34" fg:w="1"/><text x="0.6676%" y="287.50"></text></g><g><title>kaori.exe`kaori::cfg_ir::cfg_builder::CfgBuilder::build_ir(ref$&lt;slice2$ (1 samples, 0.01%)</title><rect x="0.4176%" y="261" width="0.0123%" height="15" fill="rgb(206,124,46)" fg:x="34" fg:w="1"/><text x="0.6676%" y="271.50"></text></g><g><title>kaori.exe`kaori::cfg_ir::cfg_builder::CfgBuilder::visit_declaration (1 samples, 0.01%)</title><rect x="0.4176%" y="245" width="0.0123%" height="15" fill="rgb(249,21,11)" fg:x="34" fg:w="1"/><text x="0.6676%" y="255.50"></text></g><g><title>kaori.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;enum2$ (1 samples, 0.01%)</title><rect x="0.4176%" y="229" width="0.0123%" height="15" fill="rgb(222,201,40)" fg:x="34" fg:w="1"/><text x="0.6676%" y="239.50"></text></g><g><title>kaori.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;enum2$&lt;kaori::semantic::hir_node::HirNode&gt; &gt;*, core::ptr::non_null::NonNull&lt;enum2$ (1 samples, 0.01%)</title><rect x="0.4176%" y="213" width="0.0123%" height="15" fill="rgb(235,61,29)" fg:x="34" fg:w="1"/><text x="0.6676%" y="223.50"></text></g><g><title>kaori.exe`kaori::cfg_ir::cfg_builder::CfgBuilder::visit_statement (1 samples, 0.01%)</title><rect x="0.4176%" y="197" width="0.0123%" height="15" fill="rgb(219,207,3)" fg:x="34" fg:w="1"/><text x="0.6676%" y="207.50"></text></g><g><title>kaori.exe`kaori::cfg_ir::cfg_builder::CfgBuilder::visit_statement (1 samples, 0.01%)</title><rect x="0.4176%" y="181" width="0.0123%" height="15" fill="rgb(222,56,46)" fg:x="34" fg:w="1"/><text x="0.6676%" y="191.50"></text></g><g><title>kaori.exe`kaori::cfg_ir::cfg_builder::CfgBuilder::visit_nodes(ref$&lt;slice2$&lt;enum2$ (1 samples, 0.01%)</title><rect x="0.4176%" y="165" width="0.0123%" height="15" fill="rgb(239,76,54)" fg:x="34" fg:w="1"/><text x="0.6676%" y="175.50"></text></g><g><title>kaori.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;enum2$ (1 samples, 0.01%)</title><rect x="0.4176%" y="149" width="0.0123%" height="15" fill="rgb(231,124,27)" fg:x="34" fg:w="1"/><text x="0.6676%" y="159.50"></text></g><g><title>kaori.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;enum2$&lt;kaori::semantic::hir_node::HirNode&gt; &gt;*, core::ptr::non_null::NonNull&lt;enum2$ (1 samples, 0.01%)</title><rect x="0.4176%" y="133" width="0.0123%" height="15" fill="rgb(249,195,6)" fg:x="34" fg:w="1"/><text x="0.6676%" y="143.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (2 samples, 0.02%)</title><rect x="0.4176%" y="309" width="0.0246%" height="15" fill="rgb(237,174,47)" fg:x="34" fg:w="2"/><text x="0.6676%" y="319.50"></text></g><g><title>kaori.exe`kaori::program::compile_source_code (2 samples, 0.02%)</title><rect x="0.4176%" y="293" width="0.0246%" height="15" fill="rgb(206,201,31)" fg:x="34" fg:w="2"/><text x="0.6676%" y="303.50"></text></g><g><title>kaori.exe`kaori::program::run_syntax_analysis (1 samples, 0.01%)</title><rect x="0.4299%" y="277" width="0.0123%" height="15" fill="rgb(231,57,52)" fg:x="35" fg:w="1"/><text x="0.6799%" y="287.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;alloc::vec::Vec (1 samples, 0.01%)</title><rect x="0.4299%" y="261" width="0.0123%" height="15" fill="rgb(248,177,22)" fg:x="35" fg:w="1"/><text x="0.6799%" y="271.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse (1 samples, 0.01%)</title><rect x="0.4299%" y="245" width="0.0123%" height="15" fill="rgb(215,211,37)" fg:x="35" fg:w="1"/><text x="0.6799%" y="255.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;enum2$&lt;core::option::Option (1 samples, 0.01%)</title><rect x="0.4299%" y="229" width="0.0123%" height="15" fill="rgb(241,128,51)" fg:x="35" fg:w="1"/><text x="0.6799%" y="239.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_declaration (1 samples, 0.01%)</title><rect x="0.4299%" y="213" width="0.0123%" height="15" fill="rgb(227,165,31)" fg:x="35" fg:w="1"/><text x="0.6799%" y="223.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_function_declaration (1 samples, 0.01%)</title><rect x="0.4299%" y="197" width="0.0123%" height="15" fill="rgb(228,167,24)" fg:x="35" fg:w="1"/><text x="0.6799%" y="207.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_ast_node (1 samples, 0.01%)</title><rect x="0.4299%" y="181" width="0.0123%" height="15" fill="rgb(228,143,12)" fg:x="35" fg:w="1"/><text x="0.6799%" y="191.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.01%)</title><rect x="0.4299%" y="165" width="0.0123%" height="15" fill="rgb(249,149,8)" fg:x="35" fg:w="1"/><text x="0.6799%" y="175.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_statement (1 samples, 0.01%)</title><rect x="0.4299%" y="149" width="0.0123%" height="15" fill="rgb(243,35,44)" fg:x="35" fg:w="1"/><text x="0.6799%" y="159.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.01%)</title><rect x="0.4299%" y="133" width="0.0123%" height="15" fill="rgb(246,89,9)" fg:x="35" fg:w="1"/><text x="0.6799%" y="143.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_for_loop_statement (1 samples, 0.01%)</title><rect x="0.4299%" y="117" width="0.0123%" height="15" fill="rgb(233,213,13)" fg:x="35" fg:w="1"/><text x="0.6799%" y="127.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.01%)</title><rect x="0.4299%" y="101" width="0.0123%" height="15" fill="rgb(233,141,41)" fg:x="35" fg:w="1"/><text x="0.6799%" y="111.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_block_statement (1 samples, 0.01%)</title><rect x="0.4299%" y="85" width="0.0123%" height="15" fill="rgb(239,167,4)" fg:x="35" fg:w="1"/><text x="0.6799%" y="95.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::interpreter::Interpreter::get_value (77 samples, 0.95%)</title><rect x="24.0879%" y="277" width="0.9458%" height="15" fill="rgb(209,217,16)" fg:x="1961" fg:w="77"/><text x="24.3379%" y="287.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;enum2$&lt;kaori::bytecode::value::Value&gt;,alloc::alloc::Global&gt;::as_slice (2 samples, 0.02%)</title><rect x="31.9003%" y="213" width="0.0246%" height="15" fill="rgb(219,88,35)" fg:x="2597" fg:w="2"/><text x="32.1503%" y="223.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;enum2$ (99 samples, 1.22%)</title><rect x="31.9003%" y="229" width="1.2161%" height="15" fill="rgb(220,193,23)" fg:x="2597" fg:w="99"/><text x="32.1503%" y="239.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;enum2$ (97 samples, 1.19%)</title><rect x="31.9248%" y="213" width="1.1915%" height="15" fill="rgb(230,90,52)" fg:x="2599" fg:w="97"/><text x="32.1748%" y="223.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::interpreter::Interpreter::get_value (231 samples, 2.84%)</title><rect x="30.3034%" y="261" width="2.8375%" height="15" fill="rgb(252,106,19)" fg:x="2467" fg:w="231"/><text x="30.5534%" y="271.50">ka..</text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;enum2$ (101 samples, 1.24%)</title><rect x="31.9003%" y="245" width="1.2406%" height="15" fill="rgb(206,74,20)" fg:x="2597" fg:w="101"/><text x="32.1503%" y="255.50"></text></g><g><title>kaori.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;enum2$ (2 samples, 0.02%)</title><rect x="33.1163%" y="229" width="0.0246%" height="15" fill="rgb(230,138,44)" fg:x="2696" fg:w="2"/><text x="33.3663%" y="239.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;enum2$ (2 samples, 0.02%)</title><rect x="33.1163%" y="213" width="0.0246%" height="15" fill="rgb(235,182,43)" fg:x="2696" fg:w="2"/><text x="33.3663%" y="223.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::interpreter::Interpreter::op_add (857 samples, 10.53%)</title><rect x="25.0338%" y="277" width="10.5270%" height="15" fill="rgb(242,16,51)" fg:x="2038" fg:w="857"/><text x="25.2838%" y="287.50">kaori.exe`kaori..</text></g><g><title>kaori.exe`kaori::virtual_machine::interpreter::Interpreter::set_value(kaori::cfg_ir::operand::Register, enum2$ (197 samples, 2.42%)</title><rect x="33.1409%" y="261" width="2.4199%" height="15" fill="rgb(248,9,4)" fg:x="2698" fg:w="197"/><text x="33.3909%" y="271.50">ka..</text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec&lt;enum2$ (126 samples, 1.55%)</title><rect x="34.0130%" y="245" width="1.5477%" height="15" fill="rgb(210,31,22)" fg:x="2769" fg:w="126"/><text x="34.2630%" y="255.50"></text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$&lt;enum2$ (126 samples, 1.55%)</title><rect x="34.0130%" y="229" width="1.5477%" height="15" fill="rgb(239,54,39)" fg:x="2769" fg:w="126"/><text x="34.2630%" y="239.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$&lt;enum2$ (126 samples, 1.55%)</title><rect x="34.0130%" y="213" width="1.5477%" height="15" fill="rgb(230,99,41)" fg:x="2769" fg:w="126"/><text x="34.2630%" y="223.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;enum2$ (26 samples, 0.32%)</title><rect x="44.4171%" y="229" width="0.3194%" height="15" fill="rgb(253,106,12)" fg:x="3616" fg:w="26"/><text x="44.6671%" y="239.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;enum2$ (26 samples, 0.32%)</title><rect x="44.4171%" y="213" width="0.3194%" height="15" fill="rgb(213,46,41)" fg:x="3616" fg:w="26"/><text x="44.6671%" y="223.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::interpreter::Interpreter::get_value (146 samples, 1.79%)</title><rect x="42.9800%" y="261" width="1.7934%" height="15" fill="rgb(215,133,35)" fg:x="3499" fg:w="146"/><text x="43.2300%" y="271.50">k..</text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;enum2$ (29 samples, 0.36%)</title><rect x="44.4171%" y="245" width="0.3562%" height="15" fill="rgb(213,28,5)" fg:x="3616" fg:w="29"/><text x="44.6671%" y="255.50"></text></g><g><title>kaori.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;enum2$ (3 samples, 0.04%)</title><rect x="44.7365%" y="229" width="0.0369%" height="15" fill="rgb(215,77,49)" fg:x="3642" fg:w="3"/><text x="44.9865%" y="239.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;enum2$ (3 samples, 0.04%)</title><rect x="44.7365%" y="213" width="0.0369%" height="15" fill="rgb(248,100,22)" fg:x="3642" fg:w="3"/><text x="44.9865%" y="223.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::interpreter::Interpreter::op_less (919 samples, 11.29%)</title><rect x="35.5607%" y="277" width="11.2885%" height="15" fill="rgb(208,67,9)" fg:x="2895" fg:w="919"/><text x="35.8107%" y="287.50">kaori.exe`kaori::..</text></g><g><title>kaori.exe`kaori::virtual_machine::interpreter::Interpreter::set_value(kaori::cfg_ir::operand::Register, enum2$ (169 samples, 2.08%)</title><rect x="44.7734%" y="261" width="2.0759%" height="15" fill="rgb(219,133,21)" fg:x="3645" fg:w="169"/><text x="45.0234%" y="271.50">k..</text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec&lt;enum2$ (2 samples, 0.02%)</title><rect x="46.8247%" y="245" width="0.0246%" height="15" fill="rgb(246,46,29)" fg:x="3812" fg:w="2"/><text x="47.0747%" y="255.50"></text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$&lt;enum2$ (2 samples, 0.02%)</title><rect x="46.8247%" y="229" width="0.0246%" height="15" fill="rgb(246,185,52)" fg:x="3812" fg:w="2"/><text x="47.0747%" y="239.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$&lt;enum2$ (2 samples, 0.02%)</title><rect x="46.8247%" y="213" width="0.0246%" height="15" fill="rgb(252,136,11)" fg:x="3812" fg:w="2"/><text x="47.0747%" y="223.50"></text></g><g><title>kaori.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;enum2$ (64 samples, 0.79%)</title><rect x="98.7962%" y="261" width="0.7861%" height="15" fill="rgb(219,138,53)" fg:x="8043" fg:w="64"/><text x="99.0462%" y="271.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::get_unchecked(unsigned long long, ptr_const$&lt;slice2$&lt;enum2$ (64 samples, 0.79%)</title><rect x="98.7962%" y="245" width="0.7861%" height="15" fill="rgb(211,51,23)" fg:x="8043" fg:w="64"/><text x="99.0462%" y="255.50"></text></g><g><title>kaori.exe`core::slice::index::get_noubcheck(ptr_const$&lt;slice2$&lt;enum2$ (64 samples, 0.79%)</title><rect x="98.7962%" y="229" width="0.7861%" height="15" fill="rgb(247,221,28)" fg:x="8043" fg:w="64"/><text x="99.0462%" y="239.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;tuple$ (8,103 samples, 99.53%)</title><rect x="0.4422%" y="309" width="99.5332%" height="15" fill="rgb(251,222,45)" fg:x="36" fg:w="8103"/><text x="0.6922%" y="319.50">kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;tuple$</text></g><g><title>kaori.exe`kaori::virtual_machine::interpreter::Interpreter::execute_instructions (8,103 samples, 99.53%)</title><rect x="0.4422%" y="293" width="99.5332%" height="15" fill="rgb(217,162,53)" fg:x="36" fg:w="8103"/><text x="0.6922%" y="303.50">kaori.exe`kaori::virtual_machine::interpreter::Interpreter::execute_instructions</text></g><g><title>kaori.exe`kaori::virtual_machine::interpreter::Interpreter::op_move (4,325 samples, 53.13%)</title><rect x="46.8493%" y="277" width="53.1262%" height="15" fill="rgb(229,93,14)" fg:x="3814" fg:w="4325"/><text x="47.0993%" y="287.50">kaori.exe`kaori::virtual_machine::interpreter::Interpreter::op_move</text></g><g><title>kaori.exe`core::slice::impl$0::get_unchecked_mut(ref_mut$&lt;slice2$&lt;enum2$ (32 samples, 0.39%)</title><rect x="99.5824%" y="261" width="0.3931%" height="15" fill="rgb(209,67,49)" fg:x="8107" fg:w="32"/><text x="99.8324%" y="271.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::get_unchecked_mut(unsigned long long, ptr_mut$&lt;slice2$&lt;enum2$ (32 samples, 0.39%)</title><rect x="99.5824%" y="245" width="0.3931%" height="15" fill="rgb(213,87,29)" fg:x="8107" fg:w="32"/><text x="99.8324%" y="255.50"></text></g><g><title>kaori.exe`core::slice::index::get_mut_noubcheck(ptr_mut$&lt;slice2$&lt;enum2$ (32 samples, 0.39%)</title><rect x="99.5824%" y="229" width="0.3931%" height="15" fill="rgb(205,151,52)" fg:x="8107" fg:w="32"/><text x="99.8324%" y="239.50"></text></g><g><title>kaori.exe`kaori::program::run_program (8,106 samples, 99.57%)</title><rect x="0.4176%" y="325" width="99.5701%" height="15" fill="rgb(253,215,39)" fg:x="34" fg:w="8106"/><text x="0.6676%" y="335.50">kaori.exe`kaori::program::run_program</text></g><g><title>kaori.exe`std::io::stdio::_print (1 samples, 0.01%)</title><rect x="99.9754%" y="309" width="0.0123%" height="15" fill="rgb(221,220,41)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="319.50"></text></g><g><title>kaori.exe`std::io::stdio::print_to (1 samples, 0.01%)</title><rect x="99.9754%" y="293" width="0.0123%" height="15" fill="rgb(218,133,21)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="303.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$16::write_fmt (1 samples, 0.01%)</title><rect x="99.9754%" y="277" width="0.0123%" height="15" fill="rgb(221,193,43)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="287.50"></text></g><g><title>kaori.exe`std::io::Write::write_fmt (1 samples, 0.01%)</title><rect x="99.9754%" y="261" width="0.0123%" height="15" fill="rgb(240,128,52)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="271.50"></text></g><g><title>kaori.exe`std::io::default_write_fmt (1 samples, 0.01%)</title><rect x="99.9754%" y="245" width="0.0123%" height="15" fill="rgb(253,114,12)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="255.50"></text></g><g><title>kaori.exe`core::fmt::write (1 samples, 0.01%)</title><rect x="99.9754%" y="229" width="0.0123%" height="15" fill="rgb(215,223,47)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="239.50"></text></g><g><title>kaori.exe`std::io::default_write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (1 samples, 0.01%)</title><rect x="99.9754%" y="213" width="0.0123%" height="15" fill="rgb(248,225,23)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="223.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$19::write_all (1 samples, 0.01%)</title><rect x="99.9754%" y="197" width="0.0123%" height="15" fill="rgb(250,108,0)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="207.50"></text></g><g><title>kaori.exe`std::sync::reentrant_lock::impl$11::deref (1 samples, 0.01%)</title><rect x="99.9754%" y="181" width="0.0123%" height="15" fill="rgb(228,208,7)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="191.50"></text></g><g><title>kaori.exe`std::io::buffered::linewritershim::impl$1::write_all (1 samples, 0.01%)</title><rect x="99.9754%" y="165" width="0.0123%" height="15" fill="rgb(244,45,10)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="175.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch (1 samples, 0.01%)</title><rect x="99.9754%" y="149" width="0.0123%" height="15" fill="rgb(207,125,25)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="159.50"></text></g><g><title>kaori.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (1 samples, 0.01%)</title><rect x="99.9754%" y="133" width="0.0123%" height="15" fill="rgb(210,195,18)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="143.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$1::write (1 samples, 0.01%)</title><rect x="99.9754%" y="117" width="0.0123%" height="15" fill="rgb(249,80,12)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="127.50"></text></g><g><title>kaori.exe`std::io::stdio::handle_ebadf (1 samples, 0.01%)</title><rect x="99.9754%" y="101" width="0.0123%" height="15" fill="rgb(221,65,9)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="111.50"></text></g><g><title>kaori.exe`std::sys::stdio::windows::write (1 samples, 0.01%)</title><rect x="99.9754%" y="85" width="0.0123%" height="15" fill="rgb(235,49,36)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="95.50"></text></g><g><title>kaori.exe`std::sys::stdio::windows::is_utf8_console (1 samples, 0.01%)</title><rect x="99.9754%" y="69" width="0.0123%" height="15" fill="rgb(225,32,20)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="79.50"></text></g><g><title>`0x7FFFC6A1E425 (1 samples, 0.01%)</title><rect x="99.9754%" y="53" width="0.0123%" height="15" fill="rgb(215,141,46)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="63.50"></text></g><g><title>`0x7FFFC93E3314 (1 samples, 0.01%)</title><rect x="99.9754%" y="37" width="0.0123%" height="15" fill="rgb(250,160,47)" fg:x="8139" fg:w="1"/><text x="100.2254%" y="47.50"></text></g><g><title>all (8,141 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="8141"/><text x="0.2500%" y="543.50"></text></g><g><title>`0x7FFFC9288D9C (8,120 samples, 99.74%)</title><rect x="0.2580%" y="517" width="99.7420%" height="15" fill="rgb(234,217,39)" fg:x="21" fg:w="8120"/><text x="0.5080%" y="527.50">`0x7FFFC9288D9C</text></g><g><title>`0x7FFFC873E8D7 (8,120 samples, 99.74%)</title><rect x="0.2580%" y="501" width="99.7420%" height="15" fill="rgb(207,178,40)" fg:x="21" fg:w="8120"/><text x="0.5080%" y="511.50">`0x7FFFC873E8D7</text></g><g><title>kaori.exe`__scrt_common_main_seh() (8,114 samples, 99.67%)</title><rect x="0.3317%" y="485" width="99.6683%" height="15" fill="rgb(221,136,13)" fg:x="27" fg:w="8114"/><text x="0.5817%" y="495.50">kaori.exe`__scrt_common_main_seh()</text></g><g><title>kaori.exe`invoke_main() (8,107 samples, 99.58%)</title><rect x="0.4176%" y="469" width="99.5824%" height="15" fill="rgb(249,199,10)" fg:x="34" fg:w="8107"/><text x="0.6676%" y="479.50">kaori.exe`invoke_main()</text></g><g><title>kaori.exe`main (8,107 samples, 99.58%)</title><rect x="0.4176%" y="453" width="99.5824%" height="15" fill="rgb(249,222,13)" fg:x="34" fg:w="8107"/><text x="0.6676%" y="463.50">kaori.exe`main</text></g><g><title>kaori.exe`std::rt::lang_start_internal (8,107 samples, 99.58%)</title><rect x="0.4176%" y="437" width="99.5824%" height="15" fill="rgb(244,185,38)" fg:x="34" fg:w="8107"/><text x="0.6676%" y="447.50">kaori.exe`std::rt::lang_start_internal</text></g><g><title>kaori.exe`std::panic::catch_unwind (8,107 samples, 99.58%)</title><rect x="0.4176%" y="421" width="99.5824%" height="15" fill="rgb(236,202,9)" fg:x="34" fg:w="8107"/><text x="0.6676%" y="431.50">kaori.exe`std::panic::catch_unwind</text></g><g><title>kaori.exe`std::panicking::try (8,107 samples, 99.58%)</title><rect x="0.4176%" y="405" width="99.5824%" height="15" fill="rgb(250,229,37)" fg:x="34" fg:w="8107"/><text x="0.6676%" y="415.50">kaori.exe`std::panicking::try</text></g><g><title>kaori.exe`std::panicking::try::do_call (8,107 samples, 99.58%)</title><rect x="0.4176%" y="389" width="99.5824%" height="15" fill="rgb(206,174,23)" fg:x="34" fg:w="8107"/><text x="0.6676%" y="399.50">kaori.exe`std::panicking::try::do_call</text></g><g><title>kaori.exe`std::rt::lang_start_internal::closure$0 (8,107 samples, 99.58%)</title><rect x="0.4176%" y="373" width="99.5824%" height="15" fill="rgb(211,33,43)" fg:x="34" fg:w="8107"/><text x="0.6676%" y="383.50">kaori.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;std::process::ExitCode (*)(),std::process::ExitCode&gt;(std::process::ExitCode (*) (8,107 samples, 99.58%)</title><rect x="0.4176%" y="357" width="99.5824%" height="15" fill="rgb(245,58,50)" fg:x="34" fg:w="8107"/><text x="0.6676%" y="367.50">kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;std::process::ExitCode (*)(),std::process::ExitCode&gt;(std::process::ExitCode (*)</text></g><g><title>kaori.exe`kaori::main (8,107 samples, 99.58%)</title><rect x="0.4176%" y="341" width="99.5824%" height="15" fill="rgb(244,68,36)" fg:x="34" fg:w="8107"/><text x="0.6676%" y="351.50">kaori.exe`kaori::main</text></g><g><title>kaori.exe`std::fs::read_to_string (1 samples, 0.01%)</title><rect x="99.9877%" y="325" width="0.0123%" height="15" fill="rgb(232,229,15)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="335.50"></text></g><g><title>kaori.exe`core::ptr::drop_in_place (1 samples, 0.01%)</title><rect x="99.9877%" y="309" width="0.0123%" height="15" fill="rgb(254,30,23)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="319.50"></text></g><g><title>kaori.exe`core::ptr::drop_in_place(alloc::vec::Vec (1 samples, 0.01%)</title><rect x="99.9877%" y="293" width="0.0123%" height="15" fill="rgb(235,160,14)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="303.50"></text></g><g><title>kaori.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (1 samples, 0.01%)</title><rect x="99.9877%" y="277" width="0.0123%" height="15" fill="rgb(212,155,44)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="287.50"></text></g><g><title>kaori.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (1 samples, 0.01%)</title><rect x="99.9877%" y="261" width="0.0123%" height="15" fill="rgb(226,2,50)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="271.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1 samples, 0.01%)</title><rect x="99.9877%" y="245" width="0.0123%" height="15" fill="rgb(234,177,6)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="255.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (1 samples, 0.01%)</title><rect x="99.9877%" y="229" width="0.0123%" height="15" fill="rgb(217,24,9)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="239.50"></text></g><g><title>kaori.exe`std::fs::read_to_string::inner (1 samples, 0.01%)</title><rect x="99.9877%" y="213" width="0.0123%" height="15" fill="rgb(220,13,46)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="223.50"></text></g><g><title>kaori.exe`std::io::default_read_to_string (1 samples, 0.01%)</title><rect x="99.9877%" y="197" width="0.0123%" height="15" fill="rgb(239,221,27)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="207.50"></text></g><g><title>kaori.exe`std::io::append_to_string (1 samples, 0.01%)</title><rect x="99.9877%" y="181" width="0.0123%" height="15" fill="rgb(222,198,25)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="191.50"></text></g><g><title>kaori.exe`std::io::default_read_to_end&lt;std::fs::File&gt; (1 samples, 0.01%)</title><rect x="99.9877%" y="165" width="0.0123%" height="15" fill="rgb(211,99,13)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="175.50"></text></g><g><title>kaori.exe`std::fs::impl$11::read_buf (1 samples, 0.01%)</title><rect x="99.9877%" y="149" width="0.0123%" height="15" fill="rgb(232,111,31)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="159.50"></text></g><g><title>kaori.exe`std::fs::impl$8::read_buf (1 samples, 0.01%)</title><rect x="99.9877%" y="133" width="0.0123%" height="15" fill="rgb(245,82,37)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="143.50"></text></g><g><title>kaori.exe`std::sys::fs::windows::File::read_buf (1 samples, 0.01%)</title><rect x="99.9877%" y="117" width="0.0123%" height="15" fill="rgb(227,149,46)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="127.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::handle::Handle::read_buf (1 samples, 0.01%)</title><rect x="99.9877%" y="101" width="0.0123%" height="15" fill="rgb(218,36,50)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="111.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::handle::Handle::synchronous_read (1 samples, 0.01%)</title><rect x="99.9877%" y="85" width="0.0123%" height="15" fill="rgb(226,80,48)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="95.50"></text></g><g><title>`0x7FFFC93E32F4 (1 samples, 0.01%)</title><rect x="99.9877%" y="69" width="0.0123%" height="15" fill="rgb(238,224,15)" fg:x="8140" fg:w="1"/><text x="100.2377%" y="79.50"></text></g></svg></svg>