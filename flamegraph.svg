<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="6247"><g><title>`0x7FFC03192BC1 (1 samples, 0.02%)</title><rect x="0.0000%" y="709" width="0.0160%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>`0x7FFC0316FCB6 (1 samples, 0.02%)</title><rect x="0.0000%" y="693" width="0.0160%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>`0x7FFC0317035C (1 samples, 0.02%)</title><rect x="0.0000%" y="677" width="0.0160%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>`0x7FFC03223474 (1 samples, 0.02%)</title><rect x="0.0000%" y="661" width="0.0160%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>`0x7FFC0319337F (1 samples, 0.02%)</title><rect x="0.0160%" y="709" width="0.0160%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2660%" y="719.50"></text></g><g><title>`0x7FFC031DC12B (1 samples, 0.02%)</title><rect x="0.0160%" y="693" width="0.0160%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2660%" y="703.50"></text></g><g><title>`0x7FFC030C7508 (1 samples, 0.02%)</title><rect x="0.0160%" y="677" width="0.0160%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2660%" y="687.50"></text></g><g><title>`0x7FFC03193578 (1 samples, 0.02%)</title><rect x="0.0320%" y="709" width="0.0160%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.2820%" y="719.50"></text></g><g><title>`0x7FFC030C2CD3 (1 samples, 0.02%)</title><rect x="0.0320%" y="693" width="0.0160%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.2820%" y="703.50"></text></g><g><title>`0x7FFC030C49AA (1 samples, 0.02%)</title><rect x="0.0320%" y="677" width="0.0160%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.2820%" y="687.50"></text></g><g><title>`0x7FFC031B90B5 (1 samples, 0.02%)</title><rect x="0.0320%" y="661" width="0.0160%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.2820%" y="671.50"></text></g><g><title>`0x7FFC031B9148 (1 samples, 0.02%)</title><rect x="0.0320%" y="645" width="0.0160%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.2820%" y="655.50"></text></g><g><title>`0x7FFC030FCD9F (1 samples, 0.02%)</title><rect x="0.0320%" y="629" width="0.0160%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.2820%" y="639.50"></text></g><g><title>`0x7FFC03224C64 (1 samples, 0.02%)</title><rect x="0.0320%" y="613" width="0.0160%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.2820%" y="623.50"></text></g><g><title>`0x7FFC031941D7 (1 samples, 0.02%)</title><rect x="0.0480%" y="709" width="0.0160%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.2980%" y="719.50"></text></g><g><title>`0x7FFC031BB821 (1 samples, 0.02%)</title><rect x="0.0480%" y="693" width="0.0160%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.2980%" y="703.50"></text></g><g><title>`0x7FFC032235B4 (1 samples, 0.02%)</title><rect x="0.0480%" y="677" width="0.0160%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.2980%" y="687.50"></text></g><g><title>`0x7FFC0310BA85 (1 samples, 0.02%)</title><rect x="0.0640%" y="581" width="0.0160%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.3140%" y="591.50"></text></g><g><title>`0x7FFC0310BFAF (1 samples, 0.02%)</title><rect x="0.0640%" y="565" width="0.0160%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="0.3140%" y="575.50"></text></g><g><title>`0x7FFC0310BABE (1 samples, 0.02%)</title><rect x="0.0800%" y="581" width="0.0160%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="0.3300%" y="591.50"></text></g><g><title>`0x7FFC0310CD38 (1 samples, 0.02%)</title><rect x="0.0800%" y="565" width="0.0160%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="0.3300%" y="575.50"></text></g><g><title>`0x7FFC0310A4F2 (3 samples, 0.05%)</title><rect x="0.0640%" y="645" width="0.0480%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="3"/><text x="0.3140%" y="655.50"></text></g><g><title>`0x7FFC0310EF05 (3 samples, 0.05%)</title><rect x="0.0640%" y="629" width="0.0480%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="3"/><text x="0.3140%" y="639.50"></text></g><g><title>`0x7FFC0312D001 (3 samples, 0.05%)</title><rect x="0.0640%" y="613" width="0.0480%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="3"/><text x="0.3140%" y="623.50"></text></g><g><title>`0x7FFC0312D5A8 (3 samples, 0.05%)</title><rect x="0.0640%" y="597" width="0.0480%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="3"/><text x="0.3140%" y="607.50"></text></g><g><title>`0x7FFC0310BC32 (1 samples, 0.02%)</title><rect x="0.0960%" y="581" width="0.0160%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.3460%" y="591.50"></text></g><g><title>`0x7FFC030D2FB0 (1 samples, 0.02%)</title><rect x="0.0960%" y="565" width="0.0160%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="0.3460%" y="575.50"></text></g><g><title>`0x7FFC0310A51A (1 samples, 0.02%)</title><rect x="0.1121%" y="645" width="0.0160%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="0.3621%" y="655.50"></text></g><g><title>`0x7FFC0312FC27 (1 samples, 0.02%)</title><rect x="0.1121%" y="629" width="0.0160%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="1"/><text x="0.3621%" y="639.50"></text></g><g><title>`0x7FFC0312FDA1 (1 samples, 0.02%)</title><rect x="0.1121%" y="613" width="0.0160%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="1"/><text x="0.3621%" y="623.50"></text></g><g><title>`0x7FFC030D2C27 (1 samples, 0.02%)</title><rect x="0.1121%" y="597" width="0.0160%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="0.3621%" y="607.50"></text></g><g><title>`0x7FFC009E46E2 (1 samples, 0.02%)</title><rect x="0.1281%" y="517" width="0.0160%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="1"/><text x="0.3781%" y="527.50"></text></g><g><title>`0x7FFC009E2B78 (1 samples, 0.02%)</title><rect x="0.1281%" y="501" width="0.0160%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="0.3781%" y="511.50"></text></g><g><title>`0x7FFC03105613 (1 samples, 0.02%)</title><rect x="0.1281%" y="485" width="0.0160%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="1"/><text x="0.3781%" y="495.50"></text></g><g><title>`0x7FFC031057A1 (1 samples, 0.02%)</title><rect x="0.1281%" y="469" width="0.0160%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="1"/><text x="0.3781%" y="479.50"></text></g><g><title>`0x7FFC03105482 (1 samples, 0.02%)</title><rect x="0.1281%" y="453" width="0.0160%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="1"/><text x="0.3781%" y="463.50"></text></g><g><title>`0x7FFC03226CE4 (1 samples, 0.02%)</title><rect x="0.1281%" y="437" width="0.0160%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="1"/><text x="0.3781%" y="447.50"></text></g><g><title>`0x7FFC00AB3FFD (2 samples, 0.03%)</title><rect x="0.1281%" y="533" width="0.0320%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="2"/><text x="0.3781%" y="543.50"></text></g><g><title>`0x7FFC009E4A63 (1 samples, 0.02%)</title><rect x="0.1441%" y="517" width="0.0160%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="0.3941%" y="527.50"></text></g><g><title>`0x7FFC009E3678 (1 samples, 0.02%)</title><rect x="0.1441%" y="501" width="0.0160%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="0.3941%" y="511.50"></text></g><g><title>`0x7FFC009E3540 (1 samples, 0.02%)</title><rect x="0.1441%" y="485" width="0.0160%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="0.3941%" y="495.50"></text></g><g><title>`0x7FFC009E2E8B (1 samples, 0.02%)</title><rect x="0.1441%" y="469" width="0.0160%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="1"/><text x="0.3941%" y="479.50"></text></g><g><title>`0x7FFC009ED235 (1 samples, 0.02%)</title><rect x="0.1441%" y="453" width="0.0160%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="1"/><text x="0.3941%" y="463.50"></text></g><g><title>`0x7FFC00B690D0 (1 samples, 0.02%)</title><rect x="0.1441%" y="437" width="0.0160%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="1"/><text x="0.3941%" y="447.50"></text></g><g><title>`0x7FFC0318B934 (7 samples, 0.11%)</title><rect x="0.0640%" y="693" width="0.1121%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="7"/><text x="0.3140%" y="703.50"></text></g><g><title>`0x7FFC030D4FB0 (7 samples, 0.11%)</title><rect x="0.0640%" y="677" width="0.1121%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="7"/><text x="0.3140%" y="687.50"></text></g><g><title>`0x7FFC0310A190 (7 samples, 0.11%)</title><rect x="0.0640%" y="661" width="0.1121%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="7"/><text x="0.3140%" y="671.50"></text></g><g><title>`0x7FFC0310A584 (3 samples, 0.05%)</title><rect x="0.1281%" y="645" width="0.0480%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="3"/><text x="0.3781%" y="655.50"></text></g><g><title>`0x7FFC030C7883 (3 samples, 0.05%)</title><rect x="0.1281%" y="629" width="0.0480%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="3"/><text x="0.3781%" y="639.50"></text></g><g><title>`0x7FFC030C8726 (3 samples, 0.05%)</title><rect x="0.1281%" y="613" width="0.0480%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="3"/><text x="0.3781%" y="623.50"></text></g><g><title>`0x7FFC030C86FA (3 samples, 0.05%)</title><rect x="0.1281%" y="597" width="0.0480%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="3"/><text x="0.3781%" y="607.50"></text></g><g><title>`0x7FFC031337AC (3 samples, 0.05%)</title><rect x="0.1281%" y="581" width="0.0480%" height="15" fill="rgb(250,213,24)" fg:x="8" fg:w="3"/><text x="0.3781%" y="591.50"></text></g><g><title>`0x7FFC0313483E (3 samples, 0.05%)</title><rect x="0.1281%" y="565" width="0.0480%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="3"/><text x="0.3781%" y="575.50"></text></g><g><title>`0x7FFC03220EDE (3 samples, 0.05%)</title><rect x="0.1281%" y="549" width="0.0480%" height="15" fill="rgb(231,138,38)" fg:x="8" fg:w="3"/><text x="0.3781%" y="559.50"></text></g><g><title>`0x7FFC00AB40AF (1 samples, 0.02%)</title><rect x="0.1601%" y="533" width="0.0160%" height="15" fill="rgb(231,145,46)" fg:x="10" fg:w="1"/><text x="0.4101%" y="543.50"></text></g><g><title>`0x7FFC00A5E87D (1 samples, 0.02%)</title><rect x="0.1601%" y="517" width="0.0160%" height="15" fill="rgb(251,118,11)" fg:x="10" fg:w="1"/><text x="0.4101%" y="527.50"></text></g><g><title>`0x7FFC00A5F080 (1 samples, 0.02%)</title><rect x="0.1601%" y="501" width="0.0160%" height="15" fill="rgb(217,147,25)" fg:x="10" fg:w="1"/><text x="0.4101%" y="511.50"></text></g><g><title>`0x7FFC031A9B7C (1 samples, 0.02%)</title><rect x="0.1601%" y="485" width="0.0160%" height="15" fill="rgb(247,81,37)" fg:x="10" fg:w="1"/><text x="0.4101%" y="495.50"></text></g><g><title>`0x7FFC031A9CB2 (1 samples, 0.02%)</title><rect x="0.1601%" y="469" width="0.0160%" height="15" fill="rgb(209,12,38)" fg:x="10" fg:w="1"/><text x="0.4101%" y="479.50"></text></g><g><title>`0x7FFC03226CE4 (1 samples, 0.02%)</title><rect x="0.1601%" y="453" width="0.0160%" height="15" fill="rgb(227,1,9)" fg:x="10" fg:w="1"/><text x="0.4101%" y="463.50"></text></g><g><title>`0x7FFC0318B9A9 (1 samples, 0.02%)</title><rect x="0.1761%" y="693" width="0.0160%" height="15" fill="rgb(248,47,43)" fg:x="11" fg:w="1"/><text x="0.4261%" y="703.50"></text></g><g><title>`0x7FFC031316CC (1 samples, 0.02%)</title><rect x="0.1761%" y="677" width="0.0160%" height="15" fill="rgb(221,10,30)" fg:x="11" fg:w="1"/><text x="0.4261%" y="687.50"></text></g><g><title>`0x7FFC030D6DA2 (1 samples, 0.02%)</title><rect x="0.1761%" y="661" width="0.0160%" height="15" fill="rgb(210,229,1)" fg:x="11" fg:w="1"/><text x="0.4261%" y="671.50"></text></g><g><title>`0x7FFC03184DE1 (1 samples, 0.02%)</title><rect x="0.1761%" y="645" width="0.0160%" height="15" fill="rgb(222,148,37)" fg:x="11" fg:w="1"/><text x="0.4261%" y="655.50"></text></g><g><title>`0x7FFC03194345 (9 samples, 0.14%)</title><rect x="0.0640%" y="709" width="0.1441%" height="15" fill="rgb(234,67,33)" fg:x="4" fg:w="9"/><text x="0.3140%" y="719.50"></text></g><g><title>`0x7FFC0318B9D9 (1 samples, 0.02%)</title><rect x="0.1921%" y="693" width="0.0160%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="1"/><text x="0.4421%" y="703.50"></text></g><g><title>`0x7FFC030D433E (1 samples, 0.02%)</title><rect x="0.1921%" y="677" width="0.0160%" height="15" fill="rgb(247,138,52)" fg:x="12" fg:w="1"/><text x="0.4421%" y="687.50"></text></g><g><title>`0x7FFC03223474 (1 samples, 0.02%)</title><rect x="0.1921%" y="661" width="0.0160%" height="15" fill="rgb(213,79,30)" fg:x="12" fg:w="1"/><text x="0.4421%" y="671.50"></text></g><g><title>`0x7FFC0312D42E (1 samples, 0.02%)</title><rect x="0.2081%" y="645" width="0.0160%" height="15" fill="rgb(246,177,23)" fg:x="13" fg:w="1"/><text x="0.4581%" y="655.50"></text></g><g><title>`0x7FFC0312D9EB (1 samples, 0.02%)</title><rect x="0.2081%" y="629" width="0.0160%" height="15" fill="rgb(230,62,27)" fg:x="13" fg:w="1"/><text x="0.4581%" y="639.50"></text></g><g><title>`0x7FFC03223734 (1 samples, 0.02%)</title><rect x="0.2081%" y="613" width="0.0160%" height="15" fill="rgb(216,154,8)" fg:x="13" fg:w="1"/><text x="0.4581%" y="623.50"></text></g><g><title>`0x7FFC0319444F (2 samples, 0.03%)</title><rect x="0.2081%" y="709" width="0.0320%" height="15" fill="rgb(244,35,45)" fg:x="13" fg:w="2"/><text x="0.4581%" y="719.50"></text></g><g><title>`0x7FFC0310BABE (2 samples, 0.03%)</title><rect x="0.2081%" y="693" width="0.0320%" height="15" fill="rgb(251,115,12)" fg:x="13" fg:w="2"/><text x="0.4581%" y="703.50"></text></g><g><title>`0x7FFC0310D8EE (2 samples, 0.03%)</title><rect x="0.2081%" y="677" width="0.0320%" height="15" fill="rgb(240,54,50)" fg:x="13" fg:w="2"/><text x="0.4581%" y="687.50"></text></g><g><title>`0x7FFC0312D001 (2 samples, 0.03%)</title><rect x="0.2081%" y="661" width="0.0320%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="2"/><text x="0.4581%" y="671.50"></text></g><g><title>`0x7FFC0312D64C (1 samples, 0.02%)</title><rect x="0.2241%" y="645" width="0.0160%" height="15" fill="rgb(207,117,47)" fg:x="14" fg:w="1"/><text x="0.4741%" y="655.50"></text></g><g><title>`0x7FFC0312E13D (1 samples, 0.02%)</title><rect x="0.2241%" y="629" width="0.0160%" height="15" fill="rgb(249,43,39)" fg:x="14" fg:w="1"/><text x="0.4741%" y="639.50"></text></g><g><title>`0x7FFC030E247B (1 samples, 0.02%)</title><rect x="0.2241%" y="613" width="0.0160%" height="15" fill="rgb(209,38,44)" fg:x="14" fg:w="1"/><text x="0.4741%" y="623.50"></text></g><g><title>`0x7FFC00866E0D (1 samples, 0.02%)</title><rect x="0.2401%" y="597" width="0.0160%" height="15" fill="rgb(236,212,23)" fg:x="15" fg:w="1"/><text x="0.4901%" y="607.50"></text></g><g><title>`0x7FFC00902981 (1 samples, 0.02%)</title><rect x="0.2401%" y="581" width="0.0160%" height="15" fill="rgb(242,79,21)" fg:x="15" fg:w="1"/><text x="0.4901%" y="591.50"></text></g><g><title>`0x7FFC00903793 (1 samples, 0.02%)</title><rect x="0.2401%" y="565" width="0.0160%" height="15" fill="rgb(211,96,35)" fg:x="15" fg:w="1"/><text x="0.4901%" y="575.50"></text></g><g><title>`0x7FFC030C2A2E (17 samples, 0.27%)</title><rect x="0.0000%" y="757" width="0.2721%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="17"/><text x="0.2500%" y="767.50"></text></g><g><title>`0x7FFC031924DA (17 samples, 0.27%)</title><rect x="0.0000%" y="741" width="0.2721%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="17"/><text x="0.2500%" y="751.50"></text></g><g><title>`0x7FFC031926F0 (17 samples, 0.27%)</title><rect x="0.0000%" y="725" width="0.2721%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="17"/><text x="0.2500%" y="735.50"></text></g><g><title>`0x7FFC03194566 (2 samples, 0.03%)</title><rect x="0.2401%" y="709" width="0.0320%" height="15" fill="rgb(235,213,38)" fg:x="15" fg:w="2"/><text x="0.4901%" y="719.50"></text></g><g><title>`0x7FFC030C8726 (2 samples, 0.03%)</title><rect x="0.2401%" y="693" width="0.0320%" height="15" fill="rgb(237,122,38)" fg:x="15" fg:w="2"/><text x="0.4901%" y="703.50"></text></g><g><title>`0x7FFC030C8726 (2 samples, 0.03%)</title><rect x="0.2401%" y="677" width="0.0320%" height="15" fill="rgb(244,218,35)" fg:x="15" fg:w="2"/><text x="0.4901%" y="687.50"></text></g><g><title>`0x7FFC030C86FA (2 samples, 0.03%)</title><rect x="0.2401%" y="661" width="0.0320%" height="15" fill="rgb(240,68,47)" fg:x="15" fg:w="2"/><text x="0.4901%" y="671.50"></text></g><g><title>`0x7FFC031337AC (2 samples, 0.03%)</title><rect x="0.2401%" y="645" width="0.0320%" height="15" fill="rgb(210,16,53)" fg:x="15" fg:w="2"/><text x="0.4901%" y="655.50"></text></g><g><title>`0x7FFC0313483E (2 samples, 0.03%)</title><rect x="0.2401%" y="629" width="0.0320%" height="15" fill="rgb(235,124,12)" fg:x="15" fg:w="2"/><text x="0.4901%" y="639.50"></text></g><g><title>`0x7FFC03220EDE (2 samples, 0.03%)</title><rect x="0.2401%" y="613" width="0.0320%" height="15" fill="rgb(224,169,11)" fg:x="15" fg:w="2"/><text x="0.4901%" y="623.50"></text></g><g><title>`0x7FFC00866E26 (1 samples, 0.02%)</title><rect x="0.2561%" y="597" width="0.0160%" height="15" fill="rgb(250,166,2)" fg:x="16" fg:w="1"/><text x="0.5061%" y="607.50"></text></g><g><title>`0x7FFC008CAD56 (1 samples, 0.02%)</title><rect x="0.2561%" y="581" width="0.0160%" height="15" fill="rgb(242,216,29)" fg:x="16" fg:w="1"/><text x="0.5061%" y="591.50"></text></g><g><title>`0x7FFC0085A776 (1 samples, 0.02%)</title><rect x="0.2561%" y="565" width="0.0160%" height="15" fill="rgb(230,116,27)" fg:x="16" fg:w="1"/><text x="0.5061%" y="575.50"></text></g><g><title>`0x7FFC0085A906 (1 samples, 0.02%)</title><rect x="0.2561%" y="549" width="0.0160%" height="15" fill="rgb(228,99,48)" fg:x="16" fg:w="1"/><text x="0.5061%" y="559.50"></text></g><g><title>`0x7FFC0085AE4A (1 samples, 0.02%)</title><rect x="0.2561%" y="533" width="0.0160%" height="15" fill="rgb(253,11,6)" fg:x="16" fg:w="1"/><text x="0.5061%" y="543.50"></text></g><g><title>`0x7FFC0085AFD1 (1 samples, 0.02%)</title><rect x="0.2561%" y="517" width="0.0160%" height="15" fill="rgb(247,143,39)" fg:x="16" fg:w="1"/><text x="0.5061%" y="527.50"></text></g><g><title>`0x7FFC0085A266 (1 samples, 0.02%)</title><rect x="0.2561%" y="501" width="0.0160%" height="15" fill="rgb(236,97,10)" fg:x="16" fg:w="1"/><text x="0.5061%" y="511.50"></text></g><g><title>`0x7FFC009E657D (1 samples, 0.02%)</title><rect x="0.2561%" y="485" width="0.0160%" height="15" fill="rgb(233,208,19)" fg:x="16" fg:w="1"/><text x="0.5061%" y="495.50"></text></g><g><title>`0x7FFC009E76EB (1 samples, 0.02%)</title><rect x="0.2561%" y="469" width="0.0160%" height="15" fill="rgb(216,164,2)" fg:x="16" fg:w="1"/><text x="0.5061%" y="479.50"></text></g><g><title>`0x7FFC030C8D70 (1 samples, 0.02%)</title><rect x="0.2721%" y="757" width="0.0160%" height="15" fill="rgb(220,129,5)" fg:x="17" fg:w="1"/><text x="0.5221%" y="767.50"></text></g><g><title>`0x7FFC0312FF81 (1 samples, 0.02%)</title><rect x="0.2881%" y="677" width="0.0160%" height="15" fill="rgb(242,17,10)" fg:x="18" fg:w="1"/><text x="0.5381%" y="687.50"></text></g><g><title>`0x7FFC031305FD (1 samples, 0.02%)</title><rect x="0.2881%" y="661" width="0.0160%" height="15" fill="rgb(242,107,0)" fg:x="18" fg:w="1"/><text x="0.5381%" y="671.50"></text></g><g><title>`0x7FFC03132377 (1 samples, 0.02%)</title><rect x="0.3041%" y="661" width="0.0160%" height="15" fill="rgb(251,28,31)" fg:x="19" fg:w="1"/><text x="0.5541%" y="671.50"></text></g><g><title>`0x7FFC03223894 (1 samples, 0.02%)</title><rect x="0.3041%" y="645" width="0.0160%" height="15" fill="rgb(233,223,10)" fg:x="19" fg:w="1"/><text x="0.5541%" y="655.50"></text></g><g><title>`0x7FFC0312FCDA (3 samples, 0.05%)</title><rect x="0.2881%" y="693" width="0.0480%" height="15" fill="rgb(215,21,27)" fg:x="18" fg:w="3"/><text x="0.5381%" y="703.50"></text></g><g><title>`0x7FFC031300AC (2 samples, 0.03%)</title><rect x="0.3041%" y="677" width="0.0320%" height="15" fill="rgb(232,23,21)" fg:x="19" fg:w="2"/><text x="0.5541%" y="687.50"></text></g><g><title>`0x7FFC031324E9 (1 samples, 0.02%)</title><rect x="0.3202%" y="661" width="0.0160%" height="15" fill="rgb(244,5,23)" fg:x="20" fg:w="1"/><text x="0.5702%" y="671.50"></text></g><g><title>`0x7FFC03223414 (1 samples, 0.02%)</title><rect x="0.3202%" y="645" width="0.0160%" height="15" fill="rgb(226,81,46)" fg:x="20" fg:w="1"/><text x="0.5702%" y="655.50"></text></g><g><title>`0x7FFC030D2E8A (1 samples, 0.02%)</title><rect x="0.3362%" y="677" width="0.0160%" height="15" fill="rgb(247,70,30)" fg:x="21" fg:w="1"/><text x="0.5862%" y="687.50"></text></g><g><title>`0x7FFC0313E4B1 (5 samples, 0.08%)</title><rect x="0.2881%" y="725" width="0.0800%" height="15" fill="rgb(212,68,19)" fg:x="18" fg:w="5"/><text x="0.5381%" y="735.50"></text></g><g><title>`0x7FFC0313D270 (5 samples, 0.08%)</title><rect x="0.2881%" y="709" width="0.0800%" height="15" fill="rgb(240,187,13)" fg:x="18" fg:w="5"/><text x="0.5381%" y="719.50"></text></g><g><title>`0x7FFC0312FDA1 (2 samples, 0.03%)</title><rect x="0.3362%" y="693" width="0.0320%" height="15" fill="rgb(223,113,26)" fg:x="21" fg:w="2"/><text x="0.5862%" y="703.50"></text></g><g><title>`0x7FFC030D36D6 (1 samples, 0.02%)</title><rect x="0.3522%" y="677" width="0.0160%" height="15" fill="rgb(206,192,2)" fg:x="22" fg:w="1"/><text x="0.6022%" y="687.50"></text></g><g><title>`0x7FFC030E0E23 (1 samples, 0.02%)</title><rect x="0.3522%" y="661" width="0.0160%" height="15" fill="rgb(241,108,4)" fg:x="22" fg:w="1"/><text x="0.6022%" y="671.50"></text></g><g><title>`0x7FFC030E1B30 (1 samples, 0.02%)</title><rect x="0.3522%" y="645" width="0.0160%" height="15" fill="rgb(247,173,49)" fg:x="22" fg:w="1"/><text x="0.6022%" y="655.50"></text></g><g><title>`0x7FFC030E3767 (1 samples, 0.02%)</title><rect x="0.3522%" y="629" width="0.0160%" height="15" fill="rgb(224,114,35)" fg:x="22" fg:w="1"/><text x="0.6022%" y="639.50"></text></g><g><title>`0x7FFC008C32B2 (1 samples, 0.02%)</title><rect x="0.3682%" y="709" width="0.0160%" height="15" fill="rgb(245,159,27)" fg:x="23" fg:w="1"/><text x="0.6182%" y="719.50"></text></g><g><title>kaori.exe`pre_c_initialization() (1 samples, 0.02%)</title><rect x="0.3682%" y="693" width="0.0160%" height="15" fill="rgb(245,172,44)" fg:x="23" fg:w="1"/><text x="0.6182%" y="703.50"></text></g><g><title>`0x7FFC0088B678 (1 samples, 0.02%)</title><rect x="0.3682%" y="677" width="0.0160%" height="15" fill="rgb(236,23,11)" fg:x="23" fg:w="1"/><text x="0.6182%" y="687.50"></text></g><g><title>`0x7FFC0088BBE7 (1 samples, 0.02%)</title><rect x="0.3682%" y="661" width="0.0160%" height="15" fill="rgb(205,117,38)" fg:x="23" fg:w="1"/><text x="0.6182%" y="671.50"></text></g><g><title>`0x7FFC0088A7E4 (1 samples, 0.02%)</title><rect x="0.3682%" y="645" width="0.0160%" height="15" fill="rgb(237,72,25)" fg:x="23" fg:w="1"/><text x="0.6182%" y="655.50"></text></g><g><title>`0x7FFC0088A86E (1 samples, 0.02%)</title><rect x="0.3682%" y="629" width="0.0160%" height="15" fill="rgb(244,70,9)" fg:x="23" fg:w="1"/><text x="0.6182%" y="639.50"></text></g><g><title>`0x7FFC008642C0 (1 samples, 0.02%)</title><rect x="0.3682%" y="613" width="0.0160%" height="15" fill="rgb(217,125,39)" fg:x="23" fg:w="1"/><text x="0.6182%" y="623.50"></text></g><g><title>`0x7FFC00A92E0B (1 samples, 0.02%)</title><rect x="0.3682%" y="597" width="0.0160%" height="15" fill="rgb(235,36,10)" fg:x="23" fg:w="1"/><text x="0.6182%" y="607.50"></text></g><g><title>`0x7FFC03223C34 (1 samples, 0.02%)</title><rect x="0.3682%" y="581" width="0.0160%" height="15" fill="rgb(251,123,47)" fg:x="23" fg:w="1"/><text x="0.6182%" y="591.50"></text></g><g><title>`0x7FFC0313032F (1 samples, 0.02%)</title><rect x="0.3842%" y="565" width="0.0160%" height="15" fill="rgb(221,13,13)" fg:x="24" fg:w="1"/><text x="0.6342%" y="575.50"></text></g><g><title>`0x7FFC03130BB0 (1 samples, 0.02%)</title><rect x="0.3842%" y="549" width="0.0160%" height="15" fill="rgb(238,131,9)" fg:x="24" fg:w="1"/><text x="0.6342%" y="559.50"></text></g><g><title>`0x7FFC03130EE3 (1 samples, 0.02%)</title><rect x="0.3842%" y="533" width="0.0160%" height="15" fill="rgb(211,50,8)" fg:x="24" fg:w="1"/><text x="0.6342%" y="543.50"></text></g><g><title>`0x7FFC032239D4 (1 samples, 0.02%)</title><rect x="0.3842%" y="517" width="0.0160%" height="15" fill="rgb(245,182,24)" fg:x="24" fg:w="1"/><text x="0.6342%" y="527.50"></text></g><g><title>`0x7FFC0310BABE (1 samples, 0.02%)</title><rect x="0.4002%" y="517" width="0.0160%" height="15" fill="rgb(242,14,37)" fg:x="25" fg:w="1"/><text x="0.6502%" y="527.50"></text></g><g><title>`0x7FFC0310D2AD (1 samples, 0.02%)</title><rect x="0.4002%" y="501" width="0.0160%" height="15" fill="rgb(246,228,12)" fg:x="25" fg:w="1"/><text x="0.6502%" y="511.50"></text></g><g><title>`0x7FFC0310F580 (1 samples, 0.02%)</title><rect x="0.4002%" y="485" width="0.0160%" height="15" fill="rgb(213,55,15)" fg:x="25" fg:w="1"/><text x="0.6502%" y="495.50"></text></g><g><title>`0x7FFC03110E14 (1 samples, 0.02%)</title><rect x="0.4002%" y="469" width="0.0160%" height="15" fill="rgb(209,9,3)" fg:x="25" fg:w="1"/><text x="0.6502%" y="479.50"></text></g><g><title>`0x7FFC03110F54 (1 samples, 0.02%)</title><rect x="0.4002%" y="453" width="0.0160%" height="15" fill="rgb(230,59,30)" fg:x="25" fg:w="1"/><text x="0.6502%" y="463.50"></text></g><g><title>`0x7FFC03111CAF (1 samples, 0.02%)</title><rect x="0.4002%" y="437" width="0.0160%" height="15" fill="rgb(209,121,21)" fg:x="25" fg:w="1"/><text x="0.6502%" y="447.50"></text></g><g><title>`0x7FFC0310A510 (3 samples, 0.05%)</title><rect x="0.3842%" y="597" width="0.0480%" height="15" fill="rgb(220,109,13)" fg:x="24" fg:w="3"/><text x="0.6342%" y="607.50"></text></g><g><title>`0x7FFC0312FDB4 (3 samples, 0.05%)</title><rect x="0.3842%" y="581" width="0.0480%" height="15" fill="rgb(232,18,1)" fg:x="24" fg:w="3"/><text x="0.6342%" y="591.50"></text></g><g><title>`0x7FFC0313039D (2 samples, 0.03%)</title><rect x="0.4002%" y="565" width="0.0320%" height="15" fill="rgb(215,41,42)" fg:x="25" fg:w="2"/><text x="0.6502%" y="575.50"></text></g><g><title>`0x7FFC031324CC (2 samples, 0.03%)</title><rect x="0.4002%" y="549" width="0.0320%" height="15" fill="rgb(224,123,36)" fg:x="25" fg:w="2"/><text x="0.6502%" y="559.50"></text></g><g><title>`0x7FFC0312D5A8 (2 samples, 0.03%)</title><rect x="0.4002%" y="533" width="0.0320%" height="15" fill="rgb(240,125,3)" fg:x="25" fg:w="2"/><text x="0.6502%" y="543.50"></text></g><g><title>`0x7FFC0310BC32 (1 samples, 0.02%)</title><rect x="0.4162%" y="517" width="0.0160%" height="15" fill="rgb(205,98,50)" fg:x="26" fg:w="1"/><text x="0.6662%" y="527.50"></text></g><g><title>`0x7FFC030D2DC9 (1 samples, 0.02%)</title><rect x="0.4162%" y="501" width="0.0160%" height="15" fill="rgb(205,185,37)" fg:x="26" fg:w="1"/><text x="0.6662%" y="511.50"></text></g><g><title>`0x7FFC008F0046 (4 samples, 0.06%)</title><rect x="0.3842%" y="709" width="0.0640%" height="15" fill="rgb(238,207,15)" fg:x="24" fg:w="4"/><text x="0.6342%" y="719.50"></text></g><g><title>`0x7FFC008D553D (4 samples, 0.06%)</title><rect x="0.3842%" y="693" width="0.0640%" height="15" fill="rgb(213,199,42)" fg:x="24" fg:w="4"/><text x="0.6342%" y="703.50"></text></g><g><title>`0x7FFC0086423B (4 samples, 0.06%)</title><rect x="0.3842%" y="677" width="0.0640%" height="15" fill="rgb(235,201,11)" fg:x="24" fg:w="4"/><text x="0.6342%" y="687.50"></text></g><g><title>`0x7FFC008C6225 (4 samples, 0.06%)</title><rect x="0.3842%" y="661" width="0.0640%" height="15" fill="rgb(207,46,11)" fg:x="24" fg:w="4"/><text x="0.6342%" y="671.50"></text></g><g><title>`0x7FFC009EDD0F (4 samples, 0.06%)</title><rect x="0.3842%" y="645" width="0.0640%" height="15" fill="rgb(241,35,35)" fg:x="24" fg:w="4"/><text x="0.6342%" y="655.50"></text></g><g><title>`0x7FFC030D4FB0 (4 samples, 0.06%)</title><rect x="0.3842%" y="629" width="0.0640%" height="15" fill="rgb(243,32,47)" fg:x="24" fg:w="4"/><text x="0.6342%" y="639.50"></text></g><g><title>`0x7FFC0310A190 (4 samples, 0.06%)</title><rect x="0.3842%" y="613" width="0.0640%" height="15" fill="rgb(247,202,23)" fg:x="24" fg:w="4"/><text x="0.6342%" y="623.50"></text></g><g><title>`0x7FFC0310A584 (1 samples, 0.02%)</title><rect x="0.4322%" y="597" width="0.0160%" height="15" fill="rgb(219,102,11)" fg:x="27" fg:w="1"/><text x="0.6822%" y="607.50"></text></g><g><title>`0x7FFC030C7883 (1 samples, 0.02%)</title><rect x="0.4322%" y="581" width="0.0160%" height="15" fill="rgb(243,110,44)" fg:x="27" fg:w="1"/><text x="0.6822%" y="591.50"></text></g><g><title>`0x7FFC030C8726 (1 samples, 0.02%)</title><rect x="0.4322%" y="565" width="0.0160%" height="15" fill="rgb(222,74,54)" fg:x="27" fg:w="1"/><text x="0.6822%" y="575.50"></text></g><g><title>`0x7FFC030C86FA (1 samples, 0.02%)</title><rect x="0.4322%" y="549" width="0.0160%" height="15" fill="rgb(216,99,12)" fg:x="27" fg:w="1"/><text x="0.6822%" y="559.50"></text></g><g><title>`0x7FFC031337AC (1 samples, 0.02%)</title><rect x="0.4322%" y="533" width="0.0160%" height="15" fill="rgb(226,22,26)" fg:x="27" fg:w="1"/><text x="0.6822%" y="543.50"></text></g><g><title>`0x7FFC0313483E (1 samples, 0.02%)</title><rect x="0.4322%" y="517" width="0.0160%" height="15" fill="rgb(217,163,10)" fg:x="27" fg:w="1"/><text x="0.6822%" y="527.50"></text></g><g><title>`0x7FFC03220EDE (1 samples, 0.02%)</title><rect x="0.4322%" y="501" width="0.0160%" height="15" fill="rgb(213,25,53)" fg:x="27" fg:w="1"/><text x="0.6822%" y="511.50"></text></g><g><title>`0x7FFC020B7AB4 (1 samples, 0.02%)</title><rect x="0.4322%" y="485" width="0.0160%" height="15" fill="rgb(252,105,26)" fg:x="27" fg:w="1"/><text x="0.6822%" y="495.50"></text></g><g><title>`0x7FFC020F01A4 (1 samples, 0.02%)</title><rect x="0.4322%" y="469" width="0.0160%" height="15" fill="rgb(220,39,43)" fg:x="27" fg:w="1"/><text x="0.6822%" y="479.50"></text></g><g><title>`0x7FFC008F0093 (1 samples, 0.02%)</title><rect x="0.4482%" y="709" width="0.0160%" height="15" fill="rgb(229,68,48)" fg:x="28" fg:w="1"/><text x="0.6982%" y="719.50"></text></g><g><title>`0x7FFC023018AB (1 samples, 0.02%)</title><rect x="0.4482%" y="693" width="0.0160%" height="15" fill="rgb(252,8,32)" fg:x="28" fg:w="1"/><text x="0.6982%" y="703.50"></text></g><g><title>`0x7FFC030C8EDE (1 samples, 0.02%)</title><rect x="0.4482%" y="677" width="0.0160%" height="15" fill="rgb(223,20,43)" fg:x="28" fg:w="1"/><text x="0.6982%" y="687.50"></text></g><g><title>`0x7FFC031BDFFF (1 samples, 0.02%)</title><rect x="0.4482%" y="661" width="0.0160%" height="15" fill="rgb(229,81,49)" fg:x="28" fg:w="1"/><text x="0.6982%" y="671.50"></text></g><g><title>`0x7FFC0313483E (1 samples, 0.02%)</title><rect x="0.4482%" y="645" width="0.0160%" height="15" fill="rgb(236,28,36)" fg:x="28" fg:w="1"/><text x="0.6982%" y="655.50"></text></g><g><title>`0x7FFC03220EDE (1 samples, 0.02%)</title><rect x="0.4482%" y="629" width="0.0160%" height="15" fill="rgb(249,185,26)" fg:x="28" fg:w="1"/><text x="0.6982%" y="639.50"></text></g><g><title>`0x7FFC00AB413D (1 samples, 0.02%)</title><rect x="0.4482%" y="613" width="0.0160%" height="15" fill="rgb(249,174,33)" fg:x="28" fg:w="1"/><text x="0.6982%" y="623.50"></text></g><g><title>`0x7FFC00A5E8F2 (1 samples, 0.02%)</title><rect x="0.4482%" y="597" width="0.0160%" height="15" fill="rgb(233,201,37)" fg:x="28" fg:w="1"/><text x="0.6982%" y="607.50"></text></g><g><title>`0x7FFC00A5ED43 (1 samples, 0.02%)</title><rect x="0.4482%" y="581" width="0.0160%" height="15" fill="rgb(221,78,26)" fg:x="28" fg:w="1"/><text x="0.6982%" y="591.50"></text></g><g><title>`0x7FFC00AE0E9C (1 samples, 0.02%)</title><rect x="0.4482%" y="565" width="0.0160%" height="15" fill="rgb(250,127,30)" fg:x="28" fg:w="1"/><text x="0.6982%" y="575.50"></text></g><g><title>`0x7FFC00A2D4C9 (1 samples, 0.02%)</title><rect x="0.4482%" y="549" width="0.0160%" height="15" fill="rgb(230,49,44)" fg:x="28" fg:w="1"/><text x="0.6982%" y="559.50"></text></g><g><title>`0x7FFC00A2D44E (1 samples, 0.02%)</title><rect x="0.4482%" y="533" width="0.0160%" height="15" fill="rgb(229,67,23)" fg:x="28" fg:w="1"/><text x="0.6982%" y="543.50"></text></g><g><title>`0x7FFC00A2BEC6 (1 samples, 0.02%)</title><rect x="0.4482%" y="517" width="0.0160%" height="15" fill="rgb(249,83,47)" fg:x="28" fg:w="1"/><text x="0.6982%" y="527.50"></text></g><g><title>`0x7FFC00A2C642 (1 samples, 0.02%)</title><rect x="0.4482%" y="501" width="0.0160%" height="15" fill="rgb(215,43,3)" fg:x="28" fg:w="1"/><text x="0.6982%" y="511.50"></text></g><g><title>`0x7FFC00A2C803 (1 samples, 0.02%)</title><rect x="0.4482%" y="485" width="0.0160%" height="15" fill="rgb(238,154,13)" fg:x="28" fg:w="1"/><text x="0.6982%" y="495.50"></text></g><g><title>`0x7FFC03226024 (1 samples, 0.02%)</title><rect x="0.4482%" y="469" width="0.0160%" height="15" fill="rgb(219,56,2)" fg:x="28" fg:w="1"/><text x="0.6982%" y="479.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.02%)</title><rect x="0.4642%" y="533" width="0.0160%" height="15" fill="rgb(233,0,4)" fg:x="29" fg:w="1"/><text x="0.7142%" y="543.50"></text></g><g><title>kaori.exe`kaori::program::compile_source_code (1 samples, 0.02%)</title><rect x="0.4642%" y="517" width="0.0160%" height="15" fill="rgb(235,30,7)" fg:x="29" fg:w="1"/><text x="0.7142%" y="527.50"></text></g><g><title>kaori.exe`kaori::program::run_syntax_analysis (1 samples, 0.02%)</title><rect x="0.4642%" y="501" width="0.0160%" height="15" fill="rgb(250,79,13)" fg:x="29" fg:w="1"/><text x="0.7142%" y="511.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;alloc::vec::Vec (1 samples, 0.02%)</title><rect x="0.4642%" y="485" width="0.0160%" height="15" fill="rgb(211,146,34)" fg:x="29" fg:w="1"/><text x="0.7142%" y="495.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse (1 samples, 0.02%)</title><rect x="0.4642%" y="469" width="0.0160%" height="15" fill="rgb(228,22,38)" fg:x="29" fg:w="1"/><text x="0.7142%" y="479.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;enum2$&lt;core::option::Option (1 samples, 0.02%)</title><rect x="0.4642%" y="453" width="0.0160%" height="15" fill="rgb(235,168,5)" fg:x="29" fg:w="1"/><text x="0.7142%" y="463.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_declaration (1 samples, 0.02%)</title><rect x="0.4642%" y="437" width="0.0160%" height="15" fill="rgb(221,155,16)" fg:x="29" fg:w="1"/><text x="0.7142%" y="447.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_function_declaration (1 samples, 0.02%)</title><rect x="0.4642%" y="421" width="0.0160%" height="15" fill="rgb(215,215,53)" fg:x="29" fg:w="1"/><text x="0.7142%" y="431.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_ast_node (1 samples, 0.02%)</title><rect x="0.4642%" y="405" width="0.0160%" height="15" fill="rgb(223,4,10)" fg:x="29" fg:w="1"/><text x="0.7142%" y="415.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;enum2$&lt;core::option::Option (1 samples, 0.02%)</title><rect x="0.4642%" y="389" width="0.0160%" height="15" fill="rgb(234,103,6)" fg:x="29" fg:w="1"/><text x="0.7142%" y="399.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_declaration (1 samples, 0.02%)</title><rect x="0.4642%" y="373" width="0.0160%" height="15" fill="rgb(227,97,0)" fg:x="29" fg:w="1"/><text x="0.7142%" y="383.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.02%)</title><rect x="0.4642%" y="357" width="0.0160%" height="15" fill="rgb(234,150,53)" fg:x="29" fg:w="1"/><text x="0.7142%" y="367.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_variable_declaration (1 samples, 0.02%)</title><rect x="0.4642%" y="341" width="0.0160%" height="15" fill="rgb(228,201,54)" fg:x="29" fg:w="1"/><text x="0.7142%" y="351.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.02%)</title><rect x="0.4642%" y="325" width="0.0160%" height="15" fill="rgb(222,22,37)" fg:x="29" fg:w="1"/><text x="0.7142%" y="335.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_expression (1 samples, 0.02%)</title><rect x="0.4642%" y="309" width="0.0160%" height="15" fill="rgb(237,53,32)" fg:x="29" fg:w="1"/><text x="0.7142%" y="319.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_assign (1 samples, 0.02%)</title><rect x="0.4642%" y="293" width="0.0160%" height="15" fill="rgb(233,25,53)" fg:x="29" fg:w="1"/><text x="0.7142%" y="303.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.02%)</title><rect x="0.4642%" y="277" width="0.0160%" height="15" fill="rgb(210,40,34)" fg:x="29" fg:w="1"/><text x="0.7142%" y="287.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_or (1 samples, 0.02%)</title><rect x="0.4642%" y="261" width="0.0160%" height="15" fill="rgb(241,220,44)" fg:x="29" fg:w="1"/><text x="0.7142%" y="271.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.02%)</title><rect x="0.4642%" y="245" width="0.0160%" height="15" fill="rgb(235,28,35)" fg:x="29" fg:w="1"/><text x="0.7142%" y="255.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_and (1 samples, 0.02%)</title><rect x="0.4642%" y="229" width="0.0160%" height="15" fill="rgb(210,56,17)" fg:x="29" fg:w="1"/><text x="0.7142%" y="239.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.02%)</title><rect x="0.4642%" y="213" width="0.0160%" height="15" fill="rgb(224,130,29)" fg:x="29" fg:w="1"/><text x="0.7142%" y="223.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_equality (1 samples, 0.02%)</title><rect x="0.4642%" y="197" width="0.0160%" height="15" fill="rgb(235,212,8)" fg:x="29" fg:w="1"/><text x="0.7142%" y="207.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.02%)</title><rect x="0.4642%" y="181" width="0.0160%" height="15" fill="rgb(223,33,50)" fg:x="29" fg:w="1"/><text x="0.7142%" y="191.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_comparison (1 samples, 0.02%)</title><rect x="0.4642%" y="165" width="0.0160%" height="15" fill="rgb(219,149,13)" fg:x="29" fg:w="1"/><text x="0.7142%" y="175.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.02%)</title><rect x="0.4642%" y="149" width="0.0160%" height="15" fill="rgb(250,156,29)" fg:x="29" fg:w="1"/><text x="0.7142%" y="159.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_term (1 samples, 0.02%)</title><rect x="0.4642%" y="133" width="0.0160%" height="15" fill="rgb(216,193,19)" fg:x="29" fg:w="1"/><text x="0.7142%" y="143.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.02%)</title><rect x="0.4642%" y="117" width="0.0160%" height="15" fill="rgb(216,135,14)" fg:x="29" fg:w="1"/><text x="0.7142%" y="127.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_factor (1 samples, 0.02%)</title><rect x="0.4642%" y="101" width="0.0160%" height="15" fill="rgb(241,47,5)" fg:x="29" fg:w="1"/><text x="0.7142%" y="111.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.02%)</title><rect x="0.4642%" y="85" width="0.0160%" height="15" fill="rgb(233,42,35)" fg:x="29" fg:w="1"/><text x="0.7142%" y="95.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_prefix_unary (1 samples, 0.02%)</title><rect x="0.4642%" y="69" width="0.0160%" height="15" fill="rgb(231,13,6)" fg:x="29" fg:w="1"/><text x="0.7142%" y="79.50"></text></g><g><title>kaori.exe`kaori::syntax::parser::Parser::parse_primary (1 samples, 0.02%)</title><rect x="0.4642%" y="53" width="0.0160%" height="15" fill="rgb(207,181,40)" fg:x="29" fg:w="1"/><text x="0.7142%" y="63.50"></text></g><g><title>kaori.exe`core::num::dec2flt::impl$4::from_str (1 samples, 0.02%)</title><rect x="0.4642%" y="37" width="0.0160%" height="15" fill="rgb(254,173,49)" fg:x="29" fg:w="1"/><text x="0.7142%" y="47.50"></text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (193 samples, 3.09%)</title><rect x="8.0038%" y="421" width="3.0895%" height="15" fill="rgb(221,1,38)" fg:x="500" fg:w="193"/><text x="8.2538%" y="431.50">kao..</text></g><g><title>kaori.exe`kaori::bytecode::value::Value::as_number (4 samples, 0.06%)</title><rect x="11.0933%" y="421" width="0.0640%" height="15" fill="rgb(206,124,46)" fg:x="693" fg:w="4"/><text x="11.3433%" y="431.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_slice (14 samples, 0.22%)</title><rect x="12.2939%" y="373" width="0.2241%" height="15" fill="rgb(249,21,11)" fg:x="768" fg:w="14"/><text x="12.5439%" y="383.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::get_value (175 samples, 2.80%)</title><rect x="11.1574%" y="421" width="2.8013%" height="15" fill="rgb(222,201,40)" fg:x="697" fg:w="175"/><text x="11.4074%" y="431.50">ka..</text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (104 samples, 1.66%)</title><rect x="12.2939%" y="405" width="1.6648%" height="15" fill="rgb(235,61,29)" fg:x="768" fg:w="104"/><text x="12.5439%" y="415.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (104 samples, 1.66%)</title><rect x="12.2939%" y="389" width="1.6648%" height="15" fill="rgb(219,207,3)" fg:x="768" fg:w="104"/><text x="12.5439%" y="399.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (90 samples, 1.44%)</title><rect x="12.5180%" y="373" width="1.4407%" height="15" fill="rgb(222,56,46)" fg:x="782" fg:w="90"/><text x="12.7680%" y="383.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_mut_slice (704 samples, 11.27%)</title><rect x="13.9587%" y="373" width="11.2694%" height="15" fill="rgb(239,76,54)" fg:x="872" fg:w="704"/><text x="14.2087%" y="383.50">kaori.exe`alloc::..</text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_mut_ptr (703 samples, 11.25%)</title><rect x="13.9747%" y="357" width="11.2534%" height="15" fill="rgb(231,124,27)" fg:x="873" fg:w="703"/><text x="14.2247%" y="367.50">kaori.exe`alloc::..</text></g><g><title>kaori.exe`alloc::raw_vec::RawVec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::ptr (703 samples, 11.25%)</title><rect x="13.9747%" y="341" width="11.2534%" height="15" fill="rgb(249,195,6)" fg:x="873" fg:w="703"/><text x="14.2247%" y="351.50">kaori.exe`alloc::..</text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (703 samples, 11.25%)</title><rect x="13.9747%" y="325" width="11.2534%" height="15" fill="rgb(237,174,47)" fg:x="873" fg:w="703"/><text x="14.2247%" y="335.50">kaori.exe`alloc::..</text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (703 samples, 11.25%)</title><rect x="13.9747%" y="309" width="11.2534%" height="15" fill="rgb(206,201,31)" fg:x="873" fg:w="703"/><text x="14.2247%" y="319.50">kaori.exe`alloc::..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_add(kaori::virtual_machine::kaori_vm::VMContext*, enum2$&lt;kaori::bytecode::instruction::Instruction&gt;*, ref$&lt;slice2$&lt;enum2$ (1,562 samples, 25.00%)</title><rect x="0.4802%" y="437" width="25.0040%" height="15" fill="rgb(231,57,52)" fg:x="30" fg:w="1562"/><text x="0.7302%" y="447.50">kaori.exe`kaori::virtual_machine::kaori_..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::set_value (720 samples, 11.53%)</title><rect x="13.9587%" y="421" width="11.5255%" height="15" fill="rgb(248,177,22)" fg:x="872" fg:w="720"/><text x="14.2087%" y="431.50">kaori.exe`kaori::..</text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (720 samples, 11.53%)</title><rect x="13.9587%" y="405" width="11.5255%" height="15" fill="rgb(215,211,37)" fg:x="872" fg:w="720"/><text x="14.2087%" y="415.50">kaori.exe`alloc::..</text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (720 samples, 11.53%)</title><rect x="13.9587%" y="389" width="11.5255%" height="15" fill="rgb(241,128,51)" fg:x="872" fg:w="720"/><text x="14.2087%" y="399.50">kaori.exe`core::s..</text></g><g><title>kaori.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (16 samples, 0.26%)</title><rect x="25.2281%" y="373" width="0.2561%" height="15" fill="rgb(227,165,31)" fg:x="1576" fg:w="16"/><text x="25.4781%" y="383.50"></text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (323 samples, 5.17%)</title><rect x="36.7056%" y="421" width="5.1705%" height="15" fill="rgb(228,167,24)" fg:x="2293" fg:w="323"/><text x="36.9556%" y="431.50">kaori...</text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_slice (2 samples, 0.03%)</title><rect x="41.8761%" y="373" width="0.0320%" height="15" fill="rgb(228,143,12)" fg:x="2616" fg:w="2"/><text x="42.1261%" y="383.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_conditional_jump(kaori::virtual_machine::kaori_vm::VMContext*, enum2$&lt;kaori::bytecode::instruction::Instruction&gt;*, ref$&lt;slice2$&lt;enum2$ (1,102 samples, 17.64%)</title><rect x="25.4842%" y="437" width="17.6405%" height="15" fill="rgb(249,149,8)" fg:x="1592" fg:w="1102"/><text x="25.7342%" y="447.50">kaori.exe`kaori::virtual_ma..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::get_value (78 samples, 1.25%)</title><rect x="41.8761%" y="421" width="1.2486%" height="15" fill="rgb(243,35,44)" fg:x="2616" fg:w="78"/><text x="42.1261%" y="431.50"></text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (78 samples, 1.25%)</title><rect x="41.8761%" y="405" width="1.2486%" height="15" fill="rgb(246,89,9)" fg:x="2616" fg:w="78"/><text x="42.1261%" y="415.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (78 samples, 1.25%)</title><rect x="41.8761%" y="389" width="1.2486%" height="15" fill="rgb(233,213,13)" fg:x="2616" fg:w="78"/><text x="42.1261%" y="399.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (76 samples, 1.22%)</title><rect x="41.9081%" y="373" width="1.2166%" height="15" fill="rgb(233,141,41)" fg:x="2618" fg:w="76"/><text x="42.1581%" y="383.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_jump(kaori::virtual_machine::kaori_vm::VMContext*, enum2$&lt;kaori::bytecode::instruction::Instruction&gt;*, ref$&lt;slice2$&lt;enum2$ (533 samples, 8.53%)</title><rect x="43.1247%" y="437" width="8.5321%" height="15" fill="rgb(239,167,4)" fg:x="2694" fg:w="533"/><text x="43.3747%" y="447.50">kaori.exe`ka..</text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (202 samples, 3.23%)</title><rect x="48.4232%" y="421" width="3.2336%" height="15" fill="rgb(209,217,16)" fg:x="3025" fg:w="202"/><text x="48.6732%" y="431.50">kao..</text></g><g><title>kaori.exe`kaori::bytecode::value::Value::as_number (3 samples, 0.05%)</title><rect x="58.6041%" y="421" width="0.0480%" height="15" fill="rgb(219,88,35)" fg:x="3661" fg:w="3"/><text x="58.8541%" y="431.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_slice (64 samples, 1.02%)</title><rect x="62.1738%" y="373" width="1.0245%" height="15" fill="rgb(220,193,23)" fg:x="3884" fg:w="64"/><text x="62.4238%" y="383.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::get_value (293 samples, 4.69%)</title><rect x="58.6522%" y="421" width="4.6903%" height="15" fill="rgb(230,90,52)" fg:x="3664" fg:w="293"/><text x="58.9022%" y="431.50">kaori..</text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (73 samples, 1.17%)</title><rect x="62.1738%" y="405" width="1.1686%" height="15" fill="rgb(252,106,19)" fg:x="3884" fg:w="73"/><text x="62.4238%" y="415.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (73 samples, 1.17%)</title><rect x="62.1738%" y="389" width="1.1686%" height="15" fill="rgb(206,74,20)" fg:x="3884" fg:w="73"/><text x="62.4238%" y="399.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (9 samples, 0.14%)</title><rect x="63.1983%" y="373" width="0.1441%" height="15" fill="rgb(230,138,44)" fg:x="3948" fg:w="9"/><text x="63.4483%" y="383.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_less(kaori::virtual_machine::kaori_vm::VMContext*, enum2$&lt;kaori::bytecode::instruction::Instruction&gt;*, ref$&lt;slice2$&lt;enum2$ (1,185 samples, 18.97%)</title><rect x="51.6568%" y="437" width="18.9691%" height="15" fill="rgb(235,182,43)" fg:x="3227" fg:w="1185"/><text x="51.9068%" y="447.50">kaori.exe`kaori::virtual_machi..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::set_value (455 samples, 7.28%)</title><rect x="63.3424%" y="421" width="7.2835%" height="15" fill="rgb(242,16,51)" fg:x="3957" fg:w="455"/><text x="63.5924%" y="431.50">kaori.exe`..</text></g><g><title>kaori.exe`enum2$&lt;kaori::bytecode::instruction::Instruction&gt;::discriminant (81 samples, 1.30%)</title><rect x="78.2296%" y="421" width="1.2966%" height="15" fill="rgb(248,9,4)" fg:x="4887" fg:w="81"/><text x="78.4796%" y="431.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::get_value (161 samples, 2.58%)</title><rect x="79.5262%" y="421" width="2.5772%" height="15" fill="rgb(210,31,22)" fg:x="4968" fg:w="161"/><text x="79.7762%" y="431.50">ka..</text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (154 samples, 2.47%)</title><rect x="79.6382%" y="405" width="2.4652%" height="15" fill="rgb(239,54,39)" fg:x="4975" fg:w="154"/><text x="79.8882%" y="415.50">ka..</text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (154 samples, 2.47%)</title><rect x="79.6382%" y="389" width="2.4652%" height="15" fill="rgb(230,99,41)" fg:x="4975" fg:w="154"/><text x="79.8882%" y="399.50">ka..</text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (154 samples, 2.47%)</title><rect x="79.6382%" y="373" width="2.4652%" height="15" fill="rgb(253,106,12)" fg:x="4975" fg:w="154"/><text x="79.8882%" y="383.50">ka..</text></g><g><title>kaori.exe`kaori::program::run_program (6,217 samples, 99.52%)</title><rect x="0.4642%" y="549" width="99.5198%" height="15" fill="rgb(213,46,41)" fg:x="29" fg:w="6217"/><text x="0.7142%" y="559.50">kaori.exe`kaori::program::run_program</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::run_vm(alloc::vec::Vec&lt;enum2$&lt;kaori::bytecode::instruction::Instruction&gt;,alloc::alloc::Global&gt;, alloc::vec::Vec (6,216 samples, 99.50%)</title><rect x="0.4802%" y="533" width="99.5038%" height="15" fill="rgb(215,133,35)" fg:x="30" fg:w="6216"/><text x="0.7302%" y="543.50">kaori.exe`kaori::virtual_machine::kaori_vm::run_vm(alloc::vec::Vec&lt;enum2$&lt;kaori::bytecode::instruction::Instruction&gt;,alloc::alloc::Global&gt;, alloc::vec::Vec</text></g><g><title>kaori.exe`core::ptr::drop_in_place (6,216 samples, 99.50%)</title><rect x="0.4802%" y="517" width="99.5038%" height="15" fill="rgb(213,28,5)" fg:x="30" fg:w="6216"/><text x="0.7302%" y="527.50">kaori.exe`core::ptr::drop_in_place</text></g><g><title>kaori.exe`core::ptr::drop_in_place (6,216 samples, 99.50%)</title><rect x="0.4802%" y="501" width="99.5038%" height="15" fill="rgb(215,77,49)" fg:x="30" fg:w="6216"/><text x="0.7302%" y="511.50">kaori.exe`core::ptr::drop_in_place</text></g><g><title>kaori.exe`core::ptr::drop_in_place(alloc::vec::Vec (6,216 samples, 99.50%)</title><rect x="0.4802%" y="485" width="99.5038%" height="15" fill="rgb(248,100,22)" fg:x="30" fg:w="6216"/><text x="0.7302%" y="495.50">kaori.exe`core::ptr::drop_in_place(alloc::vec::Vec</text></g><g><title>kaori.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (6,216 samples, 99.50%)</title><rect x="0.4802%" y="469" width="99.5038%" height="15" fill="rgb(208,67,9)" fg:x="30" fg:w="6216"/><text x="0.7302%" y="479.50">kaori.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec</text></g><g><title>kaori.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (6,216 samples, 99.50%)</title><rect x="0.4802%" y="453" width="99.5038%" height="15" fill="rgb(219,133,21)" fg:x="30" fg:w="6216"/><text x="0.7302%" y="463.50">kaori.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::instruction_move(kaori::virtual_machine::kaori_vm::VMContext*, enum2$&lt;kaori::bytecode::instruction::Instruction&gt;*, ref$&lt;slice2$&lt;enum2$ (1,834 samples, 29.36%)</title><rect x="70.6259%" y="437" width="29.3581%" height="15" fill="rgb(246,46,29)" fg:x="4412" fg:w="1834"/><text x="70.8759%" y="447.50">kaori.exe`kaori::virtual_machine::kaori_vm::ins..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::set_value (1,117 samples, 17.88%)</title><rect x="82.1034%" y="421" width="17.8806%" height="15" fill="rgb(246,185,52)" fg:x="5129" fg:w="1117"/><text x="82.3534%" y="431.50">kaori.exe`kaori::virtual_mac..</text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (11 samples, 0.18%)</title><rect x="99.8079%" y="405" width="0.1761%" height="15" fill="rgb(252,136,11)" fg:x="6235" fg:w="11"/><text x="100.0579%" y="415.50"></text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (11 samples, 0.18%)</title><rect x="99.8079%" y="389" width="0.1761%" height="15" fill="rgb(219,138,53)" fg:x="6235" fg:w="11"/><text x="100.0579%" y="399.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (11 samples, 0.18%)</title><rect x="99.8079%" y="373" width="0.1761%" height="15" fill="rgb(211,51,23)" fg:x="6235" fg:w="11"/><text x="100.0579%" y="383.50"></text></g><g><title>all (6,247 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(247,221,28)" fg:x="0" fg:w="6247"/><text x="0.2500%" y="783.50"></text></g><g><title>`0x7FFC030C8D9C (6,229 samples, 99.71%)</title><rect x="0.2881%" y="757" width="99.7119%" height="15" fill="rgb(251,222,45)" fg:x="18" fg:w="6229"/><text x="0.5381%" y="767.50">`0x7FFC030C8D9C</text></g><g><title>`0x7FFC022EE8D7 (6,229 samples, 99.71%)</title><rect x="0.2881%" y="741" width="99.7119%" height="15" fill="rgb(217,162,53)" fg:x="18" fg:w="6229"/><text x="0.5381%" y="751.50">`0x7FFC022EE8D7</text></g><g><title>kaori.exe`__scrt_common_main_seh() (6,224 samples, 99.63%)</title><rect x="0.3682%" y="725" width="99.6318%" height="15" fill="rgb(229,93,14)" fg:x="23" fg:w="6224"/><text x="0.6182%" y="735.50">kaori.exe`__scrt_common_main_seh()</text></g><g><title>kaori.exe`invoke_main() (6,218 samples, 99.54%)</title><rect x="0.4642%" y="709" width="99.5358%" height="15" fill="rgb(209,67,49)" fg:x="29" fg:w="6218"/><text x="0.7142%" y="719.50">kaori.exe`invoke_main()</text></g><g><title>kaori.exe`main (6,218 samples, 99.54%)</title><rect x="0.4642%" y="693" width="99.5358%" height="15" fill="rgb(213,87,29)" fg:x="29" fg:w="6218"/><text x="0.7142%" y="703.50">kaori.exe`main</text></g><g><title>kaori.exe`std::rt::lang_start_internal (6,218 samples, 99.54%)</title><rect x="0.4642%" y="677" width="99.5358%" height="15" fill="rgb(205,151,52)" fg:x="29" fg:w="6218"/><text x="0.7142%" y="687.50">kaori.exe`std::rt::lang_start_internal</text></g><g><title>kaori.exe`std::panic::catch_unwind (6,218 samples, 99.54%)</title><rect x="0.4642%" y="661" width="99.5358%" height="15" fill="rgb(253,215,39)" fg:x="29" fg:w="6218"/><text x="0.7142%" y="671.50">kaori.exe`std::panic::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind (6,218 samples, 99.54%)</title><rect x="0.4642%" y="645" width="99.5358%" height="15" fill="rgb(221,220,41)" fg:x="29" fg:w="6218"/><text x="0.7142%" y="655.50">kaori.exe`std::panicking::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind::do_call (6,218 samples, 99.54%)</title><rect x="0.4642%" y="629" width="99.5358%" height="15" fill="rgb(218,133,21)" fg:x="29" fg:w="6218"/><text x="0.7142%" y="639.50">kaori.exe`std::panicking::catch_unwind::do_call</text></g><g><title>kaori.exe`std::rt::lang_start_internal::closure$0 (6,218 samples, 99.54%)</title><rect x="0.4642%" y="613" width="99.5358%" height="15" fill="rgb(221,193,43)" fg:x="29" fg:w="6218"/><text x="0.7142%" y="623.50">kaori.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (6,218 samples, 99.54%)</title><rect x="0.4642%" y="597" width="99.5358%" height="15" fill="rgb(240,128,52)" fg:x="29" fg:w="6218"/><text x="0.7142%" y="607.50">kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (6,218 samples, 99.54%)</title><rect x="0.4642%" y="581" width="99.5358%" height="15" fill="rgb(253,114,12)" fg:x="29" fg:w="6218"/><text x="0.7142%" y="591.50">kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>kaori.exe`kaori::main (6,218 samples, 99.54%)</title><rect x="0.4642%" y="565" width="99.5358%" height="15" fill="rgb(215,223,47)" fg:x="29" fg:w="6218"/><text x="0.7142%" y="575.50">kaori.exe`kaori::main</text></g><g><title>kaori.exe`std::fs::read_to_string(ref$ (1 samples, 0.02%)</title><rect x="99.9840%" y="549" width="0.0160%" height="15" fill="rgb(248,225,23)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="559.50"></text></g><g><title>kaori.exe`std::fs::read_to_string::inner (1 samples, 0.02%)</title><rect x="99.9840%" y="533" width="0.0160%" height="15" fill="rgb(250,108,0)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="543.50"></text></g><g><title>kaori.exe`std::fs::File::open (1 samples, 0.02%)</title><rect x="99.9840%" y="517" width="0.0160%" height="15" fill="rgb(228,208,7)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="527.50"></text></g><g><title>kaori.exe`std::fs::OpenOptions::open (1 samples, 0.02%)</title><rect x="99.9840%" y="501" width="0.0160%" height="15" fill="rgb(244,45,10)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="511.50"></text></g><g><title>kaori.exe`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="99.9840%" y="485" width="0.0160%" height="15" fill="rgb(207,125,25)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="495.50"></text></g><g><title>kaori.exe`std::sys::fs::windows::File::open (1 samples, 0.02%)</title><rect x="99.9840%" y="469" width="0.0160%" height="15" fill="rgb(210,195,18)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="479.50"></text></g><g><title>kaori.exe`core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="99.9840%" y="453" width="0.0160%" height="15" fill="rgb(249,80,12)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="463.50"></text></g><g><title>kaori.exe`core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="99.9840%" y="437" width="0.0160%" height="15" fill="rgb(221,65,9)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="447.50"></text></g><g><title>kaori.exe`alloc::raw_vec::impl$3::drop (1 samples, 0.02%)</title><rect x="99.9840%" y="421" width="0.0160%" height="15" fill="rgb(235,49,36)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="431.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner::deallocate (1 samples, 0.02%)</title><rect x="99.9840%" y="405" width="0.0160%" height="15" fill="rgb(225,32,20)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="415.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner::current_memory (1 samples, 0.02%)</title><rect x="99.9840%" y="389" width="0.0160%" height="15" fill="rgb(215,141,46)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="399.50"></text></g><g><title>kaori.exe`std::sys::fs::windows::File::open_native (1 samples, 0.02%)</title><rect x="99.9840%" y="373" width="0.0160%" height="15" fill="rgb(250,160,47)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="383.50"></text></g><g><title>kaori.exe`std::os::windows::io::handle::impl$13::try_from (1 samples, 0.02%)</title><rect x="99.9840%" y="357" width="0.0160%" height="15" fill="rgb(216,222,40)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="367.50"></text></g><g><title>kaori.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (1 samples, 0.02%)</title><rect x="99.9840%" y="341" width="0.0160%" height="15" fill="rgb(234,217,39)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="351.50"></text></g><g><title>`0x7FFC009F45C7 (1 samples, 0.02%)</title><rect x="99.9840%" y="325" width="0.0160%" height="15" fill="rgb(207,178,40)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="335.50"></text></g><g><title>`0x7FFC009F2CD7 (1 samples, 0.02%)</title><rect x="99.9840%" y="309" width="0.0160%" height="15" fill="rgb(221,136,13)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="319.50"></text></g><g><title>`0x7FFC03223CD4 (1 samples, 0.02%)</title><rect x="99.9840%" y="293" width="0.0160%" height="15" fill="rgb(249,199,10)" fg:x="6246" fg:w="1"/><text x="100.2340%" y="303.50"></text></g></svg></svg>