<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="6662"><g><title>`0x7FFC03192BC1 (1 samples, 0.02%)</title><rect x="0.0000%" y="485" width="0.0150%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>`0x7FFC0316FCD5 (1 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0150%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>`0x7FFC0316FD57 (1 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0150%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>`0x7FFC03225264 (1 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0150%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>`0x7FFC03193441 (1 samples, 0.02%)</title><rect x="0.0150%" y="485" width="0.0150%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2650%" y="495.50"></text></g><g><title>`0x7FFC0315F1CB (1 samples, 0.02%)</title><rect x="0.0150%" y="469" width="0.0150%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2650%" y="479.50"></text></g><g><title>`0x7FFC0315F271 (1 samples, 0.02%)</title><rect x="0.0150%" y="453" width="0.0150%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2650%" y="463.50"></text></g><g><title>`0x7FFC0315F39A (1 samples, 0.02%)</title><rect x="0.0150%" y="437" width="0.0150%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2650%" y="447.50"></text></g><g><title>`0x7FFC0315F4D3 (1 samples, 0.02%)</title><rect x="0.0150%" y="421" width="0.0150%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2650%" y="431.50"></text></g><g><title>`0x7FFC0315F5B2 (1 samples, 0.02%)</title><rect x="0.0150%" y="405" width="0.0150%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2650%" y="415.50"></text></g><g><title>`0x7FFC031DE0B9 (1 samples, 0.02%)</title><rect x="0.0150%" y="389" width="0.0150%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2650%" y="399.50"></text></g><g><title>`0x7FFC0315F770 (1 samples, 0.02%)</title><rect x="0.0150%" y="373" width="0.0150%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2650%" y="383.50"></text></g><g><title>`0x7FFC0315F8D2 (1 samples, 0.02%)</title><rect x="0.0150%" y="357" width="0.0150%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2650%" y="367.50"></text></g><g><title>`0x7FFC03225FE4 (1 samples, 0.02%)</title><rect x="0.0150%" y="341" width="0.0150%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.2650%" y="351.50"></text></g><g><title>`0x7FFC03193578 (1 samples, 0.02%)</title><rect x="0.0300%" y="485" width="0.0150%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.2800%" y="495.50"></text></g><g><title>`0x7FFC030C2CD3 (1 samples, 0.02%)</title><rect x="0.0300%" y="469" width="0.0150%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.2800%" y="479.50"></text></g><g><title>`0x7FFC030C48FF (1 samples, 0.02%)</title><rect x="0.0300%" y="453" width="0.0150%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.2800%" y="463.50"></text></g><g><title>`0x7FFC030C53BA (1 samples, 0.02%)</title><rect x="0.0300%" y="437" width="0.0150%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.2800%" y="447.50"></text></g><g><title>`0x7FFC03226BC4 (1 samples, 0.02%)</title><rect x="0.0300%" y="421" width="0.0150%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.2800%" y="431.50"></text></g><g><title>`0x7FFC03193B40 (1 samples, 0.02%)</title><rect x="0.0450%" y="485" width="0.0150%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.2950%" y="495.50"></text></g><g><title>`0x7FFC031B6694 (1 samples, 0.02%)</title><rect x="0.0450%" y="469" width="0.0150%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.2950%" y="479.50"></text></g><g><title>`0x7FFC0312E1BA (1 samples, 0.02%)</title><rect x="0.0450%" y="453" width="0.0150%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.2950%" y="463.50"></text></g><g><title>`0x7FFC030E4A29 (1 samples, 0.02%)</title><rect x="0.0450%" y="437" width="0.0150%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.2950%" y="447.50"></text></g><g><title>`0x7FFC030E4463 (1 samples, 0.02%)</title><rect x="0.0450%" y="421" width="0.0150%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.2950%" y="431.50"></text></g><g><title>`0x7FFC030E3518 (1 samples, 0.02%)</title><rect x="0.0450%" y="405" width="0.0150%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="0.2950%" y="415.50"></text></g><g><title>`0x7FFC0312D42E (1 samples, 0.02%)</title><rect x="0.0600%" y="373" width="0.0150%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="1"/><text x="0.3100%" y="383.50"></text></g><g><title>`0x7FFC0312D9EB (1 samples, 0.02%)</title><rect x="0.0600%" y="357" width="0.0150%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="1"/><text x="0.3100%" y="367.50"></text></g><g><title>`0x7FFC03223734 (1 samples, 0.02%)</title><rect x="0.0600%" y="341" width="0.0150%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="1"/><text x="0.3100%" y="351.50"></text></g><g><title>`0x7FFC0310BABE (1 samples, 0.02%)</title><rect x="0.0751%" y="357" width="0.0150%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="0.3251%" y="367.50"></text></g><g><title>`0x7FFC0310D8EE (1 samples, 0.02%)</title><rect x="0.0751%" y="341" width="0.0150%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="0.3251%" y="351.50"></text></g><g><title>`0x7FFC0312D001 (1 samples, 0.02%)</title><rect x="0.0751%" y="325" width="0.0150%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="1"/><text x="0.3251%" y="335.50"></text></g><g><title>`0x7FFC0312D64C (1 samples, 0.02%)</title><rect x="0.0751%" y="309" width="0.0150%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="1"/><text x="0.3251%" y="319.50"></text></g><g><title>`0x7FFC0312E13D (1 samples, 0.02%)</title><rect x="0.0751%" y="293" width="0.0150%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="0.3251%" y="303.50"></text></g><g><title>`0x7FFC030E24BB (1 samples, 0.02%)</title><rect x="0.0751%" y="277" width="0.0150%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="0.3251%" y="287.50"></text></g><g><title>`0x7FFC0320CB98 (1 samples, 0.02%)</title><rect x="0.0751%" y="261" width="0.0150%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.3251%" y="271.50"></text></g><g><title>`0x7FFC030D2EC9 (1 samples, 0.02%)</title><rect x="0.0901%" y="341" width="0.0150%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="1"/><text x="0.3401%" y="351.50"></text></g><g><title>`0x7FFC0310A4F2 (4 samples, 0.06%)</title><rect x="0.0600%" y="421" width="0.0600%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="4"/><text x="0.3100%" y="431.50"></text></g><g><title>`0x7FFC0310EF05 (4 samples, 0.06%)</title><rect x="0.0600%" y="405" width="0.0600%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="4"/><text x="0.3100%" y="415.50"></text></g><g><title>`0x7FFC0312D001 (4 samples, 0.06%)</title><rect x="0.0600%" y="389" width="0.0600%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="4"/><text x="0.3100%" y="399.50"></text></g><g><title>`0x7FFC0312D5A8 (3 samples, 0.05%)</title><rect x="0.0751%" y="373" width="0.0450%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="3"/><text x="0.3251%" y="383.50"></text></g><g><title>`0x7FFC0310BC32 (2 samples, 0.03%)</title><rect x="0.0901%" y="357" width="0.0300%" height="15" fill="rgb(231,60,39)" fg:x="6" fg:w="2"/><text x="0.3401%" y="367.50"></text></g><g><title>`0x7FFC030D2FEF (1 samples, 0.02%)</title><rect x="0.1051%" y="341" width="0.0150%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="1"/><text x="0.3551%" y="351.50"></text></g><g><title>`0x7FFC009E46E2 (1 samples, 0.02%)</title><rect x="0.1201%" y="293" width="0.0150%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="0.3701%" y="303.50"></text></g><g><title>`0x7FFC009E2B9F (1 samples, 0.02%)</title><rect x="0.1201%" y="277" width="0.0150%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="1"/><text x="0.3701%" y="287.50"></text></g><g><title>`0x7FFC031A9B7C (1 samples, 0.02%)</title><rect x="0.1201%" y="261" width="0.0150%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="0.3701%" y="271.50"></text></g><g><title>`0x7FFC031A9CB2 (1 samples, 0.02%)</title><rect x="0.1201%" y="245" width="0.0150%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="0.3701%" y="255.50"></text></g><g><title>`0x7FFC03226CE4 (1 samples, 0.02%)</title><rect x="0.1201%" y="229" width="0.0150%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="1"/><text x="0.3701%" y="239.50"></text></g><g><title>`0x7FFC009E4856 (1 samples, 0.02%)</title><rect x="0.1351%" y="293" width="0.0150%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="1"/><text x="0.3851%" y="303.50"></text></g><g><title>`0x7FFC030F56F8 (1 samples, 0.02%)</title><rect x="0.1351%" y="277" width="0.0150%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="1"/><text x="0.3851%" y="287.50"></text></g><g><title>`0x7FFC030F6102 (1 samples, 0.02%)</title><rect x="0.1351%" y="261" width="0.0150%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="1"/><text x="0.3851%" y="271.50"></text></g><g><title>`0x7FFC03223B74 (1 samples, 0.02%)</title><rect x="0.1351%" y="245" width="0.0150%" height="15" fill="rgb(225,35,8)" fg:x="9" fg:w="1"/><text x="0.3851%" y="255.50"></text></g><g><title>`0x7FFC00AB3FFD (3 samples, 0.05%)</title><rect x="0.1201%" y="309" width="0.0450%" height="15" fill="rgb(250,213,24)" fg:x="8" fg:w="3"/><text x="0.3701%" y="319.50"></text></g><g><title>`0x7FFC009E4A63 (1 samples, 0.02%)</title><rect x="0.1501%" y="293" width="0.0150%" height="15" fill="rgb(247,123,22)" fg:x="10" fg:w="1"/><text x="0.4001%" y="303.50"></text></g><g><title>`0x7FFC009E3678 (1 samples, 0.02%)</title><rect x="0.1501%" y="277" width="0.0150%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="1"/><text x="0.4001%" y="287.50"></text></g><g><title>`0x7FFC009E351F (1 samples, 0.02%)</title><rect x="0.1501%" y="261" width="0.0150%" height="15" fill="rgb(231,145,46)" fg:x="10" fg:w="1"/><text x="0.4001%" y="271.50"></text></g><g><title>`0x7FFC009E320C (1 samples, 0.02%)</title><rect x="0.1501%" y="245" width="0.0150%" height="15" fill="rgb(251,118,11)" fg:x="10" fg:w="1"/><text x="0.4001%" y="255.50"></text></g><g><title>`0x7FFC032297CD (1 samples, 0.02%)</title><rect x="0.1501%" y="229" width="0.0150%" height="15" fill="rgb(217,147,25)" fg:x="10" fg:w="1"/><text x="0.4001%" y="239.50"></text></g><g><title>`0x7FFC0318B934 (8 samples, 0.12%)</title><rect x="0.0600%" y="469" width="0.1201%" height="15" fill="rgb(247,81,37)" fg:x="4" fg:w="8"/><text x="0.3100%" y="479.50"></text></g><g><title>`0x7FFC030D4FB0 (8 samples, 0.12%)</title><rect x="0.0600%" y="453" width="0.1201%" height="15" fill="rgb(209,12,38)" fg:x="4" fg:w="8"/><text x="0.3100%" y="463.50"></text></g><g><title>`0x7FFC0310A190 (8 samples, 0.12%)</title><rect x="0.0600%" y="437" width="0.1201%" height="15" fill="rgb(227,1,9)" fg:x="4" fg:w="8"/><text x="0.3100%" y="447.50"></text></g><g><title>`0x7FFC0310A584 (4 samples, 0.06%)</title><rect x="0.1201%" y="421" width="0.0600%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="4"/><text x="0.3701%" y="431.50"></text></g><g><title>`0x7FFC030C7883 (4 samples, 0.06%)</title><rect x="0.1201%" y="405" width="0.0600%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="4"/><text x="0.3701%" y="415.50"></text></g><g><title>`0x7FFC030C8726 (4 samples, 0.06%)</title><rect x="0.1201%" y="389" width="0.0600%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="4"/><text x="0.3701%" y="399.50"></text></g><g><title>`0x7FFC030C86FA (4 samples, 0.06%)</title><rect x="0.1201%" y="373" width="0.0600%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="4"/><text x="0.3701%" y="383.50"></text></g><g><title>`0x7FFC031337AC (4 samples, 0.06%)</title><rect x="0.1201%" y="357" width="0.0600%" height="15" fill="rgb(234,67,33)" fg:x="8" fg:w="4"/><text x="0.3701%" y="367.50"></text></g><g><title>`0x7FFC0313483E (4 samples, 0.06%)</title><rect x="0.1201%" y="341" width="0.0600%" height="15" fill="rgb(247,98,35)" fg:x="8" fg:w="4"/><text x="0.3701%" y="351.50"></text></g><g><title>`0x7FFC03220EDE (4 samples, 0.06%)</title><rect x="0.1201%" y="325" width="0.0600%" height="15" fill="rgb(247,138,52)" fg:x="8" fg:w="4"/><text x="0.3701%" y="335.50"></text></g><g><title>`0x7FFC00AB40AF (1 samples, 0.02%)</title><rect x="0.1651%" y="309" width="0.0150%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="1"/><text x="0.4151%" y="319.50"></text></g><g><title>`0x7FFC00A5E87D (1 samples, 0.02%)</title><rect x="0.1651%" y="293" width="0.0150%" height="15" fill="rgb(246,177,23)" fg:x="11" fg:w="1"/><text x="0.4151%" y="303.50"></text></g><g><title>`0x7FFC00A5F060 (1 samples, 0.02%)</title><rect x="0.1651%" y="277" width="0.0150%" height="15" fill="rgb(230,62,27)" fg:x="11" fg:w="1"/><text x="0.4151%" y="287.50"></text></g><g><title>`0x7FFC03105613 (1 samples, 0.02%)</title><rect x="0.1651%" y="261" width="0.0150%" height="15" fill="rgb(216,154,8)" fg:x="11" fg:w="1"/><text x="0.4151%" y="271.50"></text></g><g><title>`0x7FFC031057A1 (1 samples, 0.02%)</title><rect x="0.1651%" y="245" width="0.0150%" height="15" fill="rgb(244,35,45)" fg:x="11" fg:w="1"/><text x="0.4151%" y="255.50"></text></g><g><title>`0x7FFC03105482 (1 samples, 0.02%)</title><rect x="0.1651%" y="229" width="0.0150%" height="15" fill="rgb(251,115,12)" fg:x="11" fg:w="1"/><text x="0.4151%" y="239.50"></text></g><g><title>`0x7FFC03226CE4 (1 samples, 0.02%)</title><rect x="0.1651%" y="213" width="0.0150%" height="15" fill="rgb(240,54,50)" fg:x="11" fg:w="1"/><text x="0.4151%" y="223.50"></text></g><g><title>`0x7FFC0318B9A9 (1 samples, 0.02%)</title><rect x="0.1801%" y="469" width="0.0150%" height="15" fill="rgb(233,84,52)" fg:x="12" fg:w="1"/><text x="0.4301%" y="479.50"></text></g><g><title>`0x7FFC031316CC (1 samples, 0.02%)</title><rect x="0.1801%" y="453" width="0.0150%" height="15" fill="rgb(207,117,47)" fg:x="12" fg:w="1"/><text x="0.4301%" y="463.50"></text></g><g><title>`0x7FFC030D6DA2 (1 samples, 0.02%)</title><rect x="0.1801%" y="437" width="0.0150%" height="15" fill="rgb(249,43,39)" fg:x="12" fg:w="1"/><text x="0.4301%" y="447.50"></text></g><g><title>`0x7FFC03184D9A (1 samples, 0.02%)</title><rect x="0.1801%" y="421" width="0.0150%" height="15" fill="rgb(209,38,44)" fg:x="12" fg:w="1"/><text x="0.4301%" y="431.50"></text></g><g><title>`0x7FFC03194345 (10 samples, 0.15%)</title><rect x="0.0600%" y="485" width="0.1501%" height="15" fill="rgb(236,212,23)" fg:x="4" fg:w="10"/><text x="0.3100%" y="495.50"></text></g><g><title>`0x7FFC0318B9D9 (1 samples, 0.02%)</title><rect x="0.1951%" y="469" width="0.0150%" height="15" fill="rgb(242,79,21)" fg:x="13" fg:w="1"/><text x="0.4451%" y="479.50"></text></g><g><title>`0x7FFC030D433E (1 samples, 0.02%)</title><rect x="0.1951%" y="453" width="0.0150%" height="15" fill="rgb(211,96,35)" fg:x="13" fg:w="1"/><text x="0.4451%" y="463.50"></text></g><g><title>`0x7FFC03223474 (1 samples, 0.02%)</title><rect x="0.1951%" y="437" width="0.0150%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="1"/><text x="0.4451%" y="447.50"></text></g><g><title>`0x7FFC0319444F (2 samples, 0.03%)</title><rect x="0.2101%" y="485" width="0.0300%" height="15" fill="rgb(211,81,21)" fg:x="14" fg:w="2"/><text x="0.4601%" y="495.50"></text></g><g><title>`0x7FFC0310BABE (2 samples, 0.03%)</title><rect x="0.2101%" y="469" width="0.0300%" height="15" fill="rgb(208,190,38)" fg:x="14" fg:w="2"/><text x="0.4601%" y="479.50"></text></g><g><title>`0x7FFC0310D8EE (2 samples, 0.03%)</title><rect x="0.2101%" y="453" width="0.0300%" height="15" fill="rgb(235,213,38)" fg:x="14" fg:w="2"/><text x="0.4601%" y="463.50"></text></g><g><title>`0x7FFC0312D001 (2 samples, 0.03%)</title><rect x="0.2101%" y="437" width="0.0300%" height="15" fill="rgb(237,122,38)" fg:x="14" fg:w="2"/><text x="0.4601%" y="447.50"></text></g><g><title>`0x7FFC0312D42E (2 samples, 0.03%)</title><rect x="0.2101%" y="421" width="0.0300%" height="15" fill="rgb(244,218,35)" fg:x="14" fg:w="2"/><text x="0.4601%" y="431.50"></text></g><g><title>`0x7FFC0312D9EB (2 samples, 0.03%)</title><rect x="0.2101%" y="405" width="0.0300%" height="15" fill="rgb(240,68,47)" fg:x="14" fg:w="2"/><text x="0.4601%" y="415.50"></text></g><g><title>`0x7FFC03223734 (2 samples, 0.03%)</title><rect x="0.2101%" y="389" width="0.0300%" height="15" fill="rgb(210,16,53)" fg:x="14" fg:w="2"/><text x="0.4601%" y="399.50"></text></g><g><title>`0x7FFC03194495 (1 samples, 0.02%)</title><rect x="0.2402%" y="485" width="0.0150%" height="15" fill="rgb(235,124,12)" fg:x="16" fg:w="1"/><text x="0.4902%" y="495.50"></text></g><g><title>`0x7FFC030C780F (1 samples, 0.02%)</title><rect x="0.2402%" y="469" width="0.0150%" height="15" fill="rgb(224,169,11)" fg:x="16" fg:w="1"/><text x="0.4902%" y="479.50"></text></g><g><title>`0x7FFC030C7936 (1 samples, 0.02%)</title><rect x="0.2402%" y="453" width="0.0150%" height="15" fill="rgb(250,166,2)" fg:x="16" fg:w="1"/><text x="0.4902%" y="463.50"></text></g><g><title>`0x7FFC030C78F5 (1 samples, 0.02%)</title><rect x="0.2402%" y="437" width="0.0150%" height="15" fill="rgb(242,216,29)" fg:x="16" fg:w="1"/><text x="0.4902%" y="447.50"></text></g><g><title>`0x7FFC0313145B (1 samples, 0.02%)</title><rect x="0.2402%" y="421" width="0.0150%" height="15" fill="rgb(230,116,27)" fg:x="16" fg:w="1"/><text x="0.4902%" y="431.50"></text></g><g><title>`0x7FFC03131FA5 (1 samples, 0.02%)</title><rect x="0.2402%" y="405" width="0.0150%" height="15" fill="rgb(228,99,48)" fg:x="16" fg:w="1"/><text x="0.4902%" y="415.50"></text></g><g><title>`0x7FFC0313135D (1 samples, 0.02%)</title><rect x="0.2402%" y="389" width="0.0150%" height="15" fill="rgb(253,11,6)" fg:x="16" fg:w="1"/><text x="0.4902%" y="399.50"></text></g><g><title>`0x7FFC03223BB4 (1 samples, 0.02%)</title><rect x="0.2402%" y="373" width="0.0150%" height="15" fill="rgb(247,143,39)" fg:x="16" fg:w="1"/><text x="0.4902%" y="383.50"></text></g><g><title>`0x7FFC00866E0D (1 samples, 0.02%)</title><rect x="0.2552%" y="373" width="0.0150%" height="15" fill="rgb(236,97,10)" fg:x="17" fg:w="1"/><text x="0.5052%" y="383.50"></text></g><g><title>`0x7FFC00902986 (1 samples, 0.02%)</title><rect x="0.2552%" y="357" width="0.0150%" height="15" fill="rgb(233,208,19)" fg:x="17" fg:w="1"/><text x="0.5052%" y="367.50"></text></g><g><title>`0x7FFC00902FBC (1 samples, 0.02%)</title><rect x="0.2552%" y="341" width="0.0150%" height="15" fill="rgb(216,164,2)" fg:x="17" fg:w="1"/><text x="0.5052%" y="351.50"></text></g><g><title>`0x7FFC00903332 (1 samples, 0.02%)</title><rect x="0.2552%" y="325" width="0.0150%" height="15" fill="rgb(220,129,5)" fg:x="17" fg:w="1"/><text x="0.5052%" y="335.50"></text></g><g><title>`0x7FFC009030F3 (1 samples, 0.02%)</title><rect x="0.2552%" y="309" width="0.0150%" height="15" fill="rgb(242,17,10)" fg:x="17" fg:w="1"/><text x="0.5052%" y="319.50"></text></g><g><title>`0x7FFC009EDD0F (1 samples, 0.02%)</title><rect x="0.2552%" y="293" width="0.0150%" height="15" fill="rgb(242,107,0)" fg:x="17" fg:w="1"/><text x="0.5052%" y="303.50"></text></g><g><title>`0x7FFC030D4FB0 (1 samples, 0.02%)</title><rect x="0.2552%" y="277" width="0.0150%" height="15" fill="rgb(251,28,31)" fg:x="17" fg:w="1"/><text x="0.5052%" y="287.50"></text></g><g><title>`0x7FFC0310A190 (1 samples, 0.02%)</title><rect x="0.2552%" y="261" width="0.0150%" height="15" fill="rgb(233,223,10)" fg:x="17" fg:w="1"/><text x="0.5052%" y="271.50"></text></g><g><title>`0x7FFC0310A384 (1 samples, 0.02%)</title><rect x="0.2552%" y="245" width="0.0150%" height="15" fill="rgb(215,21,27)" fg:x="17" fg:w="1"/><text x="0.5052%" y="255.50"></text></g><g><title>`0x7FFC0313B507 (1 samples, 0.02%)</title><rect x="0.2552%" y="229" width="0.0150%" height="15" fill="rgb(232,23,21)" fg:x="17" fg:w="1"/><text x="0.5052%" y="239.50"></text></g><g><title>`0x7FFC031E4571 (1 samples, 0.02%)</title><rect x="0.2552%" y="213" width="0.0150%" height="15" fill="rgb(244,5,23)" fg:x="17" fg:w="1"/><text x="0.5052%" y="223.50"></text></g><g><title>`0x7FFC031E45E8 (1 samples, 0.02%)</title><rect x="0.2552%" y="197" width="0.0150%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="1"/><text x="0.5052%" y="207.50"></text></g><g><title>`0x7FFC031EA731 (1 samples, 0.02%)</title><rect x="0.2552%" y="181" width="0.0150%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="1"/><text x="0.5052%" y="191.50"></text></g><g><title>`0x7FFC031EDE83 (1 samples, 0.02%)</title><rect x="0.2552%" y="165" width="0.0150%" height="15" fill="rgb(212,68,19)" fg:x="17" fg:w="1"/><text x="0.5052%" y="175.50"></text></g><g><title>`0x7FFC031EDE64 (1 samples, 0.02%)</title><rect x="0.2552%" y="149" width="0.0150%" height="15" fill="rgb(240,187,13)" fg:x="17" fg:w="1"/><text x="0.5052%" y="159.50"></text></g><g><title>`0x7FFC030C2A2E (19 samples, 0.29%)</title><rect x="0.0000%" y="533" width="0.2852%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="19"/><text x="0.2500%" y="543.50"></text></g><g><title>`0x7FFC031924DA (19 samples, 0.29%)</title><rect x="0.0000%" y="517" width="0.2852%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="19"/><text x="0.2500%" y="527.50"></text></g><g><title>`0x7FFC031926F0 (19 samples, 0.29%)</title><rect x="0.0000%" y="501" width="0.2852%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="19"/><text x="0.2500%" y="511.50"></text></g><g><title>`0x7FFC03194566 (2 samples, 0.03%)</title><rect x="0.2552%" y="485" width="0.0300%" height="15" fill="rgb(247,173,49)" fg:x="17" fg:w="2"/><text x="0.5052%" y="495.50"></text></g><g><title>`0x7FFC030C8726 (2 samples, 0.03%)</title><rect x="0.2552%" y="469" width="0.0300%" height="15" fill="rgb(224,114,35)" fg:x="17" fg:w="2"/><text x="0.5052%" y="479.50"></text></g><g><title>`0x7FFC030C8726 (2 samples, 0.03%)</title><rect x="0.2552%" y="453" width="0.0300%" height="15" fill="rgb(245,159,27)" fg:x="17" fg:w="2"/><text x="0.5052%" y="463.50"></text></g><g><title>`0x7FFC030C86FA (2 samples, 0.03%)</title><rect x="0.2552%" y="437" width="0.0300%" height="15" fill="rgb(245,172,44)" fg:x="17" fg:w="2"/><text x="0.5052%" y="447.50"></text></g><g><title>`0x7FFC031337AC (2 samples, 0.03%)</title><rect x="0.2552%" y="421" width="0.0300%" height="15" fill="rgb(236,23,11)" fg:x="17" fg:w="2"/><text x="0.5052%" y="431.50"></text></g><g><title>`0x7FFC0313483E (2 samples, 0.03%)</title><rect x="0.2552%" y="405" width="0.0300%" height="15" fill="rgb(205,117,38)" fg:x="17" fg:w="2"/><text x="0.5052%" y="415.50"></text></g><g><title>`0x7FFC03220EDE (2 samples, 0.03%)</title><rect x="0.2552%" y="389" width="0.0300%" height="15" fill="rgb(237,72,25)" fg:x="17" fg:w="2"/><text x="0.5052%" y="399.50"></text></g><g><title>`0x7FFC00866E26 (1 samples, 0.02%)</title><rect x="0.2702%" y="373" width="0.0150%" height="15" fill="rgb(244,70,9)" fg:x="18" fg:w="1"/><text x="0.5202%" y="383.50"></text></g><g><title>`0x7FFC008CAD56 (1 samples, 0.02%)</title><rect x="0.2702%" y="357" width="0.0150%" height="15" fill="rgb(217,125,39)" fg:x="18" fg:w="1"/><text x="0.5202%" y="367.50"></text></g><g><title>`0x7FFC0085A776 (1 samples, 0.02%)</title><rect x="0.2702%" y="341" width="0.0150%" height="15" fill="rgb(235,36,10)" fg:x="18" fg:w="1"/><text x="0.5202%" y="351.50"></text></g><g><title>`0x7FFC0085A906 (1 samples, 0.02%)</title><rect x="0.2702%" y="325" width="0.0150%" height="15" fill="rgb(251,123,47)" fg:x="18" fg:w="1"/><text x="0.5202%" y="335.50"></text></g><g><title>`0x7FFC0085AE4A (1 samples, 0.02%)</title><rect x="0.2702%" y="309" width="0.0150%" height="15" fill="rgb(221,13,13)" fg:x="18" fg:w="1"/><text x="0.5202%" y="319.50"></text></g><g><title>`0x7FFC0085AFD1 (1 samples, 0.02%)</title><rect x="0.2702%" y="293" width="0.0150%" height="15" fill="rgb(238,131,9)" fg:x="18" fg:w="1"/><text x="0.5202%" y="303.50"></text></g><g><title>`0x7FFC0085A266 (1 samples, 0.02%)</title><rect x="0.2702%" y="277" width="0.0150%" height="15" fill="rgb(211,50,8)" fg:x="18" fg:w="1"/><text x="0.5202%" y="287.50"></text></g><g><title>`0x7FFC009E657D (1 samples, 0.02%)</title><rect x="0.2702%" y="261" width="0.0150%" height="15" fill="rgb(245,182,24)" fg:x="18" fg:w="1"/><text x="0.5202%" y="271.50"></text></g><g><title>`0x7FFC009E77DE (1 samples, 0.02%)</title><rect x="0.2702%" y="245" width="0.0150%" height="15" fill="rgb(242,14,37)" fg:x="18" fg:w="1"/><text x="0.5202%" y="255.50"></text></g><g><title>`0x7FFC03223474 (1 samples, 0.02%)</title><rect x="0.2702%" y="229" width="0.0150%" height="15" fill="rgb(246,228,12)" fg:x="18" fg:w="1"/><text x="0.5202%" y="239.50"></text></g><g><title>`0x7FFC030C8D70 (1 samples, 0.02%)</title><rect x="0.2852%" y="533" width="0.0150%" height="15" fill="rgb(213,55,15)" fg:x="19" fg:w="1"/><text x="0.5352%" y="543.50"></text></g><g><title>`0x7FFC0312FF81 (1 samples, 0.02%)</title><rect x="0.3002%" y="453" width="0.0150%" height="15" fill="rgb(209,9,3)" fg:x="20" fg:w="1"/><text x="0.5502%" y="463.50"></text></g><g><title>`0x7FFC03130659 (1 samples, 0.02%)</title><rect x="0.3002%" y="437" width="0.0150%" height="15" fill="rgb(230,59,30)" fg:x="20" fg:w="1"/><text x="0.5502%" y="447.50"></text></g><g><title>`0x7FFC03130BB0 (1 samples, 0.02%)</title><rect x="0.3002%" y="421" width="0.0150%" height="15" fill="rgb(209,121,21)" fg:x="20" fg:w="1"/><text x="0.5502%" y="431.50"></text></g><g><title>`0x7FFC03130EE3 (1 samples, 0.02%)</title><rect x="0.3002%" y="405" width="0.0150%" height="15" fill="rgb(220,109,13)" fg:x="20" fg:w="1"/><text x="0.5502%" y="415.50"></text></g><g><title>`0x7FFC032239D4 (1 samples, 0.02%)</title><rect x="0.3002%" y="389" width="0.0150%" height="15" fill="rgb(232,18,1)" fg:x="20" fg:w="1"/><text x="0.5502%" y="399.50"></text></g><g><title>`0x7FFC0312FCDA (2 samples, 0.03%)</title><rect x="0.3002%" y="469" width="0.0300%" height="15" fill="rgb(215,41,42)" fg:x="20" fg:w="2"/><text x="0.5502%" y="479.50"></text></g><g><title>`0x7FFC031300AC (1 samples, 0.02%)</title><rect x="0.3152%" y="453" width="0.0150%" height="15" fill="rgb(224,123,36)" fg:x="21" fg:w="1"/><text x="0.5652%" y="463.50"></text></g><g><title>`0x7FFC031324CC (1 samples, 0.02%)</title><rect x="0.3152%" y="437" width="0.0150%" height="15" fill="rgb(240,125,3)" fg:x="21" fg:w="1"/><text x="0.5652%" y="447.50"></text></g><g><title>`0x7FFC0312D42E (1 samples, 0.02%)</title><rect x="0.3152%" y="421" width="0.0150%" height="15" fill="rgb(205,98,50)" fg:x="21" fg:w="1"/><text x="0.5652%" y="431.50"></text></g><g><title>`0x7FFC0312D9EB (1 samples, 0.02%)</title><rect x="0.3152%" y="405" width="0.0150%" height="15" fill="rgb(205,185,37)" fg:x="21" fg:w="1"/><text x="0.5652%" y="415.50"></text></g><g><title>`0x7FFC03223734 (1 samples, 0.02%)</title><rect x="0.3152%" y="389" width="0.0150%" height="15" fill="rgb(238,207,15)" fg:x="21" fg:w="1"/><text x="0.5652%" y="399.50"></text></g><g><title>`0x7FFC030D2EC9 (1 samples, 0.02%)</title><rect x="0.3302%" y="453" width="0.0150%" height="15" fill="rgb(213,199,42)" fg:x="22" fg:w="1"/><text x="0.5802%" y="463.50"></text></g><g><title>`0x7FFC0313E4B1 (4 samples, 0.06%)</title><rect x="0.3002%" y="501" width="0.0600%" height="15" fill="rgb(235,201,11)" fg:x="20" fg:w="4"/><text x="0.5502%" y="511.50"></text></g><g><title>`0x7FFC0313D270 (4 samples, 0.06%)</title><rect x="0.3002%" y="485" width="0.0600%" height="15" fill="rgb(207,46,11)" fg:x="20" fg:w="4"/><text x="0.5502%" y="495.50"></text></g><g><title>`0x7FFC0312FDA1 (2 samples, 0.03%)</title><rect x="0.3302%" y="469" width="0.0300%" height="15" fill="rgb(241,35,35)" fg:x="22" fg:w="2"/><text x="0.5802%" y="479.50"></text></g><g><title>`0x7FFC030D36D6 (1 samples, 0.02%)</title><rect x="0.3452%" y="453" width="0.0150%" height="15" fill="rgb(243,32,47)" fg:x="23" fg:w="1"/><text x="0.5952%" y="463.50"></text></g><g><title>`0x7FFC030E0E23 (1 samples, 0.02%)</title><rect x="0.3452%" y="437" width="0.0150%" height="15" fill="rgb(247,202,23)" fg:x="23" fg:w="1"/><text x="0.5952%" y="447.50"></text></g><g><title>`0x7FFC030E1B30 (1 samples, 0.02%)</title><rect x="0.3452%" y="421" width="0.0150%" height="15" fill="rgb(219,102,11)" fg:x="23" fg:w="1"/><text x="0.5952%" y="431.50"></text></g><g><title>`0x7FFC030E3767 (1 samples, 0.02%)</title><rect x="0.3452%" y="405" width="0.0150%" height="15" fill="rgb(243,110,44)" fg:x="23" fg:w="1"/><text x="0.5952%" y="415.50"></text></g><g><title>`0x7FFC008C32B2 (1 samples, 0.02%)</title><rect x="0.3603%" y="485" width="0.0150%" height="15" fill="rgb(222,74,54)" fg:x="24" fg:w="1"/><text x="0.6103%" y="495.50"></text></g><g><title>kaori.exe`pre_c_initialization() (1 samples, 0.02%)</title><rect x="0.3603%" y="469" width="0.0150%" height="15" fill="rgb(216,99,12)" fg:x="24" fg:w="1"/><text x="0.6103%" y="479.50"></text></g><g><title>`0x7FFC0088B678 (1 samples, 0.02%)</title><rect x="0.3603%" y="453" width="0.0150%" height="15" fill="rgb(226,22,26)" fg:x="24" fg:w="1"/><text x="0.6103%" y="463.50"></text></g><g><title>`0x7FFC0088BBB9 (1 samples, 0.02%)</title><rect x="0.3603%" y="437" width="0.0150%" height="15" fill="rgb(217,163,10)" fg:x="24" fg:w="1"/><text x="0.6103%" y="447.50"></text></g><g><title>`0x7FFC00A878C0 (1 samples, 0.02%)</title><rect x="0.3603%" y="421" width="0.0150%" height="15" fill="rgb(213,25,53)" fg:x="24" fg:w="1"/><text x="0.6103%" y="431.50"></text></g><g><title>`0x7FFC0310A443 (1 samples, 0.02%)</title><rect x="0.3753%" y="373" width="0.0150%" height="15" fill="rgb(252,105,26)" fg:x="25" fg:w="1"/><text x="0.6253%" y="383.50"></text></g><g><title>`0x7FFC0313B507 (1 samples, 0.02%)</title><rect x="0.3753%" y="357" width="0.0150%" height="15" fill="rgb(220,39,43)" fg:x="25" fg:w="1"/><text x="0.6253%" y="367.50"></text></g><g><title>`0x7FFC031E4571 (1 samples, 0.02%)</title><rect x="0.3753%" y="341" width="0.0150%" height="15" fill="rgb(229,68,48)" fg:x="25" fg:w="1"/><text x="0.6253%" y="351.50"></text></g><g><title>`0x7FFC0313032F (1 samples, 0.02%)</title><rect x="0.3903%" y="341" width="0.0150%" height="15" fill="rgb(252,8,32)" fg:x="26" fg:w="1"/><text x="0.6403%" y="351.50"></text></g><g><title>`0x7FFC03130BB0 (1 samples, 0.02%)</title><rect x="0.3903%" y="325" width="0.0150%" height="15" fill="rgb(223,20,43)" fg:x="26" fg:w="1"/><text x="0.6403%" y="335.50"></text></g><g><title>`0x7FFC03130EE3 (1 samples, 0.02%)</title><rect x="0.3903%" y="309" width="0.0150%" height="15" fill="rgb(229,81,49)" fg:x="26" fg:w="1"/><text x="0.6403%" y="319.50"></text></g><g><title>`0x7FFC032239D4 (1 samples, 0.02%)</title><rect x="0.3903%" y="293" width="0.0150%" height="15" fill="rgb(236,28,36)" fg:x="26" fg:w="1"/><text x="0.6403%" y="303.50"></text></g><g><title>`0x7FFC0312D486 (1 samples, 0.02%)</title><rect x="0.4053%" y="309" width="0.0150%" height="15" fill="rgb(249,185,26)" fg:x="27" fg:w="1"/><text x="0.6553%" y="319.50"></text></g><g><title>`0x7FFC030D4E10 (1 samples, 0.02%)</title><rect x="0.4053%" y="293" width="0.0150%" height="15" fill="rgb(249,174,33)" fg:x="27" fg:w="1"/><text x="0.6553%" y="303.50"></text></g><g><title>`0x7FFC031324CC (2 samples, 0.03%)</title><rect x="0.4053%" y="325" width="0.0300%" height="15" fill="rgb(233,201,37)" fg:x="27" fg:w="2"/><text x="0.6553%" y="335.50"></text></g><g><title>`0x7FFC0312D5A8 (1 samples, 0.02%)</title><rect x="0.4203%" y="309" width="0.0150%" height="15" fill="rgb(221,78,26)" fg:x="28" fg:w="1"/><text x="0.6703%" y="319.50"></text></g><g><title>`0x7FFC0310BABE (1 samples, 0.02%)</title><rect x="0.4203%" y="293" width="0.0150%" height="15" fill="rgb(250,127,30)" fg:x="28" fg:w="1"/><text x="0.6703%" y="303.50"></text></g><g><title>`0x7FFC0310D8EE (1 samples, 0.02%)</title><rect x="0.4203%" y="277" width="0.0150%" height="15" fill="rgb(230,49,44)" fg:x="28" fg:w="1"/><text x="0.6703%" y="287.50"></text></g><g><title>`0x7FFC0312D001 (1 samples, 0.02%)</title><rect x="0.4203%" y="261" width="0.0150%" height="15" fill="rgb(229,67,23)" fg:x="28" fg:w="1"/><text x="0.6703%" y="271.50"></text></g><g><title>`0x7FFC0312D5A8 (1 samples, 0.02%)</title><rect x="0.4203%" y="245" width="0.0150%" height="15" fill="rgb(249,83,47)" fg:x="28" fg:w="1"/><text x="0.6703%" y="255.50"></text></g><g><title>`0x7FFC0310BABE (1 samples, 0.02%)</title><rect x="0.4203%" y="229" width="0.0150%" height="15" fill="rgb(215,43,3)" fg:x="28" fg:w="1"/><text x="0.6703%" y="239.50"></text></g><g><title>`0x7FFC0310C455 (1 samples, 0.02%)</title><rect x="0.4203%" y="213" width="0.0150%" height="15" fill="rgb(238,154,13)" fg:x="28" fg:w="1"/><text x="0.6703%" y="223.50"></text></g><g><title>`0x7FFC030D6DA2 (1 samples, 0.02%)</title><rect x="0.4203%" y="197" width="0.0150%" height="15" fill="rgb(219,56,2)" fg:x="28" fg:w="1"/><text x="0.6703%" y="207.50"></text></g><g><title>`0x7FFC03184DE6 (1 samples, 0.02%)</title><rect x="0.4203%" y="181" width="0.0150%" height="15" fill="rgb(233,0,4)" fg:x="28" fg:w="1"/><text x="0.6703%" y="191.50"></text></g><g><title>`0x7FFC008F0046 (5 samples, 0.08%)</title><rect x="0.3753%" y="485" width="0.0751%" height="15" fill="rgb(235,30,7)" fg:x="25" fg:w="5"/><text x="0.6253%" y="495.50"></text></g><g><title>`0x7FFC008D553D (5 samples, 0.08%)</title><rect x="0.3753%" y="469" width="0.0751%" height="15" fill="rgb(250,79,13)" fg:x="25" fg:w="5"/><text x="0.6253%" y="479.50"></text></g><g><title>`0x7FFC0086423B (5 samples, 0.08%)</title><rect x="0.3753%" y="453" width="0.0751%" height="15" fill="rgb(211,146,34)" fg:x="25" fg:w="5"/><text x="0.6253%" y="463.50"></text></g><g><title>`0x7FFC008C6225 (5 samples, 0.08%)</title><rect x="0.3753%" y="437" width="0.0751%" height="15" fill="rgb(228,22,38)" fg:x="25" fg:w="5"/><text x="0.6253%" y="447.50"></text></g><g><title>`0x7FFC009EDD0F (5 samples, 0.08%)</title><rect x="0.3753%" y="421" width="0.0751%" height="15" fill="rgb(235,168,5)" fg:x="25" fg:w="5"/><text x="0.6253%" y="431.50"></text></g><g><title>`0x7FFC030D4FB0 (5 samples, 0.08%)</title><rect x="0.3753%" y="405" width="0.0751%" height="15" fill="rgb(221,155,16)" fg:x="25" fg:w="5"/><text x="0.6253%" y="415.50"></text></g><g><title>`0x7FFC0310A190 (5 samples, 0.08%)</title><rect x="0.3753%" y="389" width="0.0751%" height="15" fill="rgb(215,215,53)" fg:x="25" fg:w="5"/><text x="0.6253%" y="399.50"></text></g><g><title>`0x7FFC0310A510 (4 samples, 0.06%)</title><rect x="0.3903%" y="373" width="0.0600%" height="15" fill="rgb(223,4,10)" fg:x="26" fg:w="4"/><text x="0.6403%" y="383.50"></text></g><g><title>`0x7FFC0312FDB4 (4 samples, 0.06%)</title><rect x="0.3903%" y="357" width="0.0600%" height="15" fill="rgb(234,103,6)" fg:x="26" fg:w="4"/><text x="0.6403%" y="367.50"></text></g><g><title>`0x7FFC0313039D (3 samples, 0.05%)</title><rect x="0.4053%" y="341" width="0.0450%" height="15" fill="rgb(227,97,0)" fg:x="27" fg:w="3"/><text x="0.6553%" y="351.50"></text></g><g><title>`0x7FFC031324E9 (1 samples, 0.02%)</title><rect x="0.4353%" y="325" width="0.0150%" height="15" fill="rgb(234,150,53)" fg:x="29" fg:w="1"/><text x="0.6853%" y="335.50"></text></g><g><title>`0x7FFC03223414 (1 samples, 0.02%)</title><rect x="0.4353%" y="309" width="0.0150%" height="15" fill="rgb(228,201,54)" fg:x="29" fg:w="1"/><text x="0.6853%" y="319.50"></text></g><g><title>kaori.exe`kaori::program::run_lexical_analysis (1 samples, 0.02%)</title><rect x="0.4503%" y="277" width="0.0150%" height="15" fill="rgb(222,22,37)" fg:x="30" fg:w="1"/><text x="0.7003%" y="287.50"></text></g><g><title>kaori.exe`kaori::lexer::lexer::Lexer::tokenize (1 samples, 0.02%)</title><rect x="0.4503%" y="261" width="0.0150%" height="15" fill="rgb(237,53,32)" fg:x="30" fg:w="1"/><text x="0.7003%" y="271.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;tuple$ (1 samples, 0.02%)</title><rect x="0.4503%" y="245" width="0.0150%" height="15" fill="rgb(233,25,53)" fg:x="30" fg:w="1"/><text x="0.7003%" y="255.50"></text></g><g><title>kaori.exe`kaori::lexer::lexer::Lexer::get_next_token (1 samples, 0.02%)</title><rect x="0.4503%" y="229" width="0.0150%" height="15" fill="rgb(210,40,34)" fg:x="30" fg:w="1"/><text x="0.7003%" y="239.50"></text></g><g><title>kaori.exe`kaori::lexer::lexer::Lexer::identifier_or_keyword (1 samples, 0.02%)</title><rect x="0.4503%" y="213" width="0.0150%" height="15" fill="rgb(241,220,44)" fg:x="30" fg:w="1"/><text x="0.7003%" y="223.50"></text></g><g><title>kaori.exe`core::str::traits::impl$1::eq(ref$&lt;str$&gt;, ref$ (1 samples, 0.02%)</title><rect x="0.4503%" y="197" width="0.0150%" height="15" fill="rgb(235,28,35)" fg:x="30" fg:w="1"/><text x="0.7003%" y="207.50"></text></g><g><title>kaori.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (1 samples, 0.02%)</title><rect x="0.4503%" y="181" width="0.0150%" height="15" fill="rgb(210,56,17)" fg:x="30" fg:w="1"/><text x="0.7003%" y="191.50"></text></g><g><title>kaori.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 0.02%)</title><rect x="0.4503%" y="165" width="0.0150%" height="15" fill="rgb(224,130,29)" fg:x="30" fg:w="1"/><text x="0.7003%" y="175.50"></text></g><g><title>kaori.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 0.02%)</title><rect x="0.4503%" y="149" width="0.0150%" height="15" fill="rgb(235,212,8)" fg:x="30" fg:w="1"/><text x="0.7003%" y="159.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (2 samples, 0.03%)</title><rect x="0.4503%" y="309" width="0.0300%" height="15" fill="rgb(223,33,50)" fg:x="30" fg:w="2"/><text x="0.7003%" y="319.50"></text></g><g><title>kaori.exe`kaori::program::compile_source_code (2 samples, 0.03%)</title><rect x="0.4503%" y="293" width="0.0300%" height="15" fill="rgb(219,149,13)" fg:x="30" fg:w="2"/><text x="0.7003%" y="303.50"></text></g><g><title>kaori.exe`kaori::program::run_semantic_analysis(ref_mut$&lt;slice2$ (1 samples, 0.02%)</title><rect x="0.4653%" y="277" width="0.0150%" height="15" fill="rgb(250,156,29)" fg:x="31" fg:w="1"/><text x="0.7153%" y="287.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (1 samples, 0.02%)</title><rect x="0.4653%" y="261" width="0.0150%" height="15" fill="rgb(216,193,19)" fg:x="31" fg:w="1"/><text x="0.7153%" y="271.50"></text></g><g><title>kaori.exe`kaori::semantic::type_checker::TypeChecker::type_check(ref$&lt;slice2$ (1 samples, 0.02%)</title><rect x="0.4653%" y="245" width="0.0150%" height="15" fill="rgb(216,135,14)" fg:x="31" fg:w="1"/><text x="0.7153%" y="255.50"></text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;enum2$ (353 samples, 5.30%)</title><rect x="56.6797%" y="261" width="5.2987%" height="15" fill="rgb(241,47,5)" fg:x="3776" fg:w="353"/><text x="56.9297%" y="271.50">kaori...</text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;enum2$ (353 samples, 5.30%)</title><rect x="56.6797%" y="245" width="5.2987%" height="15" fill="rgb(233,42,35)" fg:x="3776" fg:w="353"/><text x="56.9297%" y="255.50">kaori...</text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;enum2$ (353 samples, 5.30%)</title><rect x="56.6797%" y="229" width="5.2987%" height="15" fill="rgb(231,13,6)" fg:x="3776" fg:w="353"/><text x="56.9297%" y="239.50">kaori...</text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_slice (29 samples, 0.44%)</title><rect x="64.2600%" y="197" width="0.4353%" height="15" fill="rgb(207,181,40)" fg:x="4281" fg:w="29"/><text x="64.5100%" y="207.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::get_value (160 samples, 2.40%)</title><rect x="62.3987%" y="245" width="2.4017%" height="15" fill="rgb(254,173,49)" fg:x="4157" fg:w="160"/><text x="62.6487%" y="255.50">ka..</text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (36 samples, 0.54%)</title><rect x="64.2600%" y="229" width="0.5404%" height="15" fill="rgb(221,1,38)" fg:x="4281" fg:w="36"/><text x="64.5100%" y="239.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (36 samples, 0.54%)</title><rect x="64.2600%" y="213" width="0.5404%" height="15" fill="rgb(206,124,46)" fg:x="4281" fg:w="36"/><text x="64.5100%" y="223.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (7 samples, 0.11%)</title><rect x="64.6953%" y="197" width="0.1051%" height="15" fill="rgb(249,21,11)" fg:x="4310" fg:w="7"/><text x="64.9453%" y="207.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::instruction_add (294 samples, 4.41%)</title><rect x="61.9784%" y="261" width="4.4131%" height="15" fill="rgb(222,201,40)" fg:x="4129" fg:w="294"/><text x="62.2284%" y="271.50">kaori..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::set_value (106 samples, 1.59%)</title><rect x="64.8004%" y="245" width="1.5911%" height="15" fill="rgb(235,61,29)" fg:x="4317" fg:w="106"/><text x="65.0504%" y="255.50"></text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (106 samples, 1.59%)</title><rect x="64.8004%" y="229" width="1.5911%" height="15" fill="rgb(219,207,3)" fg:x="4317" fg:w="106"/><text x="65.0504%" y="239.50"></text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (106 samples, 1.59%)</title><rect x="64.8004%" y="213" width="1.5911%" height="15" fill="rgb(222,56,46)" fg:x="4317" fg:w="106"/><text x="65.0504%" y="223.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (106 samples, 1.59%)</title><rect x="64.8004%" y="197" width="1.5911%" height="15" fill="rgb(239,76,54)" fg:x="4317" fg:w="106"/><text x="65.0504%" y="207.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::instruction_conditional_jump (510 samples, 7.66%)</title><rect x="66.3915%" y="261" width="7.6554%" height="15" fill="rgb(231,124,27)" fg:x="4423" fg:w="510"/><text x="66.6415%" y="271.50">kaori.exe`..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::get_value (4 samples, 0.06%)</title><rect x="73.9868%" y="245" width="0.0600%" height="15" fill="rgb(249,195,6)" fg:x="4929" fg:w="4"/><text x="74.2368%" y="255.50"></text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (4 samples, 0.06%)</title><rect x="73.9868%" y="229" width="0.0600%" height="15" fill="rgb(237,174,47)" fg:x="4929" fg:w="4"/><text x="74.2368%" y="239.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (4 samples, 0.06%)</title><rect x="73.9868%" y="213" width="0.0600%" height="15" fill="rgb(206,201,31)" fg:x="4929" fg:w="4"/><text x="74.2368%" y="223.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (4 samples, 0.06%)</title><rect x="73.9868%" y="197" width="0.0600%" height="15" fill="rgb(231,57,52)" fg:x="4929" fg:w="4"/><text x="74.2368%" y="207.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::instruction_equal (23 samples, 0.35%)</title><rect x="74.0468%" y="261" width="0.3452%" height="15" fill="rgb(248,177,22)" fg:x="4933" fg:w="23"/><text x="74.2968%" y="271.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::instruction_jump (143 samples, 2.15%)</title><rect x="74.3921%" y="261" width="2.1465%" height="15" fill="rgb(215,211,37)" fg:x="4956" fg:w="143"/><text x="74.6421%" y="271.50">k..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::get_value (88 samples, 1.32%)</title><rect x="79.4206%" y="245" width="1.3209%" height="15" fill="rgb(241,128,51)" fg:x="5291" fg:w="88"/><text x="79.6706%" y="255.50"></text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (4 samples, 0.06%)</title><rect x="80.6815%" y="229" width="0.0600%" height="15" fill="rgb(227,165,31)" fg:x="5375" fg:w="4"/><text x="80.9315%" y="239.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (4 samples, 0.06%)</title><rect x="80.6815%" y="213" width="0.0600%" height="15" fill="rgb(228,167,24)" fg:x="5375" fg:w="4"/><text x="80.9315%" y="223.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (4 samples, 0.06%)</title><rect x="80.6815%" y="197" width="0.0600%" height="15" fill="rgb(228,143,12)" fg:x="5375" fg:w="4"/><text x="80.9315%" y="207.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::instruction_less (526 samples, 7.90%)</title><rect x="76.5386%" y="261" width="7.8955%" height="15" fill="rgb(249,149,8)" fg:x="5099" fg:w="526"/><text x="76.7886%" y="271.50">kaori.exe`k..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::set_value (246 samples, 3.69%)</title><rect x="80.7415%" y="245" width="3.6926%" height="15" fill="rgb(243,35,44)" fg:x="5379" fg:w="246"/><text x="80.9915%" y="255.50">kaor..</text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (246 samples, 3.69%)</title><rect x="80.7415%" y="229" width="3.6926%" height="15" fill="rgb(246,89,9)" fg:x="5379" fg:w="246"/><text x="80.9915%" y="239.50">kaor..</text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (246 samples, 3.69%)</title><rect x="80.7415%" y="213" width="3.6926%" height="15" fill="rgb(233,213,13)" fg:x="5379" fg:w="246"/><text x="80.9915%" y="223.50">kaor..</text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_mut_slice (246 samples, 3.69%)</title><rect x="80.7415%" y="197" width="3.6926%" height="15" fill="rgb(233,141,41)" fg:x="5379" fg:w="246"/><text x="80.9915%" y="207.50">kaor..</text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_mut_ptr (246 samples, 3.69%)</title><rect x="80.7415%" y="181" width="3.6926%" height="15" fill="rgb(239,167,4)" fg:x="5379" fg:w="246"/><text x="80.9915%" y="191.50">kaor..</text></g><g><title>kaori.exe`alloc::raw_vec::RawVec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::ptr (246 samples, 3.69%)</title><rect x="80.7415%" y="165" width="3.6926%" height="15" fill="rgb(209,217,16)" fg:x="5379" fg:w="246"/><text x="80.9915%" y="175.50">kaor..</text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (246 samples, 3.69%)</title><rect x="80.7415%" y="149" width="3.6926%" height="15" fill="rgb(219,88,35)" fg:x="5379" fg:w="246"/><text x="80.9915%" y="159.50">kaor..</text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (246 samples, 3.69%)</title><rect x="80.7415%" y="133" width="3.6926%" height="15" fill="rgb(220,193,23)" fg:x="5379" fg:w="246"/><text x="80.9915%" y="143.50">kaor..</text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_slice (36 samples, 0.54%)</title><rect x="86.5356%" y="197" width="0.5404%" height="15" fill="rgb(230,90,52)" fg:x="5765" fg:w="36"/><text x="86.7856%" y="207.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::get_value (65 samples, 0.98%)</title><rect x="86.4155%" y="245" width="0.9757%" height="15" fill="rgb(252,106,19)" fg:x="5757" fg:w="65"/><text x="86.6655%" y="255.50"></text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (57 samples, 0.86%)</title><rect x="86.5356%" y="229" width="0.8556%" height="15" fill="rgb(206,74,20)" fg:x="5765" fg:w="57"/><text x="86.7856%" y="239.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (57 samples, 0.86%)</title><rect x="86.5356%" y="213" width="0.8556%" height="15" fill="rgb(230,138,44)" fg:x="5765" fg:w="57"/><text x="86.7856%" y="223.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (21 samples, 0.32%)</title><rect x="87.0760%" y="197" width="0.3152%" height="15" fill="rgb(235,182,43)" fg:x="5801" fg:w="21"/><text x="87.3260%" y="207.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_mut_slice (753 samples, 11.30%)</title><rect x="87.3912%" y="197" width="11.3029%" height="15" fill="rgb(242,16,51)" fg:x="5822" fg:w="753"/><text x="87.6412%" y="207.50">kaori.exe`alloc::..</text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_mut_ptr (746 samples, 11.20%)</title><rect x="87.4962%" y="181" width="11.1978%" height="15" fill="rgb(248,9,4)" fg:x="5829" fg:w="746"/><text x="87.7462%" y="191.50">kaori.exe`alloc:..</text></g><g><title>kaori.exe`alloc::raw_vec::RawVec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::ptr (746 samples, 11.20%)</title><rect x="87.4962%" y="165" width="11.1978%" height="15" fill="rgb(210,31,22)" fg:x="5829" fg:w="746"/><text x="87.7462%" y="175.50">kaori.exe`alloc:..</text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (746 samples, 11.20%)</title><rect x="87.4962%" y="149" width="11.1978%" height="15" fill="rgb(239,54,39)" fg:x="5829" fg:w="746"/><text x="87.7462%" y="159.50">kaori.exe`alloc:..</text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (746 samples, 11.20%)</title><rect x="87.4962%" y="133" width="11.1978%" height="15" fill="rgb(230,99,41)" fg:x="5829" fg:w="746"/><text x="87.7462%" y="143.50">kaori.exe`alloc:..</text></g><g><title>kaori.exe`kaori::program::run_vm (6,628 samples, 99.49%)</title><rect x="0.4803%" y="309" width="99.4896%" height="15" fill="rgb(253,106,12)" fg:x="32" fg:w="6628"/><text x="0.7303%" y="319.50">kaori.exe`kaori::program::run_vm</text></g><g><title>kaori.exe`core::ptr::drop_in_place(enum2$&lt;core::result::Result&lt;tuple$ (6,628 samples, 99.49%)</title><rect x="0.4803%" y="293" width="99.4896%" height="15" fill="rgb(213,46,41)" fg:x="32" fg:w="6628"/><text x="0.7303%" y="303.50">kaori.exe`core::ptr::drop_in_place(enum2$&lt;core::result::Result&lt;tuple$</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::run (6,628 samples, 99.49%)</title><rect x="0.4803%" y="277" width="99.4896%" height="15" fill="rgb(215,133,35)" fg:x="32" fg:w="6628"/><text x="0.7303%" y="287.50">kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::run</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::instruction_move (1,035 samples, 15.54%)</title><rect x="84.4341%" y="261" width="15.5359%" height="15" fill="rgb(213,28,5)" fg:x="5625" fg:w="1035"/><text x="84.6841%" y="271.50">kaori.exe`kaori::virtual..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::set_value (838 samples, 12.58%)</title><rect x="87.3912%" y="245" width="12.5788%" height="15" fill="rgb(215,77,49)" fg:x="5822" fg:w="838"/><text x="87.6412%" y="255.50">kaori.exe`kaori::vi..</text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (838 samples, 12.58%)</title><rect x="87.3912%" y="229" width="12.5788%" height="15" fill="rgb(248,100,22)" fg:x="5822" fg:w="838"/><text x="87.6412%" y="239.50">kaori.exe`alloc::ve..</text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (838 samples, 12.58%)</title><rect x="87.3912%" y="213" width="12.5788%" height="15" fill="rgb(208,67,9)" fg:x="5822" fg:w="838"/><text x="87.6412%" y="223.50">kaori.exe`core::sli..</text></g><g><title>kaori.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (85 samples, 1.28%)</title><rect x="98.6941%" y="197" width="1.2759%" height="15" fill="rgb(219,133,21)" fg:x="6575" fg:w="85"/><text x="98.9441%" y="207.50"></text></g><g><title>kaori.exe`kaori::program::run_program (6,631 samples, 99.53%)</title><rect x="0.4503%" y="325" width="99.5347%" height="15" fill="rgb(246,46,29)" fg:x="30" fg:w="6631"/><text x="0.7003%" y="335.50">kaori.exe`kaori::program::run_program</text></g><g><title>kaori.exe`std::io::stdio::_print (1 samples, 0.02%)</title><rect x="99.9700%" y="309" width="0.0150%" height="15" fill="rgb(246,185,52)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="319.50"></text></g><g><title>kaori.exe`std::io::stdio::print_to (1 samples, 0.02%)</title><rect x="99.9700%" y="293" width="0.0150%" height="15" fill="rgb(252,136,11)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="303.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$16::write_fmt (1 samples, 0.02%)</title><rect x="99.9700%" y="277" width="0.0150%" height="15" fill="rgb(219,138,53)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="287.50"></text></g><g><title>kaori.exe`std::io::Write::write_fmt (1 samples, 0.02%)</title><rect x="99.9700%" y="261" width="0.0150%" height="15" fill="rgb(211,51,23)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="271.50"></text></g><g><title>kaori.exe`std::io::default_write_fmt (1 samples, 0.02%)</title><rect x="99.9700%" y="245" width="0.0150%" height="15" fill="rgb(247,221,28)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="255.50"></text></g><g><title>kaori.exe`core::fmt::write (1 samples, 0.02%)</title><rect x="99.9700%" y="229" width="0.0150%" height="15" fill="rgb(251,222,45)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="239.50"></text></g><g><title>kaori.exe`std::io::default_write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (1 samples, 0.02%)</title><rect x="99.9700%" y="213" width="0.0150%" height="15" fill="rgb(217,162,53)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="223.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$19::write_all (1 samples, 0.02%)</title><rect x="99.9700%" y="197" width="0.0150%" height="15" fill="rgb(229,93,14)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="207.50"></text></g><g><title>kaori.exe`std::sync::reentrant_lock::impl$11::deref (1 samples, 0.02%)</title><rect x="99.9700%" y="181" width="0.0150%" height="15" fill="rgb(209,67,49)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="191.50"></text></g><g><title>kaori.exe`std::io::buffered::linewritershim::impl$1::write_all (1 samples, 0.02%)</title><rect x="99.9700%" y="165" width="0.0150%" height="15" fill="rgb(213,87,29)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="175.50"></text></g><g><title>kaori.exe`core::result::impl$27::branch (1 samples, 0.02%)</title><rect x="99.9700%" y="149" width="0.0150%" height="15" fill="rgb(205,151,52)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="159.50"></text></g><g><title>kaori.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (1 samples, 0.02%)</title><rect x="99.9700%" y="133" width="0.0150%" height="15" fill="rgb(253,215,39)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="143.50"></text></g><g><title>kaori.exe`std::io::stdio::impl$1::write (1 samples, 0.02%)</title><rect x="99.9700%" y="117" width="0.0150%" height="15" fill="rgb(221,220,41)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="127.50"></text></g><g><title>kaori.exe`std::io::stdio::handle_ebadf (1 samples, 0.02%)</title><rect x="99.9700%" y="101" width="0.0150%" height="15" fill="rgb(218,133,21)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="111.50"></text></g><g><title>kaori.exe`std::sys::stdio::windows::write (1 samples, 0.02%)</title><rect x="99.9700%" y="85" width="0.0150%" height="15" fill="rgb(221,193,43)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="95.50"></text></g><g><title>kaori.exe`std::sys::stdio::windows::write_console_utf16 (1 samples, 0.02%)</title><rect x="99.9700%" y="69" width="0.0150%" height="15" fill="rgb(240,128,52)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="79.50"></text></g><g><title>kaori.exe`std::sys::stdio::windows::write_valid_utf8_to_console (1 samples, 0.02%)</title><rect x="99.9700%" y="53" width="0.0150%" height="15" fill="rgb(253,114,12)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="63.50"></text></g><g><title>`0x7FFC022F1FC0 (1 samples, 0.02%)</title><rect x="99.9700%" y="37" width="0.0150%" height="15" fill="rgb(215,223,47)" fg:x="6660" fg:w="1"/><text x="100.2200%" y="47.50"></text></g><g><title>all (6,662 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(248,225,23)" fg:x="0" fg:w="6662"/><text x="0.2500%" y="559.50"></text></g><g><title>`0x7FFC030C8D9C (6,642 samples, 99.70%)</title><rect x="0.3002%" y="533" width="99.6998%" height="15" fill="rgb(250,108,0)" fg:x="20" fg:w="6642"/><text x="0.5502%" y="543.50">`0x7FFC030C8D9C</text></g><g><title>`0x7FFC022EE8D7 (6,642 samples, 99.70%)</title><rect x="0.3002%" y="517" width="99.6998%" height="15" fill="rgb(228,208,7)" fg:x="20" fg:w="6642"/><text x="0.5502%" y="527.50">`0x7FFC022EE8D7</text></g><g><title>kaori.exe`__scrt_common_main_seh() (6,638 samples, 99.64%)</title><rect x="0.3603%" y="501" width="99.6397%" height="15" fill="rgb(244,45,10)" fg:x="24" fg:w="6638"/><text x="0.6103%" y="511.50">kaori.exe`__scrt_common_main_seh()</text></g><g><title>kaori.exe`invoke_main() (6,632 samples, 99.55%)</title><rect x="0.4503%" y="485" width="99.5497%" height="15" fill="rgb(207,125,25)" fg:x="30" fg:w="6632"/><text x="0.7003%" y="495.50">kaori.exe`invoke_main()</text></g><g><title>kaori.exe`main (6,632 samples, 99.55%)</title><rect x="0.4503%" y="469" width="99.5497%" height="15" fill="rgb(210,195,18)" fg:x="30" fg:w="6632"/><text x="0.7003%" y="479.50">kaori.exe`main</text></g><g><title>kaori.exe`std::rt::lang_start_internal (6,632 samples, 99.55%)</title><rect x="0.4503%" y="453" width="99.5497%" height="15" fill="rgb(249,80,12)" fg:x="30" fg:w="6632"/><text x="0.7003%" y="463.50">kaori.exe`std::rt::lang_start_internal</text></g><g><title>kaori.exe`std::panic::catch_unwind (6,632 samples, 99.55%)</title><rect x="0.4503%" y="437" width="99.5497%" height="15" fill="rgb(221,65,9)" fg:x="30" fg:w="6632"/><text x="0.7003%" y="447.50">kaori.exe`std::panic::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind (6,632 samples, 99.55%)</title><rect x="0.4503%" y="421" width="99.5497%" height="15" fill="rgb(235,49,36)" fg:x="30" fg:w="6632"/><text x="0.7003%" y="431.50">kaori.exe`std::panicking::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind::do_call (6,632 samples, 99.55%)</title><rect x="0.4503%" y="405" width="99.5497%" height="15" fill="rgb(225,32,20)" fg:x="30" fg:w="6632"/><text x="0.7003%" y="415.50">kaori.exe`std::panicking::catch_unwind::do_call</text></g><g><title>kaori.exe`std::rt::lang_start_internal::closure$0 (6,632 samples, 99.55%)</title><rect x="0.4503%" y="389" width="99.5497%" height="15" fill="rgb(215,141,46)" fg:x="30" fg:w="6632"/><text x="0.7003%" y="399.50">kaori.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (6,632 samples, 99.55%)</title><rect x="0.4503%" y="373" width="99.5497%" height="15" fill="rgb(250,160,47)" fg:x="30" fg:w="6632"/><text x="0.7003%" y="383.50">kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (6,632 samples, 99.55%)</title><rect x="0.4503%" y="357" width="99.5497%" height="15" fill="rgb(216,222,40)" fg:x="30" fg:w="6632"/><text x="0.7003%" y="367.50">kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>kaori.exe`kaori::main (6,632 samples, 99.55%)</title><rect x="0.4503%" y="341" width="99.5497%" height="15" fill="rgb(234,217,39)" fg:x="30" fg:w="6632"/><text x="0.7003%" y="351.50">kaori.exe`kaori::main</text></g><g><title>kaori.exe`std::fs::read_to_string(ref$ (1 samples, 0.02%)</title><rect x="99.9850%" y="325" width="0.0150%" height="15" fill="rgb(207,178,40)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="335.50"></text></g><g><title>kaori.exe`std::fs::read_to_string::inner (1 samples, 0.02%)</title><rect x="99.9850%" y="309" width="0.0150%" height="15" fill="rgb(221,136,13)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="319.50"></text></g><g><title>kaori.exe`std::fs::File::open (1 samples, 0.02%)</title><rect x="99.9850%" y="293" width="0.0150%" height="15" fill="rgb(249,199,10)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="303.50"></text></g><g><title>kaori.exe`std::fs::OpenOptions::open (1 samples, 0.02%)</title><rect x="99.9850%" y="277" width="0.0150%" height="15" fill="rgb(249,222,13)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="287.50"></text></g><g><title>kaori.exe`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="99.9850%" y="261" width="0.0150%" height="15" fill="rgb(244,185,38)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="271.50"></text></g><g><title>kaori.exe`std::sys::fs::windows::File::open (1 samples, 0.02%)</title><rect x="99.9850%" y="245" width="0.0150%" height="15" fill="rgb(236,202,9)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="255.50"></text></g><g><title>kaori.exe`core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="99.9850%" y="229" width="0.0150%" height="15" fill="rgb(250,229,37)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="239.50"></text></g><g><title>kaori.exe`core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="99.9850%" y="213" width="0.0150%" height="15" fill="rgb(206,174,23)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="223.50"></text></g><g><title>kaori.exe`alloc::raw_vec::impl$3::drop (1 samples, 0.02%)</title><rect x="99.9850%" y="197" width="0.0150%" height="15" fill="rgb(211,33,43)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="207.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner::deallocate (1 samples, 0.02%)</title><rect x="99.9850%" y="181" width="0.0150%" height="15" fill="rgb(245,58,50)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="191.50"></text></g><g><title>kaori.exe`alloc::raw_vec::RawVecInner::current_memory (1 samples, 0.02%)</title><rect x="99.9850%" y="165" width="0.0150%" height="15" fill="rgb(244,68,36)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="175.50"></text></g><g><title>kaori.exe`std::sys::fs::windows::File::open_native (1 samples, 0.02%)</title><rect x="99.9850%" y="149" width="0.0150%" height="15" fill="rgb(232,229,15)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="159.50"></text></g><g><title>kaori.exe`std::os::windows::io::handle::impl$13::try_from (1 samples, 0.02%)</title><rect x="99.9850%" y="133" width="0.0150%" height="15" fill="rgb(254,30,23)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="143.50"></text></g><g><title>kaori.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (1 samples, 0.02%)</title><rect x="99.9850%" y="117" width="0.0150%" height="15" fill="rgb(235,160,14)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="127.50"></text></g><g><title>`0x7FFC009F45C7 (1 samples, 0.02%)</title><rect x="99.9850%" y="101" width="0.0150%" height="15" fill="rgb(212,155,44)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="111.50"></text></g><g><title>`0x7FFC009F2CD7 (1 samples, 0.02%)</title><rect x="99.9850%" y="85" width="0.0150%" height="15" fill="rgb(226,2,50)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="95.50"></text></g><g><title>`0x7FFC03223CD4 (1 samples, 0.02%)</title><rect x="99.9850%" y="69" width="0.0150%" height="15" fill="rgb(234,177,6)" fg:x="6661" fg:w="1"/><text x="100.2350%" y="79.50"></text></g></svg></svg>