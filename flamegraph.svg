<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="5218"><g><title>`0x7FFC03192F11 (1 samples, 0.02%)</title><rect x="0.0000%" y="341" width="0.0192%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>`0x7FFC031717CD (1 samples, 0.02%)</title><rect x="0.0000%" y="325" width="0.0192%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>`0x7FFC0317240C (1 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0192%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>`0x7FFC03223474 (1 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0192%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>`0x7FFC03193454 (1 samples, 0.02%)</title><rect x="0.0192%" y="341" width="0.0192%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2692%" y="351.50"></text></g><g><title>`0x7FFC031DE6DE (1 samples, 0.02%)</title><rect x="0.0192%" y="325" width="0.0192%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2692%" y="335.50"></text></g><g><title>`0x7FFC031935BE (1 samples, 0.02%)</title><rect x="0.0383%" y="341" width="0.0192%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.2883%" y="351.50"></text></g><g><title>`0x7FFC031C9C73 (1 samples, 0.02%)</title><rect x="0.0383%" y="325" width="0.0192%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.2883%" y="335.50"></text></g><g><title>`0x7FFC03105613 (1 samples, 0.02%)</title><rect x="0.0383%" y="309" width="0.0192%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.2883%" y="319.50"></text></g><g><title>`0x7FFC031057A1 (1 samples, 0.02%)</title><rect x="0.0383%" y="293" width="0.0192%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.2883%" y="303.50"></text></g><g><title>`0x7FFC03105482 (1 samples, 0.02%)</title><rect x="0.0383%" y="277" width="0.0192%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.2883%" y="287.50"></text></g><g><title>`0x7FFC03226CE4 (1 samples, 0.02%)</title><rect x="0.0383%" y="261" width="0.0192%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.2883%" y="271.50"></text></g><g><title>`0x7FFC03193EBA (1 samples, 0.02%)</title><rect x="0.0575%" y="341" width="0.0192%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.3075%" y="351.50"></text></g><g><title>`0x7FFC03161C7F (1 samples, 0.02%)</title><rect x="0.0575%" y="325" width="0.0192%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.3075%" y="335.50"></text></g><g><title>`0x7FFC03161AF0 (1 samples, 0.02%)</title><rect x="0.0575%" y="309" width="0.0192%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.3075%" y="319.50"></text></g><g><title>`0x7FFC03223894 (1 samples, 0.02%)</title><rect x="0.0575%" y="293" width="0.0192%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.3075%" y="303.50"></text></g><g><title>`0x7FFC0310BABE (1 samples, 0.02%)</title><rect x="0.0767%" y="213" width="0.0192%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="0.3267%" y="223.50"></text></g><g><title>`0x7FFC0310D8EE (1 samples, 0.02%)</title><rect x="0.0767%" y="197" width="0.0192%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.3267%" y="207.50"></text></g><g><title>`0x7FFC0312D001 (1 samples, 0.02%)</title><rect x="0.0767%" y="181" width="0.0192%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="0.3267%" y="191.50"></text></g><g><title>`0x7FFC0312D5A8 (1 samples, 0.02%)</title><rect x="0.0767%" y="165" width="0.0192%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="0.3267%" y="175.50"></text></g><g><title>`0x7FFC0310B896 (1 samples, 0.02%)</title><rect x="0.0767%" y="149" width="0.0192%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="0.3267%" y="159.50"></text></g><g><title>`0x7FFC030D2EC9 (1 samples, 0.02%)</title><rect x="0.0958%" y="197" width="0.0192%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="0.3458%" y="207.50"></text></g><g><title>`0x7FFC0312D5A8 (3 samples, 0.06%)</title><rect x="0.0767%" y="229" width="0.0575%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="3"/><text x="0.3267%" y="239.50"></text></g><g><title>`0x7FFC0310BC32 (2 samples, 0.04%)</title><rect x="0.0958%" y="213" width="0.0383%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="2"/><text x="0.3458%" y="223.50"></text></g><g><title>`0x7FFC030D2EDB (1 samples, 0.02%)</title><rect x="0.1150%" y="197" width="0.0192%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.3650%" y="207.50"></text></g><g><title>`0x7FFC0310A4F2 (4 samples, 0.08%)</title><rect x="0.0767%" y="277" width="0.0767%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="4"/><text x="0.3267%" y="287.50"></text></g><g><title>`0x7FFC0310EF05 (4 samples, 0.08%)</title><rect x="0.0767%" y="261" width="0.0767%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="4"/><text x="0.3267%" y="271.50"></text></g><g><title>`0x7FFC0312D001 (4 samples, 0.08%)</title><rect x="0.0767%" y="245" width="0.0767%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="4"/><text x="0.3267%" y="255.50"></text></g><g><title>`0x7FFC0312D64C (1 samples, 0.02%)</title><rect x="0.1342%" y="229" width="0.0192%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="1"/><text x="0.3842%" y="239.50"></text></g><g><title>`0x7FFC0312E13D (1 samples, 0.02%)</title><rect x="0.1342%" y="213" width="0.0192%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="1"/><text x="0.3842%" y="223.50"></text></g><g><title>`0x7FFC030E2441 (1 samples, 0.02%)</title><rect x="0.1342%" y="197" width="0.0192%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="0.3842%" y="207.50"></text></g><g><title>`0x7FFC030E2692 (1 samples, 0.02%)</title><rect x="0.1342%" y="181" width="0.0192%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="1"/><text x="0.3842%" y="191.50"></text></g><g><title>`0x7FFC03223854 (1 samples, 0.02%)</title><rect x="0.1342%" y="165" width="0.0192%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="1"/><text x="0.3842%" y="175.50"></text></g><g><title>`0x7FFC009E4856 (1 samples, 0.02%)</title><rect x="0.1533%" y="149" width="0.0192%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="1"/><text x="0.4033%" y="159.50"></text></g><g><title>`0x7FFC030F56F8 (1 samples, 0.02%)</title><rect x="0.1533%" y="133" width="0.0192%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="1"/><text x="0.4033%" y="143.50"></text></g><g><title>`0x7FFC030F61A4 (1 samples, 0.02%)</title><rect x="0.1533%" y="117" width="0.0192%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="1"/><text x="0.4033%" y="127.50"></text></g><g><title>`0x7FFC032246A4 (1 samples, 0.02%)</title><rect x="0.1533%" y="101" width="0.0192%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="1"/><text x="0.4033%" y="111.50"></text></g><g><title>`0x7FFC00AB3FFD (2 samples, 0.04%)</title><rect x="0.1533%" y="165" width="0.0383%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="2"/><text x="0.4033%" y="175.50"></text></g><g><title>`0x7FFC009E4A63 (1 samples, 0.02%)</title><rect x="0.1725%" y="149" width="0.0192%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="0.4225%" y="159.50"></text></g><g><title>`0x7FFC009E3678 (1 samples, 0.02%)</title><rect x="0.1725%" y="133" width="0.0192%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="0.4225%" y="143.50"></text></g><g><title>`0x7FFC009E3535 (1 samples, 0.02%)</title><rect x="0.1725%" y="117" width="0.0192%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="0.4225%" y="127.50"></text></g><g><title>`0x7FFC009E2F7E (1 samples, 0.02%)</title><rect x="0.1725%" y="101" width="0.0192%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="1"/><text x="0.4225%" y="111.50"></text></g><g><title>`0x7FFC03225264 (1 samples, 0.02%)</title><rect x="0.1725%" y="85" width="0.0192%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="1"/><text x="0.4225%" y="95.50"></text></g><g><title>`0x7FFC00AB40AF (1 samples, 0.02%)</title><rect x="0.1916%" y="165" width="0.0192%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="1"/><text x="0.4416%" y="175.50"></text></g><g><title>`0x7FFC00A5E746 (1 samples, 0.02%)</title><rect x="0.1916%" y="149" width="0.0192%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="1"/><text x="0.4416%" y="159.50"></text></g><g><title>`0x7FFC03229805 (1 samples, 0.02%)</title><rect x="0.1916%" y="133" width="0.0192%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="1"/><text x="0.4416%" y="143.50"></text></g><g><title>`0x7FFC0318B934 (8 samples, 0.15%)</title><rect x="0.0767%" y="325" width="0.1533%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="8"/><text x="0.3267%" y="335.50"></text></g><g><title>`0x7FFC030D4FB0 (8 samples, 0.15%)</title><rect x="0.0767%" y="309" width="0.1533%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="8"/><text x="0.3267%" y="319.50"></text></g><g><title>`0x7FFC0310A190 (8 samples, 0.15%)</title><rect x="0.0767%" y="293" width="0.1533%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="8"/><text x="0.3267%" y="303.50"></text></g><g><title>`0x7FFC0310A584 (4 samples, 0.08%)</title><rect x="0.1533%" y="277" width="0.0767%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="4"/><text x="0.4033%" y="287.50"></text></g><g><title>`0x7FFC030C7883 (4 samples, 0.08%)</title><rect x="0.1533%" y="261" width="0.0767%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="4"/><text x="0.4033%" y="271.50"></text></g><g><title>`0x7FFC030C8726 (4 samples, 0.08%)</title><rect x="0.1533%" y="245" width="0.0767%" height="15" fill="rgb(250,213,24)" fg:x="8" fg:w="4"/><text x="0.4033%" y="255.50"></text></g><g><title>`0x7FFC030C86FA (4 samples, 0.08%)</title><rect x="0.1533%" y="229" width="0.0767%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="4"/><text x="0.4033%" y="239.50"></text></g><g><title>`0x7FFC031337AC (4 samples, 0.08%)</title><rect x="0.1533%" y="213" width="0.0767%" height="15" fill="rgb(231,138,38)" fg:x="8" fg:w="4"/><text x="0.4033%" y="223.50"></text></g><g><title>`0x7FFC0313483E (4 samples, 0.08%)</title><rect x="0.1533%" y="197" width="0.0767%" height="15" fill="rgb(231,145,46)" fg:x="8" fg:w="4"/><text x="0.4033%" y="207.50"></text></g><g><title>`0x7FFC03220EDE (4 samples, 0.08%)</title><rect x="0.1533%" y="181" width="0.0767%" height="15" fill="rgb(251,118,11)" fg:x="8" fg:w="4"/><text x="0.4033%" y="191.50"></text></g><g><title>`0x7FFC00AB40B9 (1 samples, 0.02%)</title><rect x="0.2108%" y="165" width="0.0192%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="1"/><text x="0.4608%" y="175.50"></text></g><g><title>`0x7FFC00AB4318 (1 samples, 0.02%)</title><rect x="0.2108%" y="149" width="0.0192%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="1"/><text x="0.4608%" y="159.50"></text></g><g><title>`0x7FFC00AB4415 (1 samples, 0.02%)</title><rect x="0.2108%" y="133" width="0.0192%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="1"/><text x="0.4608%" y="143.50"></text></g><g><title>`0x7FFC00AE9A1B (1 samples, 0.02%)</title><rect x="0.2108%" y="117" width="0.0192%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="1"/><text x="0.4608%" y="127.50"></text></g><g><title>`0x7FFC00AFA2AB (1 samples, 0.02%)</title><rect x="0.2108%" y="101" width="0.0192%" height="15" fill="rgb(248,47,43)" fg:x="11" fg:w="1"/><text x="0.4608%" y="111.50"></text></g><g><title>`0x7FFC03140B6F (1 samples, 0.02%)</title><rect x="0.2108%" y="85" width="0.0192%" height="15" fill="rgb(221,10,30)" fg:x="11" fg:w="1"/><text x="0.4608%" y="95.50"></text></g><g><title>`0x7FFC03223474 (1 samples, 0.02%)</title><rect x="0.2108%" y="69" width="0.0192%" height="15" fill="rgb(210,229,1)" fg:x="11" fg:w="1"/><text x="0.4608%" y="79.50"></text></g><g><title>`0x7FFC0318B9A9 (1 samples, 0.02%)</title><rect x="0.2300%" y="325" width="0.0192%" height="15" fill="rgb(222,148,37)" fg:x="12" fg:w="1"/><text x="0.4800%" y="335.50"></text></g><g><title>`0x7FFC031317A0 (1 samples, 0.02%)</title><rect x="0.2300%" y="309" width="0.0192%" height="15" fill="rgb(234,67,33)" fg:x="12" fg:w="1"/><text x="0.4800%" y="319.50"></text></g><g><title>`0x7FFC030E0FBB (1 samples, 0.02%)</title><rect x="0.2300%" y="293" width="0.0192%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="1"/><text x="0.4800%" y="303.50"></text></g><g><title>`0x7FFC030E118D (1 samples, 0.02%)</title><rect x="0.2300%" y="277" width="0.0192%" height="15" fill="rgb(247,138,52)" fg:x="12" fg:w="1"/><text x="0.4800%" y="287.50"></text></g><g><title>`0x7FFC030E31CC (1 samples, 0.02%)</title><rect x="0.2300%" y="261" width="0.0192%" height="15" fill="rgb(213,79,30)" fg:x="12" fg:w="1"/><text x="0.4800%" y="271.50"></text></g><g><title>`0x7FFC030D3D43 (1 samples, 0.02%)</title><rect x="0.2300%" y="245" width="0.0192%" height="15" fill="rgb(246,177,23)" fg:x="12" fg:w="1"/><text x="0.4800%" y="255.50"></text></g><g><title>`0x7FFC03194345 (10 samples, 0.19%)</title><rect x="0.0767%" y="341" width="0.1916%" height="15" fill="rgb(230,62,27)" fg:x="4" fg:w="10"/><text x="0.3267%" y="351.50"></text></g><g><title>`0x7FFC0318B9D9 (1 samples, 0.02%)</title><rect x="0.2491%" y="325" width="0.0192%" height="15" fill="rgb(216,154,8)" fg:x="13" fg:w="1"/><text x="0.4991%" y="335.50"></text></g><g><title>`0x7FFC030D45F9 (1 samples, 0.02%)</title><rect x="0.2491%" y="309" width="0.0192%" height="15" fill="rgb(244,35,45)" fg:x="13" fg:w="1"/><text x="0.4991%" y="319.50"></text></g><g><title>`0x7FFC03223474 (1 samples, 0.02%)</title><rect x="0.2491%" y="293" width="0.0192%" height="15" fill="rgb(251,115,12)" fg:x="13" fg:w="1"/><text x="0.4991%" y="303.50"></text></g><g><title>`0x7FFC0312E19B (1 samples, 0.02%)</title><rect x="0.2683%" y="261" width="0.0192%" height="15" fill="rgb(240,54,50)" fg:x="14" fg:w="1"/><text x="0.5183%" y="271.50"></text></g><g><title>`0x7FFC030E0C54 (1 samples, 0.02%)</title><rect x="0.2683%" y="245" width="0.0192%" height="15" fill="rgb(233,84,52)" fg:x="14" fg:w="1"/><text x="0.5183%" y="255.50"></text></g><g><title>`0x7FFC030E0B09 (1 samples, 0.02%)</title><rect x="0.2683%" y="229" width="0.0192%" height="15" fill="rgb(207,117,47)" fg:x="14" fg:w="1"/><text x="0.5183%" y="239.50"></text></g><g><title>`0x7FFC030E0B76 (1 samples, 0.02%)</title><rect x="0.2683%" y="213" width="0.0192%" height="15" fill="rgb(249,43,39)" fg:x="14" fg:w="1"/><text x="0.5183%" y="223.50"></text></g><g><title>`0x7FFC03223C34 (1 samples, 0.02%)</title><rect x="0.2683%" y="197" width="0.0192%" height="15" fill="rgb(209,38,44)" fg:x="14" fg:w="1"/><text x="0.5183%" y="207.50"></text></g><g><title>`0x7FFC0319444F (2 samples, 0.04%)</title><rect x="0.2683%" y="341" width="0.0383%" height="15" fill="rgb(236,212,23)" fg:x="14" fg:w="2"/><text x="0.5183%" y="351.50"></text></g><g><title>`0x7FFC0310BABE (2 samples, 0.04%)</title><rect x="0.2683%" y="325" width="0.0383%" height="15" fill="rgb(242,79,21)" fg:x="14" fg:w="2"/><text x="0.5183%" y="335.50"></text></g><g><title>`0x7FFC0310D8EE (2 samples, 0.04%)</title><rect x="0.2683%" y="309" width="0.0383%" height="15" fill="rgb(211,96,35)" fg:x="14" fg:w="2"/><text x="0.5183%" y="319.50"></text></g><g><title>`0x7FFC0312D001 (2 samples, 0.04%)</title><rect x="0.2683%" y="293" width="0.0383%" height="15" fill="rgb(253,215,40)" fg:x="14" fg:w="2"/><text x="0.5183%" y="303.50"></text></g><g><title>`0x7FFC0312D64C (2 samples, 0.04%)</title><rect x="0.2683%" y="277" width="0.0383%" height="15" fill="rgb(211,81,21)" fg:x="14" fg:w="2"/><text x="0.5183%" y="287.50"></text></g><g><title>`0x7FFC0312E1BA (1 samples, 0.02%)</title><rect x="0.2875%" y="261" width="0.0192%" height="15" fill="rgb(208,190,38)" fg:x="15" fg:w="1"/><text x="0.5375%" y="271.50"></text></g><g><title>`0x7FFC030E49BD (1 samples, 0.02%)</title><rect x="0.2875%" y="245" width="0.0192%" height="15" fill="rgb(235,213,38)" fg:x="15" fg:w="1"/><text x="0.5375%" y="255.50"></text></g><g><title>`0x7FFC03223694 (1 samples, 0.02%)</title><rect x="0.2875%" y="229" width="0.0192%" height="15" fill="rgb(237,122,38)" fg:x="15" fg:w="1"/><text x="0.5375%" y="239.50"></text></g><g><title>`0x7FFC030C86FA (1 samples, 0.02%)</title><rect x="0.3066%" y="309" width="0.0192%" height="15" fill="rgb(244,218,35)" fg:x="16" fg:w="1"/><text x="0.5566%" y="319.50"></text></g><g><title>`0x7FFC031337AC (1 samples, 0.02%)</title><rect x="0.3066%" y="293" width="0.0192%" height="15" fill="rgb(240,68,47)" fg:x="16" fg:w="1"/><text x="0.5566%" y="303.50"></text></g><g><title>`0x7FFC0313483E (1 samples, 0.02%)</title><rect x="0.3066%" y="277" width="0.0192%" height="15" fill="rgb(210,16,53)" fg:x="16" fg:w="1"/><text x="0.5566%" y="287.50"></text></g><g><title>`0x7FFC03220EDE (1 samples, 0.02%)</title><rect x="0.3066%" y="261" width="0.0192%" height="15" fill="rgb(235,124,12)" fg:x="16" fg:w="1"/><text x="0.5566%" y="271.50"></text></g><g><title>`0x7FFC003103AD (1 samples, 0.02%)</title><rect x="0.3066%" y="245" width="0.0192%" height="15" fill="rgb(224,169,11)" fg:x="16" fg:w="1"/><text x="0.5566%" y="255.50"></text></g><g><title>`0x7FFC003105D1 (1 samples, 0.02%)</title><rect x="0.3066%" y="229" width="0.0192%" height="15" fill="rgb(250,166,2)" fg:x="16" fg:w="1"/><text x="0.5566%" y="239.50"></text></g><g><title>`0x7FFC031AB612 (1 samples, 0.02%)</title><rect x="0.3066%" y="213" width="0.0192%" height="15" fill="rgb(242,216,29)" fg:x="16" fg:w="1"/><text x="0.5566%" y="223.50"></text></g><g><title>`0x7FFC031057A1 (1 samples, 0.02%)</title><rect x="0.3066%" y="197" width="0.0192%" height="15" fill="rgb(230,116,27)" fg:x="16" fg:w="1"/><text x="0.5566%" y="207.50"></text></g><g><title>`0x7FFC03105482 (1 samples, 0.02%)</title><rect x="0.3066%" y="181" width="0.0192%" height="15" fill="rgb(228,99,48)" fg:x="16" fg:w="1"/><text x="0.5566%" y="191.50"></text></g><g><title>`0x7FFC03226CE4 (1 samples, 0.02%)</title><rect x="0.3066%" y="165" width="0.0192%" height="15" fill="rgb(253,11,6)" fg:x="16" fg:w="1"/><text x="0.5566%" y="175.50"></text></g><g><title>`0x7FFC0085A776 (1 samples, 0.02%)</title><rect x="0.3258%" y="197" width="0.0192%" height="15" fill="rgb(247,143,39)" fg:x="17" fg:w="1"/><text x="0.5758%" y="207.50"></text></g><g><title>`0x7FFC0085A906 (1 samples, 0.02%)</title><rect x="0.3258%" y="181" width="0.0192%" height="15" fill="rgb(236,97,10)" fg:x="17" fg:w="1"/><text x="0.5758%" y="191.50"></text></g><g><title>`0x7FFC0085AE4A (1 samples, 0.02%)</title><rect x="0.3258%" y="165" width="0.0192%" height="15" fill="rgb(233,208,19)" fg:x="17" fg:w="1"/><text x="0.5758%" y="175.50"></text></g><g><title>`0x7FFC0085AFD1 (1 samples, 0.02%)</title><rect x="0.3258%" y="149" width="0.0192%" height="15" fill="rgb(216,164,2)" fg:x="17" fg:w="1"/><text x="0.5758%" y="159.50"></text></g><g><title>`0x7FFC0085A35E (1 samples, 0.02%)</title><rect x="0.3258%" y="133" width="0.0192%" height="15" fill="rgb(220,129,5)" fg:x="17" fg:w="1"/><text x="0.5758%" y="143.50"></text></g><g><title>`0x7FFC00A164F1 (1 samples, 0.02%)</title><rect x="0.3258%" y="117" width="0.0192%" height="15" fill="rgb(242,17,10)" fg:x="17" fg:w="1"/><text x="0.5758%" y="127.50"></text></g><g><title>`0x7FFC031924DA (19 samples, 0.36%)</title><rect x="0.0000%" y="373" width="0.3641%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="19"/><text x="0.2500%" y="383.50"></text></g><g><title>`0x7FFC031926F0 (19 samples, 0.36%)</title><rect x="0.0000%" y="357" width="0.3641%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="19"/><text x="0.2500%" y="367.50"></text></g><g><title>`0x7FFC03194566 (3 samples, 0.06%)</title><rect x="0.3066%" y="341" width="0.0575%" height="15" fill="rgb(233,223,10)" fg:x="16" fg:w="3"/><text x="0.5566%" y="351.50"></text></g><g><title>`0x7FFC030C8726 (3 samples, 0.06%)</title><rect x="0.3066%" y="325" width="0.0575%" height="15" fill="rgb(215,21,27)" fg:x="16" fg:w="3"/><text x="0.5566%" y="335.50"></text></g><g><title>`0x7FFC030C8726 (2 samples, 0.04%)</title><rect x="0.3258%" y="309" width="0.0383%" height="15" fill="rgb(232,23,21)" fg:x="17" fg:w="2"/><text x="0.5758%" y="319.50"></text></g><g><title>`0x7FFC030C86FA (2 samples, 0.04%)</title><rect x="0.3258%" y="293" width="0.0383%" height="15" fill="rgb(244,5,23)" fg:x="17" fg:w="2"/><text x="0.5758%" y="303.50"></text></g><g><title>`0x7FFC031337AC (2 samples, 0.04%)</title><rect x="0.3258%" y="277" width="0.0383%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="2"/><text x="0.5758%" y="287.50"></text></g><g><title>`0x7FFC0313483E (2 samples, 0.04%)</title><rect x="0.3258%" y="261" width="0.0383%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="2"/><text x="0.5758%" y="271.50"></text></g><g><title>`0x7FFC03220EDE (2 samples, 0.04%)</title><rect x="0.3258%" y="245" width="0.0383%" height="15" fill="rgb(212,68,19)" fg:x="17" fg:w="2"/><text x="0.5758%" y="255.50"></text></g><g><title>`0x7FFC00866E26 (2 samples, 0.04%)</title><rect x="0.3258%" y="229" width="0.0383%" height="15" fill="rgb(240,187,13)" fg:x="17" fg:w="2"/><text x="0.5758%" y="239.50"></text></g><g><title>`0x7FFC008CAD56 (2 samples, 0.04%)</title><rect x="0.3258%" y="213" width="0.0383%" height="15" fill="rgb(223,113,26)" fg:x="17" fg:w="2"/><text x="0.5758%" y="223.50"></text></g><g><title>`0x7FFC008CF359 (1 samples, 0.02%)</title><rect x="0.3450%" y="197" width="0.0192%" height="15" fill="rgb(206,192,2)" fg:x="18" fg:w="1"/><text x="0.5950%" y="207.50"></text></g><g><title>`0x7FFC008CF3BD (1 samples, 0.02%)</title><rect x="0.3450%" y="181" width="0.0192%" height="15" fill="rgb(241,108,4)" fg:x="18" fg:w="1"/><text x="0.5950%" y="191.50"></text></g><g><title>`0x7FFC0093D5C0 (1 samples, 0.02%)</title><rect x="0.3450%" y="165" width="0.0192%" height="15" fill="rgb(247,173,49)" fg:x="18" fg:w="1"/><text x="0.5950%" y="175.50"></text></g><g><title>`0x7FFC030C2A2E (20 samples, 0.38%)</title><rect x="0.0000%" y="389" width="0.3833%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="20"/><text x="0.2500%" y="399.50"></text></g><g><title>`0x7FFC03192515 (1 samples, 0.02%)</title><rect x="0.3641%" y="373" width="0.0192%" height="15" fill="rgb(245,159,27)" fg:x="19" fg:w="1"/><text x="0.6141%" y="383.50"></text></g><g><title>`0x7FFC03223B34 (1 samples, 0.02%)</title><rect x="0.3641%" y="357" width="0.0192%" height="15" fill="rgb(245,172,44)" fg:x="19" fg:w="1"/><text x="0.6141%" y="367.50"></text></g><g><title>`0x7FFC030C8D70 (1 samples, 0.02%)</title><rect x="0.3833%" y="389" width="0.0192%" height="15" fill="rgb(236,23,11)" fg:x="20" fg:w="1"/><text x="0.6333%" y="399.50"></text></g><g><title>`0x7FFC0312FF81 (1 samples, 0.02%)</title><rect x="0.4025%" y="309" width="0.0192%" height="15" fill="rgb(205,117,38)" fg:x="21" fg:w="1"/><text x="0.6525%" y="319.50"></text></g><g><title>`0x7FFC03130659 (1 samples, 0.02%)</title><rect x="0.4025%" y="293" width="0.0192%" height="15" fill="rgb(237,72,25)" fg:x="21" fg:w="1"/><text x="0.6525%" y="303.50"></text></g><g><title>`0x7FFC03130BB0 (1 samples, 0.02%)</title><rect x="0.4025%" y="277" width="0.0192%" height="15" fill="rgb(244,70,9)" fg:x="21" fg:w="1"/><text x="0.6525%" y="287.50"></text></g><g><title>`0x7FFC03130EE3 (1 samples, 0.02%)</title><rect x="0.4025%" y="261" width="0.0192%" height="15" fill="rgb(217,125,39)" fg:x="21" fg:w="1"/><text x="0.6525%" y="271.50"></text></g><g><title>`0x7FFC032239D4 (1 samples, 0.02%)</title><rect x="0.4025%" y="245" width="0.0192%" height="15" fill="rgb(235,36,10)" fg:x="21" fg:w="1"/><text x="0.6525%" y="255.50"></text></g><g><title>`0x7FFC0312FCDA (2 samples, 0.04%)</title><rect x="0.4025%" y="325" width="0.0383%" height="15" fill="rgb(251,123,47)" fg:x="21" fg:w="2"/><text x="0.6525%" y="335.50"></text></g><g><title>`0x7FFC031300AC (1 samples, 0.02%)</title><rect x="0.4216%" y="309" width="0.0192%" height="15" fill="rgb(221,13,13)" fg:x="22" fg:w="1"/><text x="0.6716%" y="319.50"></text></g><g><title>`0x7FFC031324CC (1 samples, 0.02%)</title><rect x="0.4216%" y="293" width="0.0192%" height="15" fill="rgb(238,131,9)" fg:x="22" fg:w="1"/><text x="0.6716%" y="303.50"></text></g><g><title>`0x7FFC0312D5A8 (1 samples, 0.02%)</title><rect x="0.4216%" y="277" width="0.0192%" height="15" fill="rgb(211,50,8)" fg:x="22" fg:w="1"/><text x="0.6716%" y="287.50"></text></g><g><title>`0x7FFC0310B7D3 (1 samples, 0.02%)</title><rect x="0.4216%" y="261" width="0.0192%" height="15" fill="rgb(245,182,24)" fg:x="22" fg:w="1"/><text x="0.6716%" y="271.50"></text></g><g><title>`0x7FFC030C36F3 (1 samples, 0.02%)</title><rect x="0.4216%" y="245" width="0.0192%" height="15" fill="rgb(242,14,37)" fg:x="22" fg:w="1"/><text x="0.6716%" y="255.50"></text></g><g><title>`0x7FFC022E5B6D (1 samples, 0.02%)</title><rect x="0.4216%" y="229" width="0.0192%" height="15" fill="rgb(246,228,12)" fg:x="22" fg:w="1"/><text x="0.6716%" y="239.50"></text></g><g><title>`0x7FFC030C3A05 (1 samples, 0.02%)</title><rect x="0.4216%" y="213" width="0.0192%" height="15" fill="rgb(213,55,15)" fg:x="22" fg:w="1"/><text x="0.6716%" y="223.50"></text></g><g><title>`0x7FFC030C3A63 (1 samples, 0.02%)</title><rect x="0.4216%" y="197" width="0.0192%" height="15" fill="rgb(209,9,3)" fg:x="22" fg:w="1"/><text x="0.6716%" y="207.50"></text></g><g><title>`0x7FFC0313E4B1 (4 samples, 0.08%)</title><rect x="0.4025%" y="357" width="0.0767%" height="15" fill="rgb(230,59,30)" fg:x="21" fg:w="4"/><text x="0.6525%" y="367.50"></text></g><g><title>`0x7FFC0313D270 (4 samples, 0.08%)</title><rect x="0.4025%" y="341" width="0.0767%" height="15" fill="rgb(209,121,21)" fg:x="21" fg:w="4"/><text x="0.6525%" y="351.50"></text></g><g><title>`0x7FFC0312FDA1 (2 samples, 0.04%)</title><rect x="0.4408%" y="325" width="0.0383%" height="15" fill="rgb(220,109,13)" fg:x="23" fg:w="2"/><text x="0.6908%" y="335.50"></text></g><g><title>`0x7FFC030D2EC9 (2 samples, 0.04%)</title><rect x="0.4408%" y="309" width="0.0383%" height="15" fill="rgb(232,18,1)" fg:x="23" fg:w="2"/><text x="0.6908%" y="319.50"></text></g><g><title>`0x7FFC008BE716 (1 samples, 0.02%)</title><rect x="0.4791%" y="341" width="0.0192%" height="15" fill="rgb(215,41,42)" fg:x="25" fg:w="1"/><text x="0.7291%" y="351.50"></text></g><g><title>kaori.exe`pre_cpp_initialization() (1 samples, 0.02%)</title><rect x="0.4791%" y="325" width="0.0192%" height="15" fill="rgb(224,123,36)" fg:x="25" fg:w="1"/><text x="0.7291%" y="335.50"></text></g><g><title>`0x7FFC00AC0288 (1 samples, 0.02%)</title><rect x="0.4791%" y="309" width="0.0192%" height="15" fill="rgb(240,125,3)" fg:x="25" fg:w="1"/><text x="0.7291%" y="319.50"></text></g><g><title>`0x7FFC00AC043B (1 samples, 0.02%)</title><rect x="0.4791%" y="293" width="0.0192%" height="15" fill="rgb(205,98,50)" fg:x="25" fg:w="1"/><text x="0.7291%" y="303.50"></text></g><g><title>`0x7FFC03223694 (1 samples, 0.02%)</title><rect x="0.4791%" y="277" width="0.0192%" height="15" fill="rgb(205,185,37)" fg:x="25" fg:w="1"/><text x="0.7291%" y="287.50"></text></g><g><title>`0x7FFC0310A4F2 (1 samples, 0.02%)</title><rect x="0.4983%" y="229" width="0.0192%" height="15" fill="rgb(238,207,15)" fg:x="26" fg:w="1"/><text x="0.7483%" y="239.50"></text></g><g><title>`0x7FFC0310ED9A (1 samples, 0.02%)</title><rect x="0.4983%" y="213" width="0.0192%" height="15" fill="rgb(213,199,42)" fg:x="26" fg:w="1"/><text x="0.7483%" y="223.50"></text></g><g><title>`0x7FFC0310F580 (1 samples, 0.02%)</title><rect x="0.4983%" y="197" width="0.0192%" height="15" fill="rgb(235,201,11)" fg:x="26" fg:w="1"/><text x="0.7483%" y="207.50"></text></g><g><title>`0x7FFC03110E14 (1 samples, 0.02%)</title><rect x="0.4983%" y="181" width="0.0192%" height="15" fill="rgb(207,46,11)" fg:x="26" fg:w="1"/><text x="0.7483%" y="191.50"></text></g><g><title>`0x7FFC03110F54 (1 samples, 0.02%)</title><rect x="0.4983%" y="165" width="0.0192%" height="15" fill="rgb(241,35,35)" fg:x="26" fg:w="1"/><text x="0.7483%" y="175.50"></text></g><g><title>`0x7FFC03111646 (1 samples, 0.02%)</title><rect x="0.4983%" y="149" width="0.0192%" height="15" fill="rgb(243,32,47)" fg:x="26" fg:w="1"/><text x="0.7483%" y="159.50"></text></g><g><title>`0x7FFC03132377 (1 samples, 0.02%)</title><rect x="0.5174%" y="181" width="0.0192%" height="15" fill="rgb(247,202,23)" fg:x="27" fg:w="1"/><text x="0.7674%" y="191.50"></text></g><g><title>`0x7FFC03223894 (1 samples, 0.02%)</title><rect x="0.5174%" y="165" width="0.0192%" height="15" fill="rgb(219,102,11)" fg:x="27" fg:w="1"/><text x="0.7674%" y="175.50"></text></g><g><title>`0x7FFC0310B80E (1 samples, 0.02%)</title><rect x="0.5366%" y="149" width="0.0192%" height="15" fill="rgb(243,110,44)" fg:x="28" fg:w="1"/><text x="0.7866%" y="159.50"></text></g><g><title>`0x7FFC030E2183 (1 samples, 0.02%)</title><rect x="0.5366%" y="133" width="0.0192%" height="15" fill="rgb(222,74,54)" fg:x="28" fg:w="1"/><text x="0.7866%" y="143.50"></text></g><g><title>`0x7FFC0310A510 (3 samples, 0.06%)</title><rect x="0.5174%" y="229" width="0.0575%" height="15" fill="rgb(216,99,12)" fg:x="27" fg:w="3"/><text x="0.7674%" y="239.50"></text></g><g><title>`0x7FFC0312FDB4 (3 samples, 0.06%)</title><rect x="0.5174%" y="213" width="0.0575%" height="15" fill="rgb(226,22,26)" fg:x="27" fg:w="3"/><text x="0.7674%" y="223.50"></text></g><g><title>`0x7FFC0313039D (3 samples, 0.06%)</title><rect x="0.5174%" y="197" width="0.0575%" height="15" fill="rgb(217,163,10)" fg:x="27" fg:w="3"/><text x="0.7674%" y="207.50"></text></g><g><title>`0x7FFC031324CC (2 samples, 0.04%)</title><rect x="0.5366%" y="181" width="0.0383%" height="15" fill="rgb(213,25,53)" fg:x="28" fg:w="2"/><text x="0.7866%" y="191.50"></text></g><g><title>`0x7FFC0312D5A8 (2 samples, 0.04%)</title><rect x="0.5366%" y="165" width="0.0383%" height="15" fill="rgb(252,105,26)" fg:x="28" fg:w="2"/><text x="0.7866%" y="175.50"></text></g><g><title>`0x7FFC0310BC32 (1 samples, 0.02%)</title><rect x="0.5558%" y="149" width="0.0192%" height="15" fill="rgb(220,39,43)" fg:x="29" fg:w="1"/><text x="0.8058%" y="159.50"></text></g><g><title>`0x7FFC030D2EC9 (1 samples, 0.02%)</title><rect x="0.5558%" y="133" width="0.0192%" height="15" fill="rgb(229,68,48)" fg:x="29" fg:w="1"/><text x="0.8058%" y="143.50"></text></g><g><title>`0x7FFC008F0046 (5 samples, 0.10%)</title><rect x="0.4983%" y="341" width="0.0958%" height="15" fill="rgb(252,8,32)" fg:x="26" fg:w="5"/><text x="0.7483%" y="351.50"></text></g><g><title>`0x7FFC008D553D (5 samples, 0.10%)</title><rect x="0.4983%" y="325" width="0.0958%" height="15" fill="rgb(223,20,43)" fg:x="26" fg:w="5"/><text x="0.7483%" y="335.50"></text></g><g><title>`0x7FFC0086423B (5 samples, 0.10%)</title><rect x="0.4983%" y="309" width="0.0958%" height="15" fill="rgb(229,81,49)" fg:x="26" fg:w="5"/><text x="0.7483%" y="319.50"></text></g><g><title>`0x7FFC008C6225 (5 samples, 0.10%)</title><rect x="0.4983%" y="293" width="0.0958%" height="15" fill="rgb(236,28,36)" fg:x="26" fg:w="5"/><text x="0.7483%" y="303.50"></text></g><g><title>`0x7FFC009EDD0F (5 samples, 0.10%)</title><rect x="0.4983%" y="277" width="0.0958%" height="15" fill="rgb(249,185,26)" fg:x="26" fg:w="5"/><text x="0.7483%" y="287.50"></text></g><g><title>`0x7FFC030D4FB0 (5 samples, 0.10%)</title><rect x="0.4983%" y="261" width="0.0958%" height="15" fill="rgb(249,174,33)" fg:x="26" fg:w="5"/><text x="0.7483%" y="271.50"></text></g><g><title>`0x7FFC0310A190 (5 samples, 0.10%)</title><rect x="0.4983%" y="245" width="0.0958%" height="15" fill="rgb(233,201,37)" fg:x="26" fg:w="5"/><text x="0.7483%" y="255.50"></text></g><g><title>`0x7FFC0310A584 (1 samples, 0.02%)</title><rect x="0.5749%" y="229" width="0.0192%" height="15" fill="rgb(221,78,26)" fg:x="30" fg:w="1"/><text x="0.8249%" y="239.50"></text></g><g><title>`0x7FFC030C7883 (1 samples, 0.02%)</title><rect x="0.5749%" y="213" width="0.0192%" height="15" fill="rgb(250,127,30)" fg:x="30" fg:w="1"/><text x="0.8249%" y="223.50"></text></g><g><title>`0x7FFC030C8726 (1 samples, 0.02%)</title><rect x="0.5749%" y="197" width="0.0192%" height="15" fill="rgb(230,49,44)" fg:x="30" fg:w="1"/><text x="0.8249%" y="207.50"></text></g><g><title>`0x7FFC030C86FA (1 samples, 0.02%)</title><rect x="0.5749%" y="181" width="0.0192%" height="15" fill="rgb(229,67,23)" fg:x="30" fg:w="1"/><text x="0.8249%" y="191.50"></text></g><g><title>`0x7FFC031337AC (1 samples, 0.02%)</title><rect x="0.5749%" y="165" width="0.0192%" height="15" fill="rgb(249,83,47)" fg:x="30" fg:w="1"/><text x="0.8249%" y="175.50"></text></g><g><title>`0x7FFC0313483E (1 samples, 0.02%)</title><rect x="0.5749%" y="149" width="0.0192%" height="15" fill="rgb(215,43,3)" fg:x="30" fg:w="1"/><text x="0.8249%" y="159.50"></text></g><g><title>`0x7FFC03220EDE (1 samples, 0.02%)</title><rect x="0.5749%" y="133" width="0.0192%" height="15" fill="rgb(238,154,13)" fg:x="30" fg:w="1"/><text x="0.8249%" y="143.50"></text></g><g><title>`0x7FFC020B7A70 (1 samples, 0.02%)</title><rect x="0.5749%" y="117" width="0.0192%" height="15" fill="rgb(219,56,2)" fg:x="30" fg:w="1"/><text x="0.8249%" y="127.50"></text></g><g><title>`0x7FFC020CDBAF (1 samples, 0.02%)</title><rect x="0.5749%" y="101" width="0.0192%" height="15" fill="rgb(233,0,4)" fg:x="30" fg:w="1"/><text x="0.8249%" y="111.50"></text></g><g><title>`0x7FFC008F0093 (1 samples, 0.02%)</title><rect x="0.5941%" y="341" width="0.0192%" height="15" fill="rgb(235,30,7)" fg:x="31" fg:w="1"/><text x="0.8441%" y="351.50"></text></g><g><title>`0x7FFC023018AB (1 samples, 0.02%)</title><rect x="0.5941%" y="325" width="0.0192%" height="15" fill="rgb(250,79,13)" fg:x="31" fg:w="1"/><text x="0.8441%" y="335.50"></text></g><g><title>`0x7FFC030C8EDE (1 samples, 0.02%)</title><rect x="0.5941%" y="309" width="0.0192%" height="15" fill="rgb(211,146,34)" fg:x="31" fg:w="1"/><text x="0.8441%" y="319.50"></text></g><g><title>`0x7FFC031BDFFF (1 samples, 0.02%)</title><rect x="0.5941%" y="293" width="0.0192%" height="15" fill="rgb(228,22,38)" fg:x="31" fg:w="1"/><text x="0.8441%" y="303.50"></text></g><g><title>`0x7FFC0313483E (1 samples, 0.02%)</title><rect x="0.5941%" y="277" width="0.0192%" height="15" fill="rgb(235,168,5)" fg:x="31" fg:w="1"/><text x="0.8441%" y="287.50"></text></g><g><title>`0x7FFC03220EDE (1 samples, 0.02%)</title><rect x="0.5941%" y="261" width="0.0192%" height="15" fill="rgb(221,155,16)" fg:x="31" fg:w="1"/><text x="0.8441%" y="271.50"></text></g><g><title>`0x7FFC008D020E (1 samples, 0.02%)</title><rect x="0.5941%" y="245" width="0.0192%" height="15" fill="rgb(215,215,53)" fg:x="31" fg:w="1"/><text x="0.8441%" y="255.50"></text></g><g><title>`0x7FFC00887AB8 (1 samples, 0.02%)</title><rect x="0.5941%" y="229" width="0.0192%" height="15" fill="rgb(223,4,10)" fg:x="31" fg:w="1"/><text x="0.8441%" y="239.50"></text></g><g><title>`0x7FFC008BA8F8 (1 samples, 0.02%)</title><rect x="0.5941%" y="213" width="0.0192%" height="15" fill="rgb(234,103,6)" fg:x="31" fg:w="1"/><text x="0.8441%" y="223.50"></text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;enum2$ (376 samples, 7.21%)</title><rect x="38.2330%" y="133" width="7.2058%" height="15" fill="rgb(227,97,0)" fg:x="1995" fg:w="376"/><text x="38.4830%" y="143.50">kaori.exe`..</text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;enum2$ (376 samples, 7.21%)</title><rect x="38.2330%" y="117" width="7.2058%" height="15" fill="rgb(234,150,53)" fg:x="1995" fg:w="376"/><text x="38.4830%" y="127.50">kaori.exe`..</text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;enum2$ (376 samples, 7.21%)</title><rect x="38.2330%" y="101" width="7.2058%" height="15" fill="rgb(228,201,54)" fg:x="1995" fg:w="376"/><text x="38.4830%" y="111.50">kaori.exe`..</text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_slice (2 samples, 0.04%)</title><rect x="48.2944%" y="69" width="0.0383%" height="15" fill="rgb(222,22,37)" fg:x="2520" fg:w="2"/><text x="48.5444%" y="79.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::get_value (167 samples, 3.20%)</title><rect x="46.2246%" y="117" width="3.2005%" height="15" fill="rgb(237,53,32)" fg:x="2412" fg:w="167"/><text x="46.4746%" y="127.50">kao..</text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (59 samples, 1.13%)</title><rect x="48.2944%" y="101" width="1.1307%" height="15" fill="rgb(233,25,53)" fg:x="2520" fg:w="59"/><text x="48.5444%" y="111.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (59 samples, 1.13%)</title><rect x="48.2944%" y="85" width="1.1307%" height="15" fill="rgb(210,40,34)" fg:x="2520" fg:w="59"/><text x="48.5444%" y="95.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (57 samples, 1.09%)</title><rect x="48.3327%" y="69" width="1.0924%" height="15" fill="rgb(241,220,44)" fg:x="2522" fg:w="57"/><text x="48.5827%" y="79.50"></text></g><g><title>kaori.exe`alloc::vec::Vec&lt;kaori::bytecode::value::Value,alloc::alloc::Global&gt;::as_mut_slice (2 samples, 0.04%)</title><rect x="57.8383%" y="69" width="0.0383%" height="15" fill="rgb(235,28,35)" fg:x="3018" fg:w="2"/><text x="58.0883%" y="79.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::instruction_add (747 samples, 14.32%)</title><rect x="45.4389%" y="133" width="14.3158%" height="15" fill="rgb(210,56,17)" fg:x="2371" fg:w="747"/><text x="45.6889%" y="143.50">kaori.exe`kaori::virtu..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::set_value (539 samples, 10.33%)</title><rect x="49.4251%" y="117" width="10.3296%" height="15" fill="rgb(224,130,29)" fg:x="2579" fg:w="539"/><text x="49.6751%" y="127.50">kaori.exe`kaori..</text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (100 samples, 1.92%)</title><rect x="57.8383%" y="101" width="1.9164%" height="15" fill="rgb(235,212,8)" fg:x="3018" fg:w="100"/><text x="58.0883%" y="111.50">k..</text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (100 samples, 1.92%)</title><rect x="57.8383%" y="85" width="1.9164%" height="15" fill="rgb(223,33,50)" fg:x="3018" fg:w="100"/><text x="58.0883%" y="95.50">k..</text></g><g><title>kaori.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (98 samples, 1.88%)</title><rect x="57.8766%" y="69" width="1.8781%" height="15" fill="rgb(219,149,13)" fg:x="3020" fg:w="98"/><text x="58.1266%" y="79.50">k..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::instruction_conditional_jump (106 samples, 2.03%)</title><rect x="59.7547%" y="133" width="2.0314%" height="15" fill="rgb(250,156,29)" fg:x="3118" fg:w="106"/><text x="60.0047%" y="143.50">k..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::instruction_jump (174 samples, 3.33%)</title><rect x="61.7861%" y="133" width="3.3346%" height="15" fill="rgb(216,193,19)" fg:x="3224" fg:w="174"/><text x="62.0361%" y="143.50">kao..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::get_value (84 samples, 1.61%)</title><rect x="65.8107%" y="117" width="1.6098%" height="15" fill="rgb(216,135,14)" fg:x="3434" fg:w="84"/><text x="66.0607%" y="127.50"></text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (51 samples, 0.98%)</title><rect x="66.4431%" y="101" width="0.9774%" height="15" fill="rgb(241,47,5)" fg:x="3467" fg:w="51"/><text x="66.6931%" y="111.50"></text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (51 samples, 0.98%)</title><rect x="66.4431%" y="85" width="0.9774%" height="15" fill="rgb(233,42,35)" fg:x="3467" fg:w="51"/><text x="66.6931%" y="95.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (51 samples, 0.98%)</title><rect x="66.4431%" y="69" width="0.9774%" height="15" fill="rgb(231,13,6)" fg:x="3467" fg:w="51"/><text x="66.6931%" y="79.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::instruction_less (529 samples, 10.14%)</title><rect x="65.1207%" y="133" width="10.1380%" height="15" fill="rgb(207,181,40)" fg:x="3398" fg:w="529"/><text x="65.3707%" y="143.50">kaori.exe`kaori..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::set_value (409 samples, 7.84%)</title><rect x="67.4205%" y="117" width="7.8383%" height="15" fill="rgb(254,173,49)" fg:x="3518" fg:w="409"/><text x="67.6705%" y="127.50">kaori.exe`k..</text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (49 samples, 0.94%)</title><rect x="74.3197%" y="101" width="0.9391%" height="15" fill="rgb(221,1,38)" fg:x="3878" fg:w="49"/><text x="74.5697%" y="111.50"></text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (49 samples, 0.94%)</title><rect x="74.3197%" y="85" width="0.9391%" height="15" fill="rgb(206,124,46)" fg:x="3878" fg:w="49"/><text x="74.5697%" y="95.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (49 samples, 0.94%)</title><rect x="74.3197%" y="69" width="0.9391%" height="15" fill="rgb(249,21,11)" fg:x="3878" fg:w="49"/><text x="74.5697%" y="79.50"></text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::get_value (233 samples, 4.47%)</title><rect x="75.3545%" y="117" width="4.4653%" height="15" fill="rgb(222,201,40)" fg:x="3932" fg:w="233"/><text x="75.6045%" y="127.50">kaori..</text></g><g><title>kaori.exe`alloc::vec::impl$13::index(alloc::vec::Vec (151 samples, 2.89%)</title><rect x="76.9260%" y="101" width="2.8938%" height="15" fill="rgb(235,61,29)" fg:x="4014" fg:w="151"/><text x="77.1760%" y="111.50">ka..</text></g><g><title>kaori.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (151 samples, 2.89%)</title><rect x="76.9260%" y="85" width="2.8938%" height="15" fill="rgb(219,207,3)" fg:x="4014" fg:w="151"/><text x="77.1760%" y="95.50">ka..</text></g><g><title>kaori.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (151 samples, 2.89%)</title><rect x="76.9260%" y="69" width="2.8938%" height="15" fill="rgb(222,56,46)" fg:x="4014" fg:w="151"/><text x="77.1760%" y="79.50">ka..</text></g><g><title>kaori.exe`core::ptr::drop_in_place(enum2$&lt;core::result::Result&lt;tuple$ (5,184 samples, 99.35%)</title><rect x="0.6133%" y="165" width="99.3484%" height="15" fill="rgb(239,76,54)" fg:x="32" fg:w="5184"/><text x="0.8633%" y="175.50">kaori.exe`core::ptr::drop_in_place(enum2$&lt;core::result::Result&lt;tuple$</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::run (5,184 samples, 99.35%)</title><rect x="0.6133%" y="149" width="99.3484%" height="15" fill="rgb(231,124,27)" fg:x="32" fg:w="5184"/><text x="0.8633%" y="159.50">kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::run</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::instruction_move (1,289 samples, 24.70%)</title><rect x="75.2587%" y="133" width="24.7030%" height="15" fill="rgb(249,195,6)" fg:x="3927" fg:w="1289"/><text x="75.5087%" y="143.50">kaori.exe`kaori::virtual_machine::kaori..</text></g><g><title>kaori.exe`kaori::virtual_machine::kaori_vm::KaoriVM::set_value (1,051 samples, 20.14%)</title><rect x="79.8199%" y="117" width="20.1418%" height="15" fill="rgb(237,174,47)" fg:x="4165" fg:w="1051"/><text x="80.0699%" y="127.50">kaori.exe`kaori::virtual_machine..</text></g><g><title>kaori.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (89 samples, 1.71%)</title><rect x="98.2560%" y="101" width="1.7056%" height="15" fill="rgb(206,201,31)" fg:x="5127" fg:w="89"/><text x="98.5060%" y="111.50"></text></g><g><title>kaori.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (89 samples, 1.71%)</title><rect x="98.2560%" y="85" width="1.7056%" height="15" fill="rgb(231,57,52)" fg:x="5127" fg:w="89"/><text x="98.5060%" y="95.50"></text></g><g><title>kaori.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (89 samples, 1.71%)</title><rect x="98.2560%" y="69" width="1.7056%" height="15" fill="rgb(248,177,22)" fg:x="5127" fg:w="89"/><text x="98.5060%" y="79.50"></text></g><g><title>kaori.exe`kaori::program::run_program (5,185 samples, 99.37%)</title><rect x="0.6133%" y="181" width="99.3676%" height="15" fill="rgb(215,211,37)" fg:x="32" fg:w="5185"/><text x="0.8633%" y="191.50">kaori.exe`kaori::program::run_program</text></g><g><title>kaori.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result (1 samples, 0.02%)</title><rect x="99.9617%" y="165" width="0.0192%" height="15" fill="rgb(241,128,51)" fg:x="5216" fg:w="1"/><text x="100.2117%" y="175.50"></text></g><g><title>kaori.exe`kaori::program::compile_source_code (1 samples, 0.02%)</title><rect x="99.9617%" y="149" width="0.0192%" height="15" fill="rgb(227,165,31)" fg:x="5216" fg:w="1"/><text x="100.2117%" y="159.50"></text></g><g><title>kaori.exe`kaori::program::build_cfg_ir(ref$&lt;slice2$ (1 samples, 0.02%)</title><rect x="99.9617%" y="133" width="0.0192%" height="15" fill="rgb(228,167,24)" fg:x="5216" fg:w="1"/><text x="100.2117%" y="143.50"></text></g><g><title>kaori.exe`kaori::cfg_ir::cfg_builder::CfgBuilder::build_ir(ref$&lt;slice2$ (1 samples, 0.02%)</title><rect x="99.9617%" y="117" width="0.0192%" height="15" fill="rgb(228,143,12)" fg:x="5216" fg:w="1"/><text x="100.2117%" y="127.50"></text></g><g><title>kaori.exe`kaori::cfg_ir::cfg_builder::CfgBuilder::visit_declaration (1 samples, 0.02%)</title><rect x="99.9617%" y="101" width="0.0192%" height="15" fill="rgb(249,149,8)" fg:x="5216" fg:w="1"/><text x="100.2117%" y="111.50"></text></g><g><title>kaori.exe`core::slice::iter::impl$166::next(core::slice::iter::Iter&lt;enum2$ (1 samples, 0.02%)</title><rect x="99.9617%" y="85" width="0.0192%" height="15" fill="rgb(243,35,44)" fg:x="5216" fg:w="1"/><text x="100.2117%" y="95.50"></text></g><g><title>kaori.exe`core::ptr::non_null::impl$13::eq(core::ptr::non_null::NonNull&lt;enum2$&lt;kaori::semantic::hir_node::HirNode&gt; &gt;*, core::ptr::non_null::NonNull&lt;enum2$ (1 samples, 0.02%)</title><rect x="99.9617%" y="69" width="0.0192%" height="15" fill="rgb(246,89,9)" fg:x="5216" fg:w="1"/><text x="100.2117%" y="79.50"></text></g><g><title>kaori.exe`kaori::cfg_ir::cfg_builder::CfgBuilder::visit_declaration (1 samples, 0.02%)</title><rect x="99.9617%" y="53" width="0.0192%" height="15" fill="rgb(233,213,13)" fg:x="5216" fg:w="1"/><text x="100.2117%" y="63.50"></text></g><g><title>kaori.exe`kaori::cfg_ir::cfg_builder::CfgBuilder::visit_expression (1 samples, 0.02%)</title><rect x="99.9617%" y="37" width="0.0192%" height="15" fill="rgb(233,141,41)" fg:x="5216" fg:w="1"/><text x="100.2117%" y="47.50"></text></g><g><title>all (5,218 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(239,167,4)" fg:x="0" fg:w="5218"/><text x="0.2500%" y="415.50"></text></g><g><title>`0x7FFC030C8D9C (5,197 samples, 99.60%)</title><rect x="0.4025%" y="389" width="99.5975%" height="15" fill="rgb(209,217,16)" fg:x="21" fg:w="5197"/><text x="0.6525%" y="399.50">`0x7FFC030C8D9C</text></g><g><title>`0x7FFC022EE8D7 (5,197 samples, 99.60%)</title><rect x="0.4025%" y="373" width="99.5975%" height="15" fill="rgb(219,88,35)" fg:x="21" fg:w="5197"/><text x="0.6525%" y="383.50">`0x7FFC022EE8D7</text></g><g><title>kaori.exe`__scrt_common_main_seh() (5,193 samples, 99.52%)</title><rect x="0.4791%" y="357" width="99.5209%" height="15" fill="rgb(220,193,23)" fg:x="25" fg:w="5193"/><text x="0.7291%" y="367.50">kaori.exe`__scrt_common_main_seh()</text></g><g><title>kaori.exe`invoke_main() (5,186 samples, 99.39%)</title><rect x="0.6133%" y="341" width="99.3867%" height="15" fill="rgb(230,90,52)" fg:x="32" fg:w="5186"/><text x="0.8633%" y="351.50">kaori.exe`invoke_main()</text></g><g><title>kaori.exe`main (5,186 samples, 99.39%)</title><rect x="0.6133%" y="325" width="99.3867%" height="15" fill="rgb(252,106,19)" fg:x="32" fg:w="5186"/><text x="0.8633%" y="335.50">kaori.exe`main</text></g><g><title>kaori.exe`std::rt::lang_start_internal (5,186 samples, 99.39%)</title><rect x="0.6133%" y="309" width="99.3867%" height="15" fill="rgb(206,74,20)" fg:x="32" fg:w="5186"/><text x="0.8633%" y="319.50">kaori.exe`std::rt::lang_start_internal</text></g><g><title>kaori.exe`std::panic::catch_unwind (5,186 samples, 99.39%)</title><rect x="0.6133%" y="293" width="99.3867%" height="15" fill="rgb(230,138,44)" fg:x="32" fg:w="5186"/><text x="0.8633%" y="303.50">kaori.exe`std::panic::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind (5,186 samples, 99.39%)</title><rect x="0.6133%" y="277" width="99.3867%" height="15" fill="rgb(235,182,43)" fg:x="32" fg:w="5186"/><text x="0.8633%" y="287.50">kaori.exe`std::panicking::catch_unwind</text></g><g><title>kaori.exe`std::panicking::catch_unwind::do_call (5,186 samples, 99.39%)</title><rect x="0.6133%" y="261" width="99.3867%" height="15" fill="rgb(242,16,51)" fg:x="32" fg:w="5186"/><text x="0.8633%" y="271.50">kaori.exe`std::panicking::catch_unwind::do_call</text></g><g><title>kaori.exe`std::rt::lang_start_internal::closure$0 (5,186 samples, 99.39%)</title><rect x="0.6133%" y="245" width="99.3867%" height="15" fill="rgb(248,9,4)" fg:x="32" fg:w="5186"/><text x="0.8633%" y="255.50">kaori.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (5,186 samples, 99.39%)</title><rect x="0.6133%" y="229" width="99.3867%" height="15" fill="rgb(210,31,22)" fg:x="32" fg:w="5186"/><text x="0.8633%" y="239.50">kaori.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (5,186 samples, 99.39%)</title><rect x="0.6133%" y="213" width="99.3867%" height="15" fill="rgb(239,54,39)" fg:x="32" fg:w="5186"/><text x="0.8633%" y="223.50">kaori.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>kaori.exe`kaori::main (5,186 samples, 99.39%)</title><rect x="0.6133%" y="197" width="99.3867%" height="15" fill="rgb(230,99,41)" fg:x="32" fg:w="5186"/><text x="0.8633%" y="207.50">kaori.exe`kaori::main</text></g><g><title>kaori.exe`std::fs::read_to_string(ref$ (1 samples, 0.02%)</title><rect x="99.9808%" y="181" width="0.0192%" height="15" fill="rgb(253,106,12)" fg:x="5217" fg:w="1"/><text x="100.2308%" y="191.50"></text></g><g><title>kaori.exe`std::fs::read_to_string::inner (1 samples, 0.02%)</title><rect x="99.9808%" y="165" width="0.0192%" height="15" fill="rgb(213,46,41)" fg:x="5217" fg:w="1"/><text x="100.2308%" y="175.50"></text></g><g><title>kaori.exe`std::fs::File::metadata (1 samples, 0.02%)</title><rect x="99.9808%" y="149" width="0.0192%" height="15" fill="rgb(215,133,35)" fg:x="5217" fg:w="1"/><text x="100.2308%" y="159.50"></text></g><g><title>kaori.exe`core::result::Result::map (1 samples, 0.02%)</title><rect x="99.9808%" y="133" width="0.0192%" height="15" fill="rgb(213,28,5)" fg:x="5217" fg:w="1"/><text x="100.2308%" y="143.50"></text></g><g><title>kaori.exe`std::sys::fs::windows::File::file_attr (1 samples, 0.02%)</title><rect x="99.9808%" y="117" width="0.0192%" height="15" fill="rgb(215,77,49)" fg:x="5217" fg:w="1"/><text x="100.2308%" y="127.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::cvt (1 samples, 0.02%)</title><rect x="99.9808%" y="101" width="0.0192%" height="15" fill="rgb(248,100,22)" fg:x="5217" fg:w="1"/><text x="100.2308%" y="111.50"></text></g><g><title>kaori.exe`std::sys::pal::windows::impl$3::is_zero (1 samples, 0.02%)</title><rect x="99.9808%" y="85" width="0.0192%" height="15" fill="rgb(208,67,9)" fg:x="5217" fg:w="1"/><text x="100.2308%" y="95.50"></text></g><g><title>`0x7FFC00A4B37A (1 samples, 0.02%)</title><rect x="99.9808%" y="69" width="0.0192%" height="15" fill="rgb(219,133,21)" fg:x="5217" fg:w="1"/><text x="100.2308%" y="79.50"></text></g><g><title>`0x7FFC03229843 (1 samples, 0.02%)</title><rect x="99.9808%" y="53" width="0.0192%" height="15" fill="rgb(246,46,29)" fg:x="5217" fg:w="1"/><text x="100.2308%" y="63.50"></text></g></svg></svg>